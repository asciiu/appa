// Code generated by protoc-gen-go. DO NOT EDIT.
// source: github.com/asciiu/gomo/account-service/proto/account/account.proto

/*
Package account is a generated protocol buffer package.

It is generated from these files:
	github.com/asciiu/gomo/account-service/proto/account/account.proto

It has these top-level messages:
	NewAccountRequest
	UpdateAccountRequest
	AccountRequest
	AccountsRequest
	Account
	UserAccount
	AccountResponse
	UserAccounts
	AccountsResponse
*/
package account

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import balance "github.com/asciiu/gomo/account-service/proto/balance"

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "golang.org/x/net/context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Requests
type NewAccountRequest struct {
	UserID      string                       `protobuf:"bytes,1,opt,name=userID" json:"userID,omitempty"`
	Exchange    string                       `protobuf:"bytes,2,opt,name=exchange" json:"exchange,omitempty"`
	KeyPublic   string                       `protobuf:"bytes,3,opt,name=keyPublic" json:"keyPublic,omitempty"`
	KeySecret   string                       `protobuf:"bytes,4,opt,name=keySecret" json:"keySecret,omitempty"`
	Description string                       `protobuf:"bytes,5,opt,name=description" json:"description,omitempty"`
	Balances    []*balance.NewBalanceRequest `protobuf:"bytes,6,rep,name=balances" json:"balances,omitempty"`
}

func (m *NewAccountRequest) Reset()                    { *m = NewAccountRequest{} }
func (m *NewAccountRequest) String() string            { return proto.CompactTextString(m) }
func (*NewAccountRequest) ProtoMessage()               {}
func (*NewAccountRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *NewAccountRequest) GetUserID() string {
	if m != nil {
		return m.UserID
	}
	return ""
}

func (m *NewAccountRequest) GetExchange() string {
	if m != nil {
		return m.Exchange
	}
	return ""
}

func (m *NewAccountRequest) GetKeyPublic() string {
	if m != nil {
		return m.KeyPublic
	}
	return ""
}

func (m *NewAccountRequest) GetKeySecret() string {
	if m != nil {
		return m.KeySecret
	}
	return ""
}

func (m *NewAccountRequest) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *NewAccountRequest) GetBalances() []*balance.NewBalanceRequest {
	if m != nil {
		return m.Balances
	}
	return nil
}

type UpdateAccountRequest struct {
	AccountID   string                       `protobuf:"bytes,1,opt,name=accountID" json:"accountID,omitempty"`
	UserID      string                       `protobuf:"bytes,2,opt,name=userID" json:"userID,omitempty"`
	KeyPublic   string                       `protobuf:"bytes,3,opt,name=keyPublic" json:"keyPublic,omitempty"`
	KeySecret   string                       `protobuf:"bytes,4,opt,name=keySecret" json:"keySecret,omitempty"`
	Description string                       `protobuf:"bytes,5,opt,name=description" json:"description,omitempty"`
	Balances    []*balance.NewBalanceRequest `protobuf:"bytes,6,rep,name=balances" json:"balances,omitempty"`
}

func (m *UpdateAccountRequest) Reset()                    { *m = UpdateAccountRequest{} }
func (m *UpdateAccountRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateAccountRequest) ProtoMessage()               {}
func (*UpdateAccountRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *UpdateAccountRequest) GetAccountID() string {
	if m != nil {
		return m.AccountID
	}
	return ""
}

func (m *UpdateAccountRequest) GetUserID() string {
	if m != nil {
		return m.UserID
	}
	return ""
}

func (m *UpdateAccountRequest) GetKeyPublic() string {
	if m != nil {
		return m.KeyPublic
	}
	return ""
}

func (m *UpdateAccountRequest) GetKeySecret() string {
	if m != nil {
		return m.KeySecret
	}
	return ""
}

func (m *UpdateAccountRequest) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *UpdateAccountRequest) GetBalances() []*balance.NewBalanceRequest {
	if m != nil {
		return m.Balances
	}
	return nil
}

type AccountRequest struct {
	AccountID string `protobuf:"bytes,1,opt,name=accountID" json:"accountID,omitempty"`
}

func (m *AccountRequest) Reset()                    { *m = AccountRequest{} }
func (m *AccountRequest) String() string            { return proto.CompactTextString(m) }
func (*AccountRequest) ProtoMessage()               {}
func (*AccountRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *AccountRequest) GetAccountID() string {
	if m != nil {
		return m.AccountID
	}
	return ""
}

type AccountsRequest struct {
	UserID string `protobuf:"bytes,1,opt,name=userID" json:"userID,omitempty"`
}

func (m *AccountsRequest) Reset()                    { *m = AccountsRequest{} }
func (m *AccountsRequest) String() string            { return proto.CompactTextString(m) }
func (*AccountsRequest) ProtoMessage()               {}
func (*AccountsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *AccountsRequest) GetUserID() string {
	if m != nil {
		return m.UserID
	}
	return ""
}

// Responses
type Account struct {
	AccountID   string             `protobuf:"bytes,1,opt,name=accountID" json:"accountID,omitempty"`
	UserID      string             `protobuf:"bytes,2,opt,name=userID" json:"userID,omitempty"`
	Exchange    string             `protobuf:"bytes,3,opt,name=exchange" json:"exchange,omitempty"`
	KeyPublic   string             `protobuf:"bytes,4,opt,name=keyPublic" json:"keyPublic,omitempty"`
	KeySecret   string             `protobuf:"bytes,5,opt,name=keySecret" json:"keySecret,omitempty"`
	Title       string             `protobuf:"bytes,6,opt,name=title" json:"title,omitempty"`
	Description string             `protobuf:"bytes,7,opt,name=description" json:"description,omitempty"`
	Status      string             `protobuf:"bytes,8,opt,name=status" json:"status,omitempty"`
	CreatedOn   string             `protobuf:"bytes,9,opt,name=createdOn" json:"createdOn,omitempty"`
	UpdatedOn   string             `protobuf:"bytes,10,opt,name=updatedOn" json:"updatedOn,omitempty"`
	Balances    []*balance.Balance `protobuf:"bytes,11,rep,name=balances" json:"balances,omitempty"`
}

func (m *Account) Reset()                    { *m = Account{} }
func (m *Account) String() string            { return proto.CompactTextString(m) }
func (*Account) ProtoMessage()               {}
func (*Account) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *Account) GetAccountID() string {
	if m != nil {
		return m.AccountID
	}
	return ""
}

func (m *Account) GetUserID() string {
	if m != nil {
		return m.UserID
	}
	return ""
}

func (m *Account) GetExchange() string {
	if m != nil {
		return m.Exchange
	}
	return ""
}

func (m *Account) GetKeyPublic() string {
	if m != nil {
		return m.KeyPublic
	}
	return ""
}

func (m *Account) GetKeySecret() string {
	if m != nil {
		return m.KeySecret
	}
	return ""
}

func (m *Account) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Account) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Account) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *Account) GetCreatedOn() string {
	if m != nil {
		return m.CreatedOn
	}
	return ""
}

func (m *Account) GetUpdatedOn() string {
	if m != nil {
		return m.UpdatedOn
	}
	return ""
}

func (m *Account) GetBalances() []*balance.Balance {
	if m != nil {
		return m.Balances
	}
	return nil
}

type UserAccount struct {
	Account *Account `protobuf:"bytes,1,opt,name=account" json:"account,omitempty"`
}

func (m *UserAccount) Reset()                    { *m = UserAccount{} }
func (m *UserAccount) String() string            { return proto.CompactTextString(m) }
func (*UserAccount) ProtoMessage()               {}
func (*UserAccount) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *UserAccount) GetAccount() *Account {
	if m != nil {
		return m.Account
	}
	return nil
}

type AccountResponse struct {
	Status  string       `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
	Message string       `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
	Data    *UserAccount `protobuf:"bytes,3,opt,name=data" json:"data,omitempty"`
}

func (m *AccountResponse) Reset()                    { *m = AccountResponse{} }
func (m *AccountResponse) String() string            { return proto.CompactTextString(m) }
func (*AccountResponse) ProtoMessage()               {}
func (*AccountResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *AccountResponse) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *AccountResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *AccountResponse) GetData() *UserAccount {
	if m != nil {
		return m.Data
	}
	return nil
}

type UserAccounts struct {
	Accounts []*Account `protobuf:"bytes,1,rep,name=accounts" json:"accounts,omitempty"`
}

func (m *UserAccounts) Reset()                    { *m = UserAccounts{} }
func (m *UserAccounts) String() string            { return proto.CompactTextString(m) }
func (*UserAccounts) ProtoMessage()               {}
func (*UserAccounts) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *UserAccounts) GetAccounts() []*Account {
	if m != nil {
		return m.Accounts
	}
	return nil
}

type AccountsResponse struct {
	Status  string        `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
	Message string        `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
	Data    *UserAccounts `protobuf:"bytes,3,opt,name=data" json:"data,omitempty"`
}

func (m *AccountsResponse) Reset()                    { *m = AccountsResponse{} }
func (m *AccountsResponse) String() string            { return proto.CompactTextString(m) }
func (*AccountsResponse) ProtoMessage()               {}
func (*AccountsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *AccountsResponse) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *AccountsResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *AccountsResponse) GetData() *UserAccounts {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterType((*NewAccountRequest)(nil), "account.NewAccountRequest")
	proto.RegisterType((*UpdateAccountRequest)(nil), "account.UpdateAccountRequest")
	proto.RegisterType((*AccountRequest)(nil), "account.AccountRequest")
	proto.RegisterType((*AccountsRequest)(nil), "account.AccountsRequest")
	proto.RegisterType((*Account)(nil), "account.Account")
	proto.RegisterType((*UserAccount)(nil), "account.UserAccount")
	proto.RegisterType((*AccountResponse)(nil), "account.AccountResponse")
	proto.RegisterType((*UserAccounts)(nil), "account.UserAccounts")
	proto.RegisterType((*AccountsResponse)(nil), "account.AccountsResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for AccountService service

type AccountServiceClient interface {
	AddAccount(ctx context.Context, in *NewAccountRequest, opts ...client.CallOption) (*AccountResponse, error)
	AddAccountBalance(ctx context.Context, in *balance.NewBalanceRequest, opts ...client.CallOption) (*balance.BalanceResponse, error)
	DeleteAccount(ctx context.Context, in *AccountRequest, opts ...client.CallOption) (*AccountResponse, error)
	GetAccounts(ctx context.Context, in *AccountsRequest, opts ...client.CallOption) (*AccountsResponse, error)
	GetAccount(ctx context.Context, in *AccountRequest, opts ...client.CallOption) (*AccountResponse, error)
	GetAccountBalance(ctx context.Context, in *balance.BalanceRequest, opts ...client.CallOption) (*balance.BalanceResponse, error)
	UpdateAccount(ctx context.Context, in *UpdateAccountRequest, opts ...client.CallOption) (*AccountResponse, error)
	UpdateAccountBalance(ctx context.Context, in *balance.UpdateBalanceRequest, opts ...client.CallOption) (*balance.BalanceResponse, error)
	ValidateAccountBalance(ctx context.Context, in *balance.ValidateBalanceRequest, opts ...client.CallOption) (*balance.ValidateBalanceResponse, error)
}

type accountServiceClient struct {
	c           client.Client
	serviceName string
}

func NewAccountServiceClient(serviceName string, c client.Client) AccountServiceClient {
	if c == nil {
		c = client.NewClient()
	}
	if len(serviceName) == 0 {
		serviceName = "account"
	}
	return &accountServiceClient{
		c:           c,
		serviceName: serviceName,
	}
}

func (c *accountServiceClient) AddAccount(ctx context.Context, in *NewAccountRequest, opts ...client.CallOption) (*AccountResponse, error) {
	req := c.c.NewRequest(c.serviceName, "AccountService.AddAccount", in)
	out := new(AccountResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) AddAccountBalance(ctx context.Context, in *balance.NewBalanceRequest, opts ...client.CallOption) (*balance.BalanceResponse, error) {
	req := c.c.NewRequest(c.serviceName, "AccountService.AddAccountBalance", in)
	out := new(balance.BalanceResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) DeleteAccount(ctx context.Context, in *AccountRequest, opts ...client.CallOption) (*AccountResponse, error) {
	req := c.c.NewRequest(c.serviceName, "AccountService.DeleteAccount", in)
	out := new(AccountResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) GetAccounts(ctx context.Context, in *AccountsRequest, opts ...client.CallOption) (*AccountsResponse, error) {
	req := c.c.NewRequest(c.serviceName, "AccountService.GetAccounts", in)
	out := new(AccountsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) GetAccount(ctx context.Context, in *AccountRequest, opts ...client.CallOption) (*AccountResponse, error) {
	req := c.c.NewRequest(c.serviceName, "AccountService.GetAccount", in)
	out := new(AccountResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) GetAccountBalance(ctx context.Context, in *balance.BalanceRequest, opts ...client.CallOption) (*balance.BalanceResponse, error) {
	req := c.c.NewRequest(c.serviceName, "AccountService.GetAccountBalance", in)
	out := new(balance.BalanceResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) UpdateAccount(ctx context.Context, in *UpdateAccountRequest, opts ...client.CallOption) (*AccountResponse, error) {
	req := c.c.NewRequest(c.serviceName, "AccountService.UpdateAccount", in)
	out := new(AccountResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) UpdateAccountBalance(ctx context.Context, in *balance.UpdateBalanceRequest, opts ...client.CallOption) (*balance.BalanceResponse, error) {
	req := c.c.NewRequest(c.serviceName, "AccountService.UpdateAccountBalance", in)
	out := new(balance.BalanceResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) ValidateAccountBalance(ctx context.Context, in *balance.ValidateBalanceRequest, opts ...client.CallOption) (*balance.ValidateBalanceResponse, error) {
	req := c.c.NewRequest(c.serviceName, "AccountService.ValidateAccountBalance", in)
	out := new(balance.ValidateBalanceResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for AccountService service

type AccountServiceHandler interface {
	AddAccount(context.Context, *NewAccountRequest, *AccountResponse) error
	AddAccountBalance(context.Context, *balance.NewBalanceRequest, *balance.BalanceResponse) error
	DeleteAccount(context.Context, *AccountRequest, *AccountResponse) error
	GetAccounts(context.Context, *AccountsRequest, *AccountsResponse) error
	GetAccount(context.Context, *AccountRequest, *AccountResponse) error
	GetAccountBalance(context.Context, *balance.BalanceRequest, *balance.BalanceResponse) error
	UpdateAccount(context.Context, *UpdateAccountRequest, *AccountResponse) error
	UpdateAccountBalance(context.Context, *balance.UpdateBalanceRequest, *balance.BalanceResponse) error
	ValidateAccountBalance(context.Context, *balance.ValidateBalanceRequest, *balance.ValidateBalanceResponse) error
}

func RegisterAccountServiceHandler(s server.Server, hdlr AccountServiceHandler, opts ...server.HandlerOption) {
	s.Handle(s.NewHandler(&AccountService{hdlr}, opts...))
}

type AccountService struct {
	AccountServiceHandler
}

func (h *AccountService) AddAccount(ctx context.Context, in *NewAccountRequest, out *AccountResponse) error {
	return h.AccountServiceHandler.AddAccount(ctx, in, out)
}

func (h *AccountService) AddAccountBalance(ctx context.Context, in *balance.NewBalanceRequest, out *balance.BalanceResponse) error {
	return h.AccountServiceHandler.AddAccountBalance(ctx, in, out)
}

func (h *AccountService) DeleteAccount(ctx context.Context, in *AccountRequest, out *AccountResponse) error {
	return h.AccountServiceHandler.DeleteAccount(ctx, in, out)
}

func (h *AccountService) GetAccounts(ctx context.Context, in *AccountsRequest, out *AccountsResponse) error {
	return h.AccountServiceHandler.GetAccounts(ctx, in, out)
}

func (h *AccountService) GetAccount(ctx context.Context, in *AccountRequest, out *AccountResponse) error {
	return h.AccountServiceHandler.GetAccount(ctx, in, out)
}

func (h *AccountService) GetAccountBalance(ctx context.Context, in *balance.BalanceRequest, out *balance.BalanceResponse) error {
	return h.AccountServiceHandler.GetAccountBalance(ctx, in, out)
}

func (h *AccountService) UpdateAccount(ctx context.Context, in *UpdateAccountRequest, out *AccountResponse) error {
	return h.AccountServiceHandler.UpdateAccount(ctx, in, out)
}

func (h *AccountService) UpdateAccountBalance(ctx context.Context, in *balance.UpdateBalanceRequest, out *balance.BalanceResponse) error {
	return h.AccountServiceHandler.UpdateAccountBalance(ctx, in, out)
}

func (h *AccountService) ValidateAccountBalance(ctx context.Context, in *balance.ValidateBalanceRequest, out *balance.ValidateBalanceResponse) error {
	return h.AccountServiceHandler.ValidateAccountBalance(ctx, in, out)
}

func init() {
	proto.RegisterFile("github.com/asciiu/gomo/account-service/proto/account/account.proto", fileDescriptor0)
}

var fileDescriptor0 = []byte{
	// 617 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x55, 0xcd, 0x6e, 0xd3, 0x40,
	0x10, 0x26, 0x4d, 0xf3, 0x37, 0xa6, 0xd0, 0xac, 0x42, 0xba, 0x58, 0xad, 0x88, 0x7c, 0x4a, 0x11,
	0x24, 0x52, 0x90, 0x90, 0x90, 0xb8, 0xa4, 0x8a, 0xc4, 0x9f, 0x54, 0x20, 0x55, 0xb9, 0x71, 0xd8,
	0xd8, 0xa3, 0xd4, 0x22, 0xb1, 0x83, 0x77, 0x4d, 0xe1, 0xd5, 0x78, 0x0b, 0x1e, 0x80, 0x0b, 0x4f,
	0x82, 0xec, 0xfd, 0xb1, 0x13, 0x87, 0x44, 0xc9, 0x89, 0x93, 0xb3, 0x33, 0xb3, 0x33, 0xdf, 0x7c,
	0xdf, 0xce, 0x04, 0x2e, 0xa6, 0xbe, 0xb8, 0x89, 0x27, 0x3d, 0x37, 0x9c, 0xf7, 0x19, 0x77, 0x7d,
	0x3f, 0xee, 0x4f, 0xc3, 0x79, 0xd8, 0x67, 0xae, 0x1b, 0xc6, 0x81, 0x78, 0xca, 0x31, 0xfa, 0xe6,
	0xbb, 0xd8, 0x5f, 0x44, 0xa1, 0x30, 0x56, 0xfd, 0xed, 0xa5, 0x56, 0x52, 0x53, 0x47, 0x7b, 0xb7,
	0x64, 0x13, 0x36, 0x63, 0x81, 0x8b, 0xfa, 0x2b, 0x93, 0x39, 0xbf, 0x4b, 0xd0, 0xbc, 0xc4, 0xdb,
	0xa1, 0xbc, 0x32, 0xc6, 0xaf, 0x31, 0x72, 0x41, 0xda, 0x50, 0x8d, 0x39, 0x46, 0x6f, 0x46, 0xb4,
	0xd4, 0x29, 0x75, 0x1b, 0x63, 0x75, 0x22, 0x36, 0xd4, 0xf1, 0xbb, 0x7b, 0xc3, 0x82, 0x29, 0xd2,
	0x83, 0xd4, 0x63, 0xce, 0xe4, 0x14, 0x1a, 0x5f, 0xf0, 0xc7, 0x87, 0x78, 0x32, 0xf3, 0x5d, 0x5a,
	0x4e, 0x9d, 0x99, 0x41, 0x79, 0xaf, 0xd0, 0x8d, 0x50, 0xd0, 0x43, 0xe3, 0x95, 0x06, 0xd2, 0x01,
	0xcb, 0x43, 0xee, 0x46, 0xfe, 0x42, 0xf8, 0x61, 0x40, 0x2b, 0xa9, 0x3f, 0x6f, 0x22, 0xcf, 0xa1,
	0xae, 0x80, 0x73, 0x5a, 0xed, 0x94, 0xbb, 0xd6, 0xc0, 0xee, 0xe9, 0x4e, 0x2e, 0xf1, 0xf6, 0x42,
	0xfe, 0x54, 0xf8, 0xc7, 0x26, 0xd6, 0xf9, 0x53, 0x82, 0xd6, 0xf5, 0xc2, 0x63, 0x02, 0x57, 0x5a,
	0x3c, 0x85, 0x86, 0xe2, 0xc9, 0x74, 0x99, 0x19, 0x72, 0x04, 0x1c, 0x2c, 0x11, 0xf0, 0x7f, 0x36,
	0xd9, 0x83, 0x7b, 0xbb, 0x74, 0xe7, 0x9c, 0xc3, 0x7d, 0x15, 0xcf, 0xb7, 0x28, 0xee, 0xfc, 0x3a,
	0x80, 0x9a, 0x8a, 0xdd, 0x93, 0xb2, 0xfc, 0x9b, 0x29, 0x6f, 0x7a, 0x33, 0x87, 0x1b, 0xe9, 0xac,
	0xac, 0xd2, 0xd9, 0x82, 0x8a, 0xf0, 0xc5, 0x0c, 0x69, 0x35, 0xf5, 0xc8, 0xc3, 0x2a, 0xc9, 0xb5,
	0x22, 0xc9, 0x6d, 0xa8, 0x72, 0xc1, 0x44, 0xcc, 0x69, 0x5d, 0xe2, 0x94, 0xa7, 0xa4, 0x9a, 0x1b,
	0x21, 0x13, 0xe8, 0xbd, 0x0f, 0x68, 0x43, 0x56, 0x33, 0x86, 0xc4, 0x1b, 0xa7, 0xcf, 0x28, 0xf1,
	0x82, 0xf4, 0x1a, 0x03, 0x79, 0x92, 0x13, 0xce, 0x4a, 0x85, 0x3b, 0x36, 0xc2, 0x69, 0xd5, 0x32,
	0xb9, 0x5e, 0x80, 0x75, 0xcd, 0x31, 0xd2, 0xb4, 0x3e, 0x06, 0x3d, 0xd1, 0x29, 0xa9, 0xc9, 0x5d,
	0x3d, 0xf0, 0x5a, 0x55, 0x1d, 0xe0, 0xcc, 0x8d, 0x72, 0x63, 0xe4, 0x8b, 0x30, 0xe0, 0x98, 0xeb,
	0xa7, 0xb4, 0xd4, 0x0f, 0x85, 0xda, 0x1c, 0x39, 0x67, 0x66, 0x54, 0xf5, 0x91, 0x74, 0xe1, 0xd0,
	0x63, 0x82, 0xa5, 0x6a, 0x58, 0x83, 0x96, 0xa9, 0x96, 0x03, 0x35, 0x4e, 0x23, 0x9c, 0x97, 0x70,
	0x37, 0x67, 0xe4, 0x49, 0x9f, 0x2a, 0x38, 0xa9, 0x56, 0x5e, 0x8b, 0xd5, 0x44, 0x38, 0x21, 0x1c,
	0x67, 0xcf, 0x6c, 0x6f, 0xb4, 0xe7, 0x4b, 0x68, 0x1f, 0xac, 0x43, 0xcb, 0x25, 0xdc, 0xc1, 0xcf,
	0x8a, 0x19, 0x84, 0x2b, 0xb9, 0xfb, 0xc8, 0x08, 0x60, 0xe8, 0x79, 0x9a, 0x6a, 0xdb, 0xdc, 0x2e,
	0xec, 0x3c, 0x9b, 0x16, 0x3a, 0x51, 0x98, 0x9d, 0x3b, 0xe4, 0x1d, 0x34, 0xb3, 0x2c, 0x4a, 0x50,
	0xb2, 0x61, 0x36, 0x6d, 0x5a, 0x90, 0x3f, 0x4b, 0x36, 0x82, 0xa3, 0x11, 0xce, 0xd0, 0x6c, 0x24,
	0x72, 0x52, 0xac, 0xbc, 0x1d, 0xd2, 0x08, 0xac, 0x57, 0x28, 0x8c, 0x32, 0x85, 0x50, 0x3d, 0xd9,
	0xf6, 0xc3, 0x35, 0x1e, 0x93, 0x65, 0x08, 0x90, 0x65, 0xd9, 0x0f, 0xc8, 0x6b, 0x68, 0x66, 0x29,
	0x34, 0x37, 0x27, 0xc5, 0xfe, 0xb7, 0x13, 0xf3, 0x16, 0x8e, 0x96, 0x56, 0x35, 0x39, 0xcb, 0xc4,
	0x5e, 0xb3, 0xc2, 0x37, 0xa2, 0xfa, 0xb8, 0xb2, 0xf6, 0x35, 0xb0, 0x33, 0x53, 0x5f, 0xba, 0x77,
	0x80, 0xf7, 0x19, 0xda, 0x9f, 0xd8, 0xcc, 0x5f, 0x93, 0xf4, 0x91, 0xb9, 0xa5, 0x03, 0x56, 0xd2,
	0x76, 0xfe, 0x1d, 0xa0, 0xd3, 0x4f, 0xaa, 0xe9, 0x1f, 0xf2, 0xb3, 0xbf, 0x01, 0x00, 0x00, 0xff,
	0xff, 0xae, 0xf5, 0xef, 0xe2, 0x23, 0x08, 0x00, 0x00,
}
