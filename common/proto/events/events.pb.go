// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/events/events.proto

/*
Package common_events is a generated protocol buffer package.

It is generated from these files:
	proto/events/events.proto

It has these top-level messages:
	TradeEvent
	TradeEvents
	Auth
	OrderEvent
	ActiveOrderEvent
	TriggeredOrderEvent
	CompletedOrderEvent
	EngineStartEvent
*/
package common_events

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Events
type TradeEvent struct {
	Exchange   string  `protobuf:"bytes,1,opt,name=exchange" json:"exchange,omitempty"`
	Type       string  `protobuf:"bytes,2,opt,name=type" json:"type,omitempty"`
	EventTime  string  `protobuf:"bytes,3,opt,name=eventTime" json:"eventTime,omitempty"`
	MarketName string  `protobuf:"bytes,4,opt,name=marketName" json:"marketName,omitempty"`
	TradeID    string  `protobuf:"bytes,5,opt,name=tradeID" json:"tradeID,omitempty"`
	Price      float64 `protobuf:"fixed64,6,opt,name=price" json:"price,omitempty"`
	Quantity   float64 `protobuf:"fixed64,7,opt,name=quantity" json:"quantity,omitempty"`
	Total      float64 `protobuf:"fixed64,8,opt,name=total" json:"total,omitempty"`
}

func (m *TradeEvent) Reset()                    { *m = TradeEvent{} }
func (m *TradeEvent) String() string            { return proto.CompactTextString(m) }
func (*TradeEvent) ProtoMessage()               {}
func (*TradeEvent) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *TradeEvent) GetExchange() string {
	if m != nil {
		return m.Exchange
	}
	return ""
}

func (m *TradeEvent) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *TradeEvent) GetEventTime() string {
	if m != nil {
		return m.EventTime
	}
	return ""
}

func (m *TradeEvent) GetMarketName() string {
	if m != nil {
		return m.MarketName
	}
	return ""
}

func (m *TradeEvent) GetTradeID() string {
	if m != nil {
		return m.TradeID
	}
	return ""
}

func (m *TradeEvent) GetPrice() float64 {
	if m != nil {
		return m.Price
	}
	return 0
}

func (m *TradeEvent) GetQuantity() float64 {
	if m != nil {
		return m.Quantity
	}
	return 0
}

func (m *TradeEvent) GetTotal() float64 {
	if m != nil {
		return m.Total
	}
	return 0
}

type TradeEvents struct {
	Events []*TradeEvent `protobuf:"bytes,1,rep,name=events" json:"events,omitempty"`
}

func (m *TradeEvents) Reset()                    { *m = TradeEvents{} }
func (m *TradeEvents) String() string            { return proto.CompactTextString(m) }
func (*TradeEvents) ProtoMessage()               {}
func (*TradeEvents) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *TradeEvents) GetEvents() []*TradeEvent {
	if m != nil {
		return m.Events
	}
	return nil
}

type Auth struct {
	Key    string `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	Secret string `protobuf:"bytes,2,opt,name=secret" json:"secret,omitempty"`
}

func (m *Auth) Reset()                    { *m = Auth{} }
func (m *Auth) String() string            { return proto.CompactTextString(m) }
func (*Auth) ProtoMessage()               {}
func (*Auth) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Auth) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *Auth) GetSecret() string {
	if m != nil {
		return m.Secret
	}
	return ""
}

type OrderEvent struct {
	Exchange           string  `protobuf:"bytes,1,opt,name=exchange" json:"exchange,omitempty"`
	OrderID            string  `protobuf:"bytes,2,opt,name=orderID" json:"orderID,omitempty"`
	UserID             string  `protobuf:"bytes,3,opt,name=userID" json:"userID,omitempty"`
	KeyID              string  `protobuf:"bytes,4,opt,name=keyID" json:"keyID,omitempty"`
	Key                string  `protobuf:"bytes,5,opt,name=key" json:"key,omitempty"`
	Secret             string  `protobuf:"bytes,6,opt,name=secret" json:"secret,omitempty"`
	MarketName         string  `protobuf:"bytes,7,opt,name=marketName" json:"marketName,omitempty"`
	Side               string  `protobuf:"bytes,8,opt,name=side" json:"side,omitempty"`
	OrderType          string  `protobuf:"bytes,9,opt,name=orderType" json:"orderType,omitempty"`
	Currency           string  `protobuf:"bytes,10,opt,name=currency" json:"currency,omitempty"`
	Quantity           float64 `protobuf:"fixed64,11,opt,name=quantity" json:"quantity,omitempty"`
	Price              float64 `protobuf:"fixed64,12,opt,name=price" json:"price,omitempty"`
	Condition          string  `protobuf:"bytes,13,opt,name=condition" json:"condition,omitempty"`
	Conditions         string  `protobuf:"bytes,14,opt,name=conditions" json:"conditions,omitempty"`
	ExchangeOrderID    string  `protobuf:"bytes,15,opt,name=exchangeOrderID" json:"exchangeOrderID,omitempty"`
	ExchangeMarketName string  `protobuf:"bytes,16,opt,name=exchangeMarketName" json:"exchangeMarketName,omitempty"`
	Status             string  `protobuf:"bytes,17,opt,name=status" json:"status,omitempty"`
}

func (m *OrderEvent) Reset()                    { *m = OrderEvent{} }
func (m *OrderEvent) String() string            { return proto.CompactTextString(m) }
func (*OrderEvent) ProtoMessage()               {}
func (*OrderEvent) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *OrderEvent) GetExchange() string {
	if m != nil {
		return m.Exchange
	}
	return ""
}

func (m *OrderEvent) GetOrderID() string {
	if m != nil {
		return m.OrderID
	}
	return ""
}

func (m *OrderEvent) GetUserID() string {
	if m != nil {
		return m.UserID
	}
	return ""
}

func (m *OrderEvent) GetKeyID() string {
	if m != nil {
		return m.KeyID
	}
	return ""
}

func (m *OrderEvent) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *OrderEvent) GetSecret() string {
	if m != nil {
		return m.Secret
	}
	return ""
}

func (m *OrderEvent) GetMarketName() string {
	if m != nil {
		return m.MarketName
	}
	return ""
}

func (m *OrderEvent) GetSide() string {
	if m != nil {
		return m.Side
	}
	return ""
}

func (m *OrderEvent) GetOrderType() string {
	if m != nil {
		return m.OrderType
	}
	return ""
}

func (m *OrderEvent) GetCurrency() string {
	if m != nil {
		return m.Currency
	}
	return ""
}

func (m *OrderEvent) GetQuantity() float64 {
	if m != nil {
		return m.Quantity
	}
	return 0
}

func (m *OrderEvent) GetPrice() float64 {
	if m != nil {
		return m.Price
	}
	return 0
}

func (m *OrderEvent) GetCondition() string {
	if m != nil {
		return m.Condition
	}
	return ""
}

func (m *OrderEvent) GetConditions() string {
	if m != nil {
		return m.Conditions
	}
	return ""
}

func (m *OrderEvent) GetExchangeOrderID() string {
	if m != nil {
		return m.ExchangeOrderID
	}
	return ""
}

func (m *OrderEvent) GetExchangeMarketName() string {
	if m != nil {
		return m.ExchangeMarketName
	}
	return ""
}

func (m *OrderEvent) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

type ActiveOrderEvent struct {
	Exchange        string  `protobuf:"bytes,1,opt,name=exchange" json:"exchange,omitempty"`
	OrderID         string  `protobuf:"bytes,2,opt,name=orderID" json:"orderID,omitempty"`
	PlanID          string  `protobuf:"bytes,3,opt,name=planID" json:"planID,omitempty"`
	UserID          string  `protobuf:"bytes,4,opt,name=userID" json:"userID,omitempty"`
	BaseBalance     float64 `protobuf:"fixed64,5,opt,name=baseBalance" json:"baseBalance,omitempty"`
	BasePercent     float64 `protobuf:"fixed64,6,opt,name=basePercent" json:"basePercent,omitempty"`
	CurrencyBalance float64 `protobuf:"fixed64,7,opt,name=currencyBalance" json:"currencyBalance,omitempty"`
	CurrencyPercent float64 `protobuf:"fixed64,8,opt,name=currencyPercent" json:"currencyPercent,omitempty"`
	KeyID           string  `protobuf:"bytes,9,opt,name=keyID" json:"keyID,omitempty"`
	Key             string  `protobuf:"bytes,10,opt,name=key" json:"key,omitempty"`
	Secret          string  `protobuf:"bytes,11,opt,name=secret" json:"secret,omitempty"`
	MarketName      string  `protobuf:"bytes,12,opt,name=marketName" json:"marketName,omitempty"`
	Side            string  `protobuf:"bytes,13,opt,name=side" json:"side,omitempty"`
	OrderType       string  `protobuf:"bytes,14,opt,name=orderType" json:"orderType,omitempty"`
	Price           float64 `protobuf:"fixed64,15,opt,name=price" json:"price,omitempty"`
	Conditions      string  `protobuf:"bytes,16,opt,name=conditions" json:"conditions,omitempty"`
	NextOrderID     string  `protobuf:"bytes,17,opt,name=nextOrderID" json:"nextOrderID,omitempty"`
}

func (m *ActiveOrderEvent) Reset()                    { *m = ActiveOrderEvent{} }
func (m *ActiveOrderEvent) String() string            { return proto.CompactTextString(m) }
func (*ActiveOrderEvent) ProtoMessage()               {}
func (*ActiveOrderEvent) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *ActiveOrderEvent) GetExchange() string {
	if m != nil {
		return m.Exchange
	}
	return ""
}

func (m *ActiveOrderEvent) GetOrderID() string {
	if m != nil {
		return m.OrderID
	}
	return ""
}

func (m *ActiveOrderEvent) GetPlanID() string {
	if m != nil {
		return m.PlanID
	}
	return ""
}

func (m *ActiveOrderEvent) GetUserID() string {
	if m != nil {
		return m.UserID
	}
	return ""
}

func (m *ActiveOrderEvent) GetBaseBalance() float64 {
	if m != nil {
		return m.BaseBalance
	}
	return 0
}

func (m *ActiveOrderEvent) GetBasePercent() float64 {
	if m != nil {
		return m.BasePercent
	}
	return 0
}

func (m *ActiveOrderEvent) GetCurrencyBalance() float64 {
	if m != nil {
		return m.CurrencyBalance
	}
	return 0
}

func (m *ActiveOrderEvent) GetCurrencyPercent() float64 {
	if m != nil {
		return m.CurrencyPercent
	}
	return 0
}

func (m *ActiveOrderEvent) GetKeyID() string {
	if m != nil {
		return m.KeyID
	}
	return ""
}

func (m *ActiveOrderEvent) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *ActiveOrderEvent) GetSecret() string {
	if m != nil {
		return m.Secret
	}
	return ""
}

func (m *ActiveOrderEvent) GetMarketName() string {
	if m != nil {
		return m.MarketName
	}
	return ""
}

func (m *ActiveOrderEvent) GetSide() string {
	if m != nil {
		return m.Side
	}
	return ""
}

func (m *ActiveOrderEvent) GetOrderType() string {
	if m != nil {
		return m.OrderType
	}
	return ""
}

func (m *ActiveOrderEvent) GetPrice() float64 {
	if m != nil {
		return m.Price
	}
	return 0
}

func (m *ActiveOrderEvent) GetConditions() string {
	if m != nil {
		return m.Conditions
	}
	return ""
}

func (m *ActiveOrderEvent) GetNextOrderID() string {
	if m != nil {
		return m.NextOrderID
	}
	return ""
}

type TriggeredOrderEvent struct {
	Exchange           string  `protobuf:"bytes,1,opt,name=exchange" json:"exchange,omitempty"`
	OrderID            string  `protobuf:"bytes,2,opt,name=orderID" json:"orderID,omitempty"`
	PlanID             string  `protobuf:"bytes,3,opt,name=planID" json:"planID,omitempty"`
	UserID             string  `protobuf:"bytes,4,opt,name=userID" json:"userID,omitempty"`
	BaseBalance        float64 `protobuf:"fixed64,5,opt,name=baseBalance" json:"baseBalance,omitempty"`
	BasePercent        float64 `protobuf:"fixed64,6,opt,name=basePercent" json:"basePercent,omitempty"`
	CurrencyBalance    float64 `protobuf:"fixed64,7,opt,name=currencyBalance" json:"currencyBalance,omitempty"`
	CurrencyPercent    float64 `protobuf:"fixed64,8,opt,name=currencyPercent" json:"currencyPercent,omitempty"`
	KeyID              string  `protobuf:"bytes,9,opt,name=keyID" json:"keyID,omitempty"`
	Key                string  `protobuf:"bytes,10,opt,name=key" json:"key,omitempty"`
	Secret             string  `protobuf:"bytes,11,opt,name=secret" json:"secret,omitempty"`
	MarketName         string  `protobuf:"bytes,12,opt,name=marketName" json:"marketName,omitempty"`
	Side               string  `protobuf:"bytes,13,opt,name=side" json:"side,omitempty"`
	OrderType          string  `protobuf:"bytes,14,opt,name=orderType" json:"orderType,omitempty"`
	Price              float64 `protobuf:"fixed64,15,opt,name=price" json:"price,omitempty"`
	TriggeredPrice     float64 `protobuf:"fixed64,16,opt,name=triggeredPrice" json:"triggeredPrice,omitempty"`
	TriggeredCondition string  `protobuf:"bytes,17,opt,name=triggeredCondition" json:"triggeredCondition,omitempty"`
	NextOrderID        string  `protobuf:"bytes,18,opt,name=nextOrderID" json:"nextOrderID,omitempty"`
}

func (m *TriggeredOrderEvent) Reset()                    { *m = TriggeredOrderEvent{} }
func (m *TriggeredOrderEvent) String() string            { return proto.CompactTextString(m) }
func (*TriggeredOrderEvent) ProtoMessage()               {}
func (*TriggeredOrderEvent) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *TriggeredOrderEvent) GetExchange() string {
	if m != nil {
		return m.Exchange
	}
	return ""
}

func (m *TriggeredOrderEvent) GetOrderID() string {
	if m != nil {
		return m.OrderID
	}
	return ""
}

func (m *TriggeredOrderEvent) GetPlanID() string {
	if m != nil {
		return m.PlanID
	}
	return ""
}

func (m *TriggeredOrderEvent) GetUserID() string {
	if m != nil {
		return m.UserID
	}
	return ""
}

func (m *TriggeredOrderEvent) GetBaseBalance() float64 {
	if m != nil {
		return m.BaseBalance
	}
	return 0
}

func (m *TriggeredOrderEvent) GetBasePercent() float64 {
	if m != nil {
		return m.BasePercent
	}
	return 0
}

func (m *TriggeredOrderEvent) GetCurrencyBalance() float64 {
	if m != nil {
		return m.CurrencyBalance
	}
	return 0
}

func (m *TriggeredOrderEvent) GetCurrencyPercent() float64 {
	if m != nil {
		return m.CurrencyPercent
	}
	return 0
}

func (m *TriggeredOrderEvent) GetKeyID() string {
	if m != nil {
		return m.KeyID
	}
	return ""
}

func (m *TriggeredOrderEvent) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *TriggeredOrderEvent) GetSecret() string {
	if m != nil {
		return m.Secret
	}
	return ""
}

func (m *TriggeredOrderEvent) GetMarketName() string {
	if m != nil {
		return m.MarketName
	}
	return ""
}

func (m *TriggeredOrderEvent) GetSide() string {
	if m != nil {
		return m.Side
	}
	return ""
}

func (m *TriggeredOrderEvent) GetOrderType() string {
	if m != nil {
		return m.OrderType
	}
	return ""
}

func (m *TriggeredOrderEvent) GetPrice() float64 {
	if m != nil {
		return m.Price
	}
	return 0
}

func (m *TriggeredOrderEvent) GetTriggeredPrice() float64 {
	if m != nil {
		return m.TriggeredPrice
	}
	return 0
}

func (m *TriggeredOrderEvent) GetTriggeredCondition() string {
	if m != nil {
		return m.TriggeredCondition
	}
	return ""
}

func (m *TriggeredOrderEvent) GetNextOrderID() string {
	if m != nil {
		return m.NextOrderID
	}
	return ""
}

type CompletedOrderEvent struct {
	UserID             string  `protobuf:"bytes,1,opt,name=userID" json:"userID,omitempty"`
	PlanID             string  `protobuf:"bytes,2,opt,name=planID" json:"planID,omitempty"`
	OrderID            string  `protobuf:"bytes,3,opt,name=orderID" json:"orderID,omitempty"`
	Currency           string  `protobuf:"bytes,4,opt,name=currency" json:"currency,omitempty"`
	Side               string  `protobuf:"bytes,5,opt,name=side" json:"side,omitempty"`
	Quantity           float64 `protobuf:"fixed64,6,opt,name=quantity" json:"quantity,omitempty"`
	TriggeredPrice     float64 `protobuf:"fixed64,7,opt,name=triggeredPrice" json:"triggeredPrice,omitempty"`
	TriggeredCondition string  `protobuf:"bytes,8,opt,name=triggeredCondition" json:"triggeredCondition,omitempty"`
	ExchangeOrderID    string  `protobuf:"bytes,9,opt,name=exchangeOrderID" json:"exchangeOrderID,omitempty"`
	ExchangeMarketName string  `protobuf:"bytes,10,opt,name=exchangeMarketName" json:"exchangeMarketName,omitempty"`
	Status             string  `protobuf:"bytes,11,opt,name=status" json:"status,omitempty"`
	NextOrderID        string  `protobuf:"bytes,12,opt,name=nextOrderID" json:"nextOrderID,omitempty"`
}

func (m *CompletedOrderEvent) Reset()                    { *m = CompletedOrderEvent{} }
func (m *CompletedOrderEvent) String() string            { return proto.CompactTextString(m) }
func (*CompletedOrderEvent) ProtoMessage()               {}
func (*CompletedOrderEvent) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *CompletedOrderEvent) GetUserID() string {
	if m != nil {
		return m.UserID
	}
	return ""
}

func (m *CompletedOrderEvent) GetPlanID() string {
	if m != nil {
		return m.PlanID
	}
	return ""
}

func (m *CompletedOrderEvent) GetOrderID() string {
	if m != nil {
		return m.OrderID
	}
	return ""
}

func (m *CompletedOrderEvent) GetCurrency() string {
	if m != nil {
		return m.Currency
	}
	return ""
}

func (m *CompletedOrderEvent) GetSide() string {
	if m != nil {
		return m.Side
	}
	return ""
}

func (m *CompletedOrderEvent) GetQuantity() float64 {
	if m != nil {
		return m.Quantity
	}
	return 0
}

func (m *CompletedOrderEvent) GetTriggeredPrice() float64 {
	if m != nil {
		return m.TriggeredPrice
	}
	return 0
}

func (m *CompletedOrderEvent) GetTriggeredCondition() string {
	if m != nil {
		return m.TriggeredCondition
	}
	return ""
}

func (m *CompletedOrderEvent) GetExchangeOrderID() string {
	if m != nil {
		return m.ExchangeOrderID
	}
	return ""
}

func (m *CompletedOrderEvent) GetExchangeMarketName() string {
	if m != nil {
		return m.ExchangeMarketName
	}
	return ""
}

func (m *CompletedOrderEvent) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *CompletedOrderEvent) GetNextOrderID() string {
	if m != nil {
		return m.NextOrderID
	}
	return ""
}

type EngineStartEvent struct {
	EngineID string `protobuf:"bytes,1,opt,name=engineID" json:"engineID,omitempty"`
}

func (m *EngineStartEvent) Reset()                    { *m = EngineStartEvent{} }
func (m *EngineStartEvent) String() string            { return proto.CompactTextString(m) }
func (*EngineStartEvent) ProtoMessage()               {}
func (*EngineStartEvent) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *EngineStartEvent) GetEngineID() string {
	if m != nil {
		return m.EngineID
	}
	return ""
}

func init() {
	proto.RegisterType((*TradeEvent)(nil), "common.events.TradeEvent")
	proto.RegisterType((*TradeEvents)(nil), "common.events.TradeEvents")
	proto.RegisterType((*Auth)(nil), "common.events.Auth")
	proto.RegisterType((*OrderEvent)(nil), "common.events.OrderEvent")
	proto.RegisterType((*ActiveOrderEvent)(nil), "common.events.ActiveOrderEvent")
	proto.RegisterType((*TriggeredOrderEvent)(nil), "common.events.TriggeredOrderEvent")
	proto.RegisterType((*CompletedOrderEvent)(nil), "common.events.CompletedOrderEvent")
	proto.RegisterType((*EngineStartEvent)(nil), "common.events.EngineStartEvent")
}

func init() { proto.RegisterFile("proto/events/events.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 680 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x56, 0x4d, 0x6e, 0xdb, 0x3c,
	0x10, 0x85, 0x22, 0xf9, 0x47, 0xa3, 0xfc, 0xf8, 0x63, 0x3e, 0x14, 0x4c, 0x11, 0x14, 0x86, 0x17,
	0x85, 0x57, 0xee, 0xdf, 0x05, 0x9a, 0x26, 0x59, 0x64, 0xd1, 0x26, 0x70, 0x7d, 0x01, 0x46, 0x1e,
	0x38, 0x42, 0x6c, 0xca, 0xa5, 0xe8, 0x20, 0x3e, 0x49, 0x4f, 0xd2, 0xdb, 0xf4, 0x04, 0x3d, 0x42,
	0x57, 0x05, 0x49, 0x51, 0xa2, 0x7e, 0xd2, 0x36, 0x40, 0x37, 0x05, 0xba, 0x8a, 0xde, 0x9b, 0x31,
	0x35, 0x7c, 0xef, 0x69, 0x10, 0x38, 0x5a, 0x8b, 0x54, 0xa6, 0x2f, 0xf0, 0x0e, 0xb9, 0xcc, 0xf2,
	0x3f, 0x13, 0xcd, 0x91, 0xbd, 0x38, 0x5d, 0xad, 0x52, 0x3e, 0x31, 0xe4, 0xe8, 0xab, 0x07, 0x30,
	0x13, 0x6c, 0x8e, 0xe7, 0x0a, 0x93, 0xa7, 0xd0, 0xc7, 0xfb, 0xf8, 0x86, 0xf1, 0x05, 0x52, 0x6f,
	0xe8, 0x8d, 0xc3, 0x69, 0x81, 0x09, 0x81, 0x40, 0x6e, 0xd7, 0x48, 0x77, 0x34, 0xaf, 0x9f, 0xc9,
	0x31, 0x84, 0xfa, 0xa0, 0x59, 0xb2, 0x42, 0xea, 0xeb, 0x42, 0x49, 0x90, 0x67, 0x00, 0x2b, 0x26,
	0x6e, 0x51, 0x7e, 0x60, 0x2b, 0xa4, 0x81, 0x2e, 0x3b, 0x0c, 0xa1, 0xd0, 0x93, 0xea, 0xdd, 0x17,
	0x67, 0xb4, 0xa3, 0x8b, 0x16, 0x92, 0xff, 0xa1, 0xb3, 0x16, 0x49, 0x8c, 0xb4, 0x3b, 0xf4, 0xc6,
	0xde, 0xd4, 0x00, 0x35, 0xdd, 0xa7, 0x0d, 0xe3, 0x32, 0x91, 0x5b, 0xda, 0xd3, 0x85, 0x02, 0xab,
	0x5f, 0xc8, 0x54, 0xb2, 0x25, 0xed, 0x9b, 0x5f, 0x68, 0x30, 0x7a, 0x0b, 0x51, 0x79, 0xbb, 0x8c,
	0xbc, 0x82, 0xae, 0xb9, 0x37, 0xf5, 0x86, 0xfe, 0x38, 0x7a, 0x7d, 0x34, 0xa9, 0xa8, 0x31, 0x29,
	0x7b, 0xa7, 0x79, 0xe3, 0xe8, 0x25, 0x04, 0x27, 0x1b, 0x79, 0x43, 0x06, 0xe0, 0xdf, 0xe2, 0x36,
	0x17, 0x45, 0x3d, 0x92, 0x27, 0xd0, 0xcd, 0x30, 0x16, 0x28, 0x73, 0x45, 0x72, 0x34, 0xfa, 0xe6,
	0x03, 0x5c, 0x8a, 0x39, 0x8a, 0x5f, 0x4b, 0x4a, 0xa1, 0x97, 0xaa, 0xce, 0x8b, 0xb3, 0xfc, 0x0c,
	0x0b, 0xd5, 0xe1, 0x9b, 0x4c, 0x17, 0x8c, 0xaa, 0x39, 0x52, 0xd7, 0xbc, 0xc5, 0xed, 0xc5, 0x59,
	0xae, 0xa6, 0x01, 0x76, 0xb8, 0x4e, 0xdb, 0x70, 0x5d, 0x77, 0xb8, 0x9a, 0x25, 0xbd, 0x86, 0x25,
	0x04, 0x82, 0x2c, 0x99, 0xa3, 0x56, 0x31, 0x9c, 0xea, 0x67, 0x65, 0xb2, 0x1e, 0x6b, 0xa6, 0xdc,
	0x0f, 0x8d, 0xc9, 0x05, 0xa1, 0xee, 0x17, 0x6f, 0x84, 0x40, 0x1e, 0x6f, 0x29, 0x98, 0xfb, 0x59,
	0x5c, 0x31, 0x2c, 0x6a, 0x1a, 0x66, 0x2c, 0xde, 0x75, 0x2d, 0x3e, 0x86, 0x30, 0x4e, 0xf9, 0x3c,
	0x91, 0x49, 0xca, 0xe9, 0x9e, 0x79, 0x57, 0x41, 0xa8, 0xe9, 0x0b, 0x90, 0xd1, 0x7d, 0x33, 0x7d,
	0xc9, 0x90, 0x31, 0x1c, 0x58, 0x6d, 0x2f, 0x73, 0x5d, 0x0f, 0x74, 0x53, 0x9d, 0x26, 0x13, 0x20,
	0x96, 0x7a, 0x5f, 0xea, 0x31, 0xd0, 0xcd, 0x2d, 0x15, 0xad, 0xa7, 0x64, 0x72, 0x93, 0xd1, 0xff,
	0x72, 0x3d, 0x35, 0x1a, 0x7d, 0xf7, 0x61, 0x70, 0x12, 0xcb, 0xe4, 0x0e, 0xff, 0x84, 0xe5, 0xeb,
	0x25, 0xe3, 0xa5, 0xe5, 0x06, 0x39, 0x51, 0x08, 0x2a, 0x51, 0x18, 0x42, 0x74, 0xcd, 0x32, 0x7c,
	0xc7, 0x96, 0x8c, 0xc7, 0xa8, 0xcd, 0xf7, 0xa6, 0x2e, 0x65, 0x3b, 0xae, 0x50, 0xc4, 0xc8, 0x65,
	0xfe, 0x2d, 0xb9, 0x94, 0x12, 0xcc, 0x9a, 0x65, 0xcf, 0x31, 0x1f, 0x56, 0x9d, 0x76, 0x3b, 0xed,
	0x79, 0xfd, 0x6a, 0xa7, 0x3d, 0xb3, 0x88, 0x68, 0xd8, 0x12, 0x51, 0x68, 0x8b, 0x68, 0xf4, 0x93,
	0x88, 0xee, 0x3e, 0x18, 0xd1, 0xbd, 0x87, 0x22, 0xba, 0x5f, 0x8f, 0x68, 0x11, 0xb5, 0x03, 0x37,
	0x6a, 0xd5, 0x30, 0x0d, 0x1a, 0x61, 0x1a, 0x42, 0xc4, 0xf1, 0x5e, 0xda, 0x20, 0x19, 0xdf, 0x5d,
	0x6a, 0xf4, 0x25, 0x80, 0xc3, 0x99, 0x48, 0x16, 0x0b, 0x14, 0x38, 0xff, 0xe7, 0xff, 0x5f, 0xe6,
	0xff, 0x73, 0xd8, 0x97, 0xd6, 0xbc, 0x2b, 0x5d, 0x1e, 0xe8, 0x72, 0x8d, 0x55, 0xab, 0xa2, 0x60,
	0x4e, 0x8b, 0xdd, 0x64, 0xe2, 0xd0, 0x52, 0xa9, 0xe7, 0x86, 0x34, 0x73, 0xf3, 0xd9, 0x87, 0xc3,
	0xd3, 0x74, 0xb5, 0x5e, 0xa2, 0xac, 0xe4, 0xa6, 0x74, 0xda, 0xab, 0x38, 0x5d, 0x26, 0x63, 0xa7,
	0x92, 0x0c, 0x27, 0x4b, 0x7e, 0x35, 0x4b, 0xee, 0x52, 0x0e, 0x6a, 0x4b, 0xd9, 0xea, 0xd7, 0x71,
	0xf4, 0x73, 0x17, 0x75, 0xb7, 0xb6, 0xa8, 0x9b, 0x3a, 0xf5, 0x1e, 0xa1, 0x53, 0xff, 0x41, 0x9d,
	0x5a, 0x96, 0x75, 0xf8, 0x98, 0x65, 0x0d, 0xbf, 0xb1, 0xac, 0x23, 0x77, 0x59, 0xd7, 0x9d, 0xd9,
	0x6d, 0x3a, 0x33, 0x81, 0xc1, 0x39, 0x5f, 0x24, 0x1c, 0x3f, 0x4a, 0x26, 0x64, 0xf9, 0x35, 0x6b,
	0xae, 0xf0, 0xa5, 0xc0, 0xd7, 0x5d, 0xfd, 0x4f, 0xd5, 0x9b, 0x1f, 0x01, 0x00, 0x00, 0xff, 0xff,
	0x1a, 0x29, 0x3b, 0xe6, 0x71, 0x09, 0x00, 0x00,
}
