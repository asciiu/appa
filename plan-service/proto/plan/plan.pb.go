// Code generated by protoc-gen-go. DO NOT EDIT.
// source: github.com/asciiu/gomo/plan-service/proto/plan/plan.proto

/*
Package plan is a generated protocol buffer package.

It is generated from these files:
	github.com/asciiu/gomo/plan-service/proto/plan/plan.proto

It has these top-level messages:
	NewPlanRequest
	UpdatePlanRequest
	GetUserPlanRequest
	GetUserPlansRequest
	DeletePlanRequest
	Plan
	PlanWithPagedOrders
	PlanData
	PlanResponse
	PlanWithPagedOrdersResponse
	PlansPageResponse
	PlansPage
*/
package plan

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import order "github.com/asciiu/gomo/plan-service/proto/order"

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "golang.org/x/net/context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Requests
type NewPlanRequest struct {
	UserID          string                   `protobuf:"bytes,1,opt,name=userID" json:"userID"`
	PlanTemplateID  string                   `protobuf:"bytes,2,opt,name=planTemplateID" json:"planTemplateID"`
	Status          string                   `protobuf:"bytes,3,opt,name=status" json:"status"`
	CloseOnComplete bool                     `protobuf:"varint,4,opt,name=closeOnComplete" json:"closeOnComplete"`
	Orders          []*order.NewOrderRequest `protobuf:"bytes,5,rep,name=orders" json:"orders"`
}

func (m *NewPlanRequest) Reset()                    { *m = NewPlanRequest{} }
func (m *NewPlanRequest) String() string            { return proto.CompactTextString(m) }
func (*NewPlanRequest) ProtoMessage()               {}
func (*NewPlanRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *NewPlanRequest) GetUserID() string {
	if m != nil {
		return m.UserID
	}
	return ""
}

func (m *NewPlanRequest) GetPlanTemplateID() string {
	if m != nil {
		return m.PlanTemplateID
	}
	return ""
}

func (m *NewPlanRequest) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *NewPlanRequest) GetCloseOnComplete() bool {
	if m != nil {
		return m.CloseOnComplete
	}
	return false
}

func (m *NewPlanRequest) GetOrders() []*order.NewOrderRequest {
	if m != nil {
		return m.Orders
	}
	return nil
}

type UpdatePlanRequest struct {
	PlanID         string                      `protobuf:"bytes,1,opt,name=planID" json:"planID"`
	PlanTemplateID string                      `protobuf:"bytes,2,opt,name=planTemplateID" json:"planTemplateID"`
	UserID         string                      `protobuf:"bytes,3,opt,name=userID" json:"userID"`
	Status         string                      `protobuf:"bytes,4,opt,name=status" json:"status"`
	Orders         []*order.UpdateOrderRequest `protobuf:"bytes,5,rep,name=orders" json:"orders"`
}

func (m *UpdatePlanRequest) Reset()                    { *m = UpdatePlanRequest{} }
func (m *UpdatePlanRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdatePlanRequest) ProtoMessage()               {}
func (*UpdatePlanRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *UpdatePlanRequest) GetPlanID() string {
	if m != nil {
		return m.PlanID
	}
	return ""
}

func (m *UpdatePlanRequest) GetPlanTemplateID() string {
	if m != nil {
		return m.PlanTemplateID
	}
	return ""
}

func (m *UpdatePlanRequest) GetUserID() string {
	if m != nil {
		return m.UserID
	}
	return ""
}

func (m *UpdatePlanRequest) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *UpdatePlanRequest) GetOrders() []*order.UpdateOrderRequest {
	if m != nil {
		return m.Orders
	}
	return nil
}

type GetUserPlanRequest struct {
	PlanID     string `protobuf:"bytes,1,opt,name=planID" json:"planID"`
	UserID     string `protobuf:"bytes,2,opt,name=userID" json:"userID"`
	PlanDepth  uint32 `protobuf:"varint,3,opt,name=planDepth" json:"planDepth"`
	PlanLength uint32 `protobuf:"varint,4,opt,name=planLength" json:"planLength"`
}

func (m *GetUserPlanRequest) Reset()                    { *m = GetUserPlanRequest{} }
func (m *GetUserPlanRequest) String() string            { return proto.CompactTextString(m) }
func (*GetUserPlanRequest) ProtoMessage()               {}
func (*GetUserPlanRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *GetUserPlanRequest) GetPlanID() string {
	if m != nil {
		return m.PlanID
	}
	return ""
}

func (m *GetUserPlanRequest) GetUserID() string {
	if m != nil {
		return m.UserID
	}
	return ""
}

func (m *GetUserPlanRequest) GetPlanDepth() uint32 {
	if m != nil {
		return m.PlanDepth
	}
	return 0
}

func (m *GetUserPlanRequest) GetPlanLength() uint32 {
	if m != nil {
		return m.PlanLength
	}
	return 0
}

type GetUserPlansRequest struct {
	UserID     string `protobuf:"bytes,1,opt,name=userID" json:"userID"`
	Exchange   string `protobuf:"bytes,2,opt,name=exchange" json:"exchange"`
	MarketName string `protobuf:"bytes,3,opt,name=marketName" json:"marketName"`
	Status     string `protobuf:"bytes,4,opt,name=status" json:"status"`
	Page       uint32 `protobuf:"varint,5,opt,name=page" json:"page"`
	PageSize   uint32 `protobuf:"varint,6,opt,name=pageSize" json:"pageSize"`
}

func (m *GetUserPlansRequest) Reset()                    { *m = GetUserPlansRequest{} }
func (m *GetUserPlansRequest) String() string            { return proto.CompactTextString(m) }
func (*GetUserPlansRequest) ProtoMessage()               {}
func (*GetUserPlansRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *GetUserPlansRequest) GetUserID() string {
	if m != nil {
		return m.UserID
	}
	return ""
}

func (m *GetUserPlansRequest) GetExchange() string {
	if m != nil {
		return m.Exchange
	}
	return ""
}

func (m *GetUserPlansRequest) GetMarketName() string {
	if m != nil {
		return m.MarketName
	}
	return ""
}

func (m *GetUserPlansRequest) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *GetUserPlansRequest) GetPage() uint32 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *GetUserPlansRequest) GetPageSize() uint32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

type DeletePlanRequest struct {
	PlanID string `protobuf:"bytes,1,opt,name=planID" json:"planID"`
	UserID string `protobuf:"bytes,2,opt,name=userID" json:"userID"`
}

func (m *DeletePlanRequest) Reset()                    { *m = DeletePlanRequest{} }
func (m *DeletePlanRequest) String() string            { return proto.CompactTextString(m) }
func (*DeletePlanRequest) ProtoMessage()               {}
func (*DeletePlanRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *DeletePlanRequest) GetPlanID() string {
	if m != nil {
		return m.PlanID
	}
	return ""
}

func (m *DeletePlanRequest) GetUserID() string {
	if m != nil {
		return m.UserID
	}
	return ""
}

// Responses
type Plan struct {
	PlanID                string         `protobuf:"bytes,1,opt,name=planID" json:"planID"`
	PlanTemplateID        string         `protobuf:"bytes,2,opt,name=planTemplateID" json:"planTemplateID"`
	UserID                string         `protobuf:"bytes,3,opt,name=userID" json:"userID"`
	LastExecutedPlanDepth uint32         `protobuf:"varint,8,opt,name=lastExecutedPlanDepth" json:"lastExecutedPlanDepth"`
	LastExecutedOrderID   string         `protobuf:"bytes,9,opt,name=lastExecutedOrderID" json:"lastExecutedOrderID"`
	Exchange              string         `protobuf:"bytes,10,opt,name=exchange" json:"exchange"`
	MarketName            string         `protobuf:"bytes,11,opt,name=marketName" json:"marketName"`
	ActiveCurrencySymbol  string         `protobuf:"bytes,12,opt,name=activeCurrencySymbol" json:"activeCurrencySymbol"`
	ActiveCurrencyBalance float64        `protobuf:"fixed64,13,opt,name=activeCurrencyBalance" json:"activeCurrencyBalance"`
	Status                string         `protobuf:"bytes,14,opt,name=status" json:"status"`
	CloseOnComplete       bool           `protobuf:"varint,15,opt,name=closeOnComplete" json:"closeOnComplete"`
	CreatedOn             string         `protobuf:"bytes,16,opt,name=createdOn" json:"createdOn"`
	UpdatedOn             string         `protobuf:"bytes,17,opt,name=updatedOn" json:"updatedOn"`
	Orders                []*order.Order `protobuf:"bytes,18,rep,name=orders" json:"orders"`
}

func (m *Plan) Reset()                    { *m = Plan{} }
func (m *Plan) String() string            { return proto.CompactTextString(m) }
func (*Plan) ProtoMessage()               {}
func (*Plan) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *Plan) GetPlanID() string {
	if m != nil {
		return m.PlanID
	}
	return ""
}

func (m *Plan) GetPlanTemplateID() string {
	if m != nil {
		return m.PlanTemplateID
	}
	return ""
}

func (m *Plan) GetUserID() string {
	if m != nil {
		return m.UserID
	}
	return ""
}

func (m *Plan) GetLastExecutedPlanDepth() uint32 {
	if m != nil {
		return m.LastExecutedPlanDepth
	}
	return 0
}

func (m *Plan) GetLastExecutedOrderID() string {
	if m != nil {
		return m.LastExecutedOrderID
	}
	return ""
}

func (m *Plan) GetExchange() string {
	if m != nil {
		return m.Exchange
	}
	return ""
}

func (m *Plan) GetMarketName() string {
	if m != nil {
		return m.MarketName
	}
	return ""
}

func (m *Plan) GetActiveCurrencySymbol() string {
	if m != nil {
		return m.ActiveCurrencySymbol
	}
	return ""
}

func (m *Plan) GetActiveCurrencyBalance() float64 {
	if m != nil {
		return m.ActiveCurrencyBalance
	}
	return 0
}

func (m *Plan) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *Plan) GetCloseOnComplete() bool {
	if m != nil {
		return m.CloseOnComplete
	}
	return false
}

func (m *Plan) GetCreatedOn() string {
	if m != nil {
		return m.CreatedOn
	}
	return ""
}

func (m *Plan) GetUpdatedOn() string {
	if m != nil {
		return m.UpdatedOn
	}
	return ""
}

func (m *Plan) GetOrders() []*order.Order {
	if m != nil {
		return m.Orders
	}
	return nil
}

type PlanWithPagedOrders struct {
	PlanID             string            `protobuf:"bytes,1,opt,name=planID" json:"planID"`
	PlanTemplateID     string            `protobuf:"bytes,2,opt,name=planTemplateID" json:"planTemplateID"`
	UserID             string            `protobuf:"bytes,3,opt,name=userID" json:"userID"`
	KeyID              string            `protobuf:"bytes,4,opt,name=keyID" json:"keyID"`
	Key                string            `protobuf:"bytes,5,opt,name=key" json:"key"`
	KeySecret          string            `protobuf:"bytes,6,opt,name=keySecret" json:"keySecret"`
	KeyDescription     string            `protobuf:"bytes,7,opt,name=keyDescription" json:"keyDescription"`
	Exchange           string            `protobuf:"bytes,8,opt,name=exchange" json:"exchange"`
	ExchangeMarketName string            `protobuf:"bytes,9,opt,name=exchangeMarketName" json:"exchangeMarketName"`
	MarketName         string            `protobuf:"bytes,10,opt,name=marketName" json:"marketName"`
	BaseBalance        float64           `protobuf:"fixed64,11,opt,name=baseBalance" json:"baseBalance"`
	CurrencyBalance    float64           `protobuf:"fixed64,12,opt,name=currencyBalance" json:"currencyBalance"`
	Status             string            `protobuf:"bytes,13,opt,name=status" json:"status"`
	CreatedOn          string            `protobuf:"bytes,14,opt,name=createdOn" json:"createdOn"`
	UpdatedOn          string            `protobuf:"bytes,15,opt,name=updatedOn" json:"updatedOn"`
	OrdersPage         *order.OrdersPage `protobuf:"bytes,16,opt,name=ordersPage" json:"ordersPage"`
}

func (m *PlanWithPagedOrders) Reset()                    { *m = PlanWithPagedOrders{} }
func (m *PlanWithPagedOrders) String() string            { return proto.CompactTextString(m) }
func (*PlanWithPagedOrders) ProtoMessage()               {}
func (*PlanWithPagedOrders) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *PlanWithPagedOrders) GetPlanID() string {
	if m != nil {
		return m.PlanID
	}
	return ""
}

func (m *PlanWithPagedOrders) GetPlanTemplateID() string {
	if m != nil {
		return m.PlanTemplateID
	}
	return ""
}

func (m *PlanWithPagedOrders) GetUserID() string {
	if m != nil {
		return m.UserID
	}
	return ""
}

func (m *PlanWithPagedOrders) GetKeyID() string {
	if m != nil {
		return m.KeyID
	}
	return ""
}

func (m *PlanWithPagedOrders) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *PlanWithPagedOrders) GetKeySecret() string {
	if m != nil {
		return m.KeySecret
	}
	return ""
}

func (m *PlanWithPagedOrders) GetKeyDescription() string {
	if m != nil {
		return m.KeyDescription
	}
	return ""
}

func (m *PlanWithPagedOrders) GetExchange() string {
	if m != nil {
		return m.Exchange
	}
	return ""
}

func (m *PlanWithPagedOrders) GetExchangeMarketName() string {
	if m != nil {
		return m.ExchangeMarketName
	}
	return ""
}

func (m *PlanWithPagedOrders) GetMarketName() string {
	if m != nil {
		return m.MarketName
	}
	return ""
}

func (m *PlanWithPagedOrders) GetBaseBalance() float64 {
	if m != nil {
		return m.BaseBalance
	}
	return 0
}

func (m *PlanWithPagedOrders) GetCurrencyBalance() float64 {
	if m != nil {
		return m.CurrencyBalance
	}
	return 0
}

func (m *PlanWithPagedOrders) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *PlanWithPagedOrders) GetCreatedOn() string {
	if m != nil {
		return m.CreatedOn
	}
	return ""
}

func (m *PlanWithPagedOrders) GetUpdatedOn() string {
	if m != nil {
		return m.UpdatedOn
	}
	return ""
}

func (m *PlanWithPagedOrders) GetOrdersPage() *order.OrdersPage {
	if m != nil {
		return m.OrdersPage
	}
	return nil
}

type PlanData struct {
	Plan *Plan `protobuf:"bytes,1,opt,name=plan" json:"plan"`
}

func (m *PlanData) Reset()                    { *m = PlanData{} }
func (m *PlanData) String() string            { return proto.CompactTextString(m) }
func (*PlanData) ProtoMessage()               {}
func (*PlanData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *PlanData) GetPlan() *Plan {
	if m != nil {
		return m.Plan
	}
	return nil
}

type PlanResponse struct {
	Status  string    `protobuf:"bytes,1,opt,name=status" json:"status"`
	Message string    `protobuf:"bytes,2,opt,name=message" json:"message"`
	Data    *PlanData `protobuf:"bytes,3,opt,name=data" json:"data"`
}

func (m *PlanResponse) Reset()                    { *m = PlanResponse{} }
func (m *PlanResponse) String() string            { return proto.CompactTextString(m) }
func (*PlanResponse) ProtoMessage()               {}
func (*PlanResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *PlanResponse) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *PlanResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *PlanResponse) GetData() *PlanData {
	if m != nil {
		return m.Data
	}
	return nil
}

type PlanWithPagedOrdersResponse struct {
	Status  string               `protobuf:"bytes,1,opt,name=status" json:"status"`
	Message string               `protobuf:"bytes,2,opt,name=message" json:"message"`
	Data    *PlanWithPagedOrders `protobuf:"bytes,3,opt,name=data" json:"data"`
}

func (m *PlanWithPagedOrdersResponse) Reset()                    { *m = PlanWithPagedOrdersResponse{} }
func (m *PlanWithPagedOrdersResponse) String() string            { return proto.CompactTextString(m) }
func (*PlanWithPagedOrdersResponse) ProtoMessage()               {}
func (*PlanWithPagedOrdersResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *PlanWithPagedOrdersResponse) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *PlanWithPagedOrdersResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *PlanWithPagedOrdersResponse) GetData() *PlanWithPagedOrders {
	if m != nil {
		return m.Data
	}
	return nil
}

type PlansPageResponse struct {
	Status  string     `protobuf:"bytes,1,opt,name=status" json:"status"`
	Message string     `protobuf:"bytes,2,opt,name=message" json:"message"`
	Data    *PlansPage `protobuf:"bytes,3,opt,name=data" json:"data"`
}

func (m *PlansPageResponse) Reset()                    { *m = PlansPageResponse{} }
func (m *PlansPageResponse) String() string            { return proto.CompactTextString(m) }
func (*PlansPageResponse) ProtoMessage()               {}
func (*PlansPageResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *PlansPageResponse) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *PlansPageResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *PlansPageResponse) GetData() *PlansPage {
	if m != nil {
		return m.Data
	}
	return nil
}

type PlansPage struct {
	Page     uint32  `protobuf:"varint,1,opt,name=page" json:"page"`
	PageSize uint32  `protobuf:"varint,2,opt,name=pageSize" json:"pageSize"`
	Total    uint32  `protobuf:"varint,3,opt,name=total" json:"total"`
	Plans    []*Plan `protobuf:"bytes,4,rep,name=plans" json:"plans"`
}

func (m *PlansPage) Reset()                    { *m = PlansPage{} }
func (m *PlansPage) String() string            { return proto.CompactTextString(m) }
func (*PlansPage) ProtoMessage()               {}
func (*PlansPage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *PlansPage) GetPage() uint32 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *PlansPage) GetPageSize() uint32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *PlansPage) GetTotal() uint32 {
	if m != nil {
		return m.Total
	}
	return 0
}

func (m *PlansPage) GetPlans() []*Plan {
	if m != nil {
		return m.Plans
	}
	return nil
}

func init() {
	proto.RegisterType((*NewPlanRequest)(nil), "plan.NewPlanRequest")
	proto.RegisterType((*UpdatePlanRequest)(nil), "plan.UpdatePlanRequest")
	proto.RegisterType((*GetUserPlanRequest)(nil), "plan.GetUserPlanRequest")
	proto.RegisterType((*GetUserPlansRequest)(nil), "plan.GetUserPlansRequest")
	proto.RegisterType((*DeletePlanRequest)(nil), "plan.DeletePlanRequest")
	proto.RegisterType((*Plan)(nil), "plan.Plan")
	proto.RegisterType((*PlanWithPagedOrders)(nil), "plan.PlanWithPagedOrders")
	proto.RegisterType((*PlanData)(nil), "plan.PlanData")
	proto.RegisterType((*PlanResponse)(nil), "plan.PlanResponse")
	proto.RegisterType((*PlanWithPagedOrdersResponse)(nil), "plan.PlanWithPagedOrdersResponse")
	proto.RegisterType((*PlansPageResponse)(nil), "plan.PlansPageResponse")
	proto.RegisterType((*PlansPage)(nil), "plan.PlansPage")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for PlanService service

type PlanServiceClient interface {
	NewPlan(ctx context.Context, in *NewPlanRequest, opts ...client.CallOption) (*PlanResponse, error)
	GetUserPlan(ctx context.Context, in *GetUserPlanRequest, opts ...client.CallOption) (*PlanResponse, error)
	GetUserPlans(ctx context.Context, in *GetUserPlansRequest, opts ...client.CallOption) (*PlansPageResponse, error)
	DeletePlan(ctx context.Context, in *DeletePlanRequest, opts ...client.CallOption) (*PlanResponse, error)
	UpdatePlan(ctx context.Context, in *UpdatePlanRequest, opts ...client.CallOption) (*PlanResponse, error)
}

type planServiceClient struct {
	c           client.Client
	serviceName string
}

func NewPlanServiceClient(serviceName string, c client.Client) PlanServiceClient {
	if c == nil {
		c = client.NewClient()
	}
	if len(serviceName) == 0 {
		serviceName = "plan"
	}
	return &planServiceClient{
		c:           c,
		serviceName: serviceName,
	}
}

func (c *planServiceClient) NewPlan(ctx context.Context, in *NewPlanRequest, opts ...client.CallOption) (*PlanResponse, error) {
	req := c.c.NewRequest(c.serviceName, "PlanService.NewPlan", in)
	out := new(PlanResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *planServiceClient) GetUserPlan(ctx context.Context, in *GetUserPlanRequest, opts ...client.CallOption) (*PlanResponse, error) {
	req := c.c.NewRequest(c.serviceName, "PlanService.GetUserPlan", in)
	out := new(PlanResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *planServiceClient) GetUserPlans(ctx context.Context, in *GetUserPlansRequest, opts ...client.CallOption) (*PlansPageResponse, error) {
	req := c.c.NewRequest(c.serviceName, "PlanService.GetUserPlans", in)
	out := new(PlansPageResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *planServiceClient) DeletePlan(ctx context.Context, in *DeletePlanRequest, opts ...client.CallOption) (*PlanResponse, error) {
	req := c.c.NewRequest(c.serviceName, "PlanService.DeletePlan", in)
	out := new(PlanResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *planServiceClient) UpdatePlan(ctx context.Context, in *UpdatePlanRequest, opts ...client.CallOption) (*PlanResponse, error) {
	req := c.c.NewRequest(c.serviceName, "PlanService.UpdatePlan", in)
	out := new(PlanResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for PlanService service

type PlanServiceHandler interface {
	NewPlan(context.Context, *NewPlanRequest, *PlanResponse) error
	GetUserPlan(context.Context, *GetUserPlanRequest, *PlanResponse) error
	GetUserPlans(context.Context, *GetUserPlansRequest, *PlansPageResponse) error
	DeletePlan(context.Context, *DeletePlanRequest, *PlanResponse) error
	UpdatePlan(context.Context, *UpdatePlanRequest, *PlanResponse) error
}

func RegisterPlanServiceHandler(s server.Server, hdlr PlanServiceHandler, opts ...server.HandlerOption) {
	s.Handle(s.NewHandler(&PlanService{hdlr}, opts...))
}

type PlanService struct {
	PlanServiceHandler
}

func (h *PlanService) NewPlan(ctx context.Context, in *NewPlanRequest, out *PlanResponse) error {
	return h.PlanServiceHandler.NewPlan(ctx, in, out)
}

func (h *PlanService) GetUserPlan(ctx context.Context, in *GetUserPlanRequest, out *PlanResponse) error {
	return h.PlanServiceHandler.GetUserPlan(ctx, in, out)
}

func (h *PlanService) GetUserPlans(ctx context.Context, in *GetUserPlansRequest, out *PlansPageResponse) error {
	return h.PlanServiceHandler.GetUserPlans(ctx, in, out)
}

func (h *PlanService) DeletePlan(ctx context.Context, in *DeletePlanRequest, out *PlanResponse) error {
	return h.PlanServiceHandler.DeletePlan(ctx, in, out)
}

func (h *PlanService) UpdatePlan(ctx context.Context, in *UpdatePlanRequest, out *PlanResponse) error {
	return h.PlanServiceHandler.UpdatePlan(ctx, in, out)
}

func init() {
	proto.RegisterFile("github.com/asciiu/gomo/plan-service/proto/plan/plan.proto", fileDescriptor0)
}

var fileDescriptor0 = []byte{
	// 913 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x56, 0x5f, 0x6f, 0x1b, 0x45,
	0x10, 0xe7, 0x62, 0x27, 0xb1, 0xe7, 0x1c, 0xa7, 0xde, 0x84, 0x72, 0x09, 0x55, 0x65, 0x1d, 0x08,
	0x59, 0x48, 0x75, 0xa8, 0x81, 0x07, 0x14, 0xf1, 0x42, 0x0e, 0xa1, 0x48, 0x90, 0x46, 0x17, 0x2a,
	0x9e, 0x37, 0xe7, 0x91, 0x7d, 0xf8, 0xfe, 0x71, 0xbb, 0xd7, 0xd6, 0x3c, 0xf0, 0xc0, 0x27, 0xe0,
	0x99, 0x6f, 0xc1, 0x0b, 0x1f, 0x00, 0xbe, 0x18, 0xda, 0xd9, 0xf3, 0xfd, 0xf3, 0xa5, 0x2d, 0xad,
	0xfa, 0x62, 0xdf, 0xcc, 0xec, 0xee, 0xfc, 0x66, 0xe6, 0x37, 0x3b, 0x0b, 0x5f, 0x2d, 0x7c, 0xb9,
	0xcc, 0x6e, 0xa7, 0x5e, 0x1c, 0x9e, 0x71, 0xe1, 0xf9, 0x7e, 0x76, 0xb6, 0x88, 0xc3, 0xf8, 0x2c,
	0x09, 0x78, 0xf4, 0x48, 0x60, 0xfa, 0xcc, 0xf7, 0xf0, 0x2c, 0x49, 0x63, 0xa9, 0x55, 0xf4, 0x33,
	0x25, 0x99, 0x75, 0xd5, 0xf7, 0xe9, 0xf9, 0xeb, 0x1f, 0x10, 0xa7, 0x73, 0x4c, 0xf5, 0xaf, 0x3e,
	0xc2, 0xfe, 0xc7, 0x80, 0xe1, 0x15, 0x3e, 0xbf, 0x0e, 0x78, 0xe4, 0xe2, 0x2f, 0x19, 0x0a, 0xc9,
	0xee, 0xc3, 0x5e, 0x26, 0x30, 0xbd, 0x74, 0x2c, 0x63, 0x6c, 0x4c, 0xfa, 0x6e, 0x2e, 0xb1, 0x4f,
	0x60, 0xa8, 0x8e, 0xfc, 0x11, 0xc3, 0x24, 0xe0, 0x12, 0x2f, 0x1d, 0x6b, 0x87, 0xec, 0x0d, 0xad,
	0xda, 0x2f, 0x24, 0x97, 0x99, 0xb0, 0x3a, 0x7a, 0xbf, 0x96, 0xd8, 0x04, 0x0e, 0xbd, 0x20, 0x16,
	0xf8, 0x24, 0xba, 0x88, 0xc3, 0x24, 0x40, 0x89, 0x56, 0x77, 0x6c, 0x4c, 0x7a, 0x6e, 0x53, 0xcd,
	0xa6, 0xb0, 0x47, 0x18, 0x85, 0xb5, 0x3b, 0xee, 0x4c, 0xcc, 0xd9, 0xfd, 0xa9, 0x86, 0x7c, 0x85,
	0xcf, 0x9f, 0xa8, 0x8f, 0x1c, 0xa9, 0x9b, 0xaf, 0xb2, 0xff, 0x36, 0x60, 0xf4, 0x34, 0x99, 0x73,
	0x89, 0x8d, 0x38, 0x14, 0xb2, 0x32, 0x0e, 0x2d, 0xfd, 0x9f, 0x38, 0xf2, 0x3c, 0x74, 0x6a, 0x79,
	0x28, 0xe3, 0xeb, 0xd6, 0xe2, 0x7b, 0xdc, 0x40, 0x7d, 0x92, 0xa3, 0xd6, 0xc8, 0x5a, 0x81, 0xff,
	0x6e, 0x00, 0xfb, 0x0e, 0xe5, 0x53, 0x81, 0xe9, 0xeb, 0x20, 0x2f, 0x11, 0xed, 0xd4, 0x10, 0x3d,
	0x80, 0xbe, 0x5a, 0xe1, 0x60, 0x22, 0x97, 0x04, 0xf6, 0xc0, 0x2d, 0x15, 0xec, 0x21, 0x80, 0x12,
	0xbe, 0xc7, 0x68, 0x21, 0x97, 0x84, 0xf9, 0xc0, 0xad, 0x68, 0xec, 0xbf, 0x0c, 0x38, 0xaa, 0x80,
	0x10, 0xaf, 0xe2, 0xc1, 0x29, 0xf4, 0xf0, 0x85, 0xb7, 0xe4, 0xd1, 0x02, 0x73, 0x1c, 0x85, 0xac,
	0x7c, 0x85, 0x3c, 0x5d, 0xa1, 0xbc, 0xe2, 0x21, 0xe6, 0x79, 0xab, 0x68, 0xee, 0xcc, 0x1d, 0x83,
	0x6e, 0xc2, 0x17, 0x68, 0xed, 0x12, 0x3a, 0xfa, 0x56, 0x7e, 0xd4, 0xff, 0x8d, 0xff, 0x2b, 0x5a,
	0x7b, 0xa4, 0x2f, 0x64, 0xfb, 0x02, 0x46, 0x0e, 0x2a, 0xae, 0xbc, 0x45, 0xda, 0xec, 0x3f, 0xba,
	0xd0, 0x55, 0xfb, 0xdf, 0x19, 0x53, 0xbe, 0x80, 0xf7, 0x03, 0x2e, 0xe4, 0xb7, 0x2f, 0xd0, 0xcb,
	0x24, 0xce, 0xaf, 0x8b, 0x1a, 0xf5, 0x28, 0x9c, 0x76, 0x23, 0xfb, 0x0c, 0x8e, 0xaa, 0x06, 0x22,
	0xce, 0xa5, 0x63, 0xf5, 0xe9, 0xe8, 0x36, 0x53, 0xad, 0x22, 0xf0, 0xd2, 0x8a, 0x98, 0x5b, 0x15,
	0x99, 0xc1, 0x31, 0xf7, 0xa4, 0xff, 0x0c, 0x2f, 0xb2, 0x34, 0xc5, 0xc8, 0x5b, 0xdf, 0xac, 0xc3,
	0xdb, 0x38, 0xb0, 0x06, 0xb4, 0xb2, 0xd5, 0xa6, 0xe2, 0xaa, 0xeb, 0xbf, 0xe1, 0x01, 0x8f, 0x3c,
	0xb4, 0x0e, 0xc6, 0xc6, 0xc4, 0x70, 0xdb, 0x8d, 0x95, 0xda, 0x0f, 0x5f, 0x75, 0x2f, 0x1c, 0xb6,
	0xdf, 0x0b, 0x0f, 0xa0, 0xef, 0xa5, 0xc8, 0x55, 0xe4, 0x91, 0x75, 0x8f, 0x0e, 0x29, 0x15, 0xca,
	0x9a, 0x51, 0xab, 0x29, 0xeb, 0x48, 0x5b, 0x0b, 0x05, 0xfb, 0xb8, 0xe8, 0x4e, 0x46, 0xdd, 0x39,
	0xc8, 0xbb, 0x53, 0xf7, 0xe5, 0xa6, 0x21, 0xff, 0xec, 0xc2, 0x91, 0xaa, 0xc4, 0x4f, 0xbe, 0x5c,
	0x5e, 0xf3, 0x45, 0x9e, 0x62, 0xf1, 0xce, 0x18, 0x72, 0x0c, 0xbb, 0x2b, 0x5c, 0x5f, 0x3a, 0x79,
	0x3b, 0x68, 0x81, 0xdd, 0x83, 0xce, 0x0a, 0xd7, 0xd4, 0x0c, 0x7d, 0x57, 0x7d, 0xaa, 0xd8, 0x56,
	0xb8, 0xbe, 0x41, 0x2f, 0x45, 0x49, 0xcd, 0xd0, 0x77, 0x4b, 0x85, 0x42, 0xb1, 0xc2, 0xb5, 0x83,
	0xc2, 0x4b, 0xfd, 0x44, 0xfa, 0x71, 0x64, 0xed, 0x6b, 0x14, 0x75, 0x6d, 0x8d, 0x27, 0xbd, 0x06,
	0x4f, 0xa6, 0xc0, 0x36, 0xdf, 0x3f, 0x94, 0x7c, 0xd1, 0xa4, 0x6b, 0xb1, 0x34, 0x78, 0x05, 0x5b,
	0xbc, 0x1a, 0x83, 0x79, 0xcb, 0x05, 0x6e, 0x98, 0x61, 0x12, 0x33, 0xaa, 0x2a, 0xaa, 0x7b, 0x83,
	0x3f, 0x03, 0x5a, 0xd5, 0x54, 0x57, 0x98, 0x73, 0x50, 0x63, 0x4e, 0x8d, 0x0f, 0xc3, 0x97, 0xf2,
	0xe1, 0xb0, 0xc9, 0x87, 0xc7, 0x00, 0xba, 0xe6, 0xaa, 0xcc, 0x44, 0x26, 0x73, 0x36, 0xaa, 0x72,
	0x82, 0x0c, 0x6e, 0x65, 0x91, 0xfd, 0x29, 0xf4, 0xa8, 0x4b, 0xb9, 0xe4, 0xec, 0x21, 0xd0, 0xf0,
	0x25, 0x3a, 0x98, 0x33, 0x98, 0xd2, 0x54, 0xa6, 0xcb, 0x88, 0xf4, 0xf6, 0x1c, 0x06, 0xfa, 0x6a,
	0x12, 0x49, 0x1c, 0x89, 0x6a, 0x08, 0x46, 0x2d, 0x04, 0x0b, 0xf6, 0x43, 0x14, 0x82, 0x17, 0x77,
	0xe9, 0x46, 0x64, 0x36, 0x74, 0xe7, 0x5c, 0x72, 0x22, 0x8c, 0x39, 0x1b, 0x96, 0x1e, 0x94, 0x7f,
	0x97, 0x6c, 0xf6, 0x6f, 0xf0, 0x61, 0x0b, 0x5b, 0xdf, 0xc2, 0xe9, 0xa3, 0x9a, 0xd3, 0x93, 0xd2,
	0x69, 0xd3, 0x85, 0xf6, 0xff, 0x33, 0x8c, 0x68, 0x64, 0x50, 0xaa, 0xde, 0xdc, 0xeb, 0x47, 0x35,
	0xaf, 0x87, 0xa5, 0x57, 0x7d, 0xb0, 0xf6, 0x25, 0xa0, 0x5f, 0xa8, 0x8a, 0x79, 0x61, 0xdc, 0x31,
	0x2f, 0x76, 0xea, 0xf3, 0x42, 0xf5, 0x99, 0x8c, 0x25, 0x0f, 0xf2, 0xe9, 0xa8, 0x05, 0x36, 0x86,
	0x5d, 0xe5, 0x4a, 0x0d, 0xa3, 0x4e, 0xa3, 0x8a, 0xda, 0x30, 0xfb, 0x77, 0x07, 0x4c, 0x25, 0xdf,
	0xe8, 0x67, 0x14, 0xfb, 0x12, 0xf6, 0xf3, 0xd7, 0x12, 0x3b, 0xd6, 0xab, 0xeb, 0x8f, 0xa7, 0x53,
	0x56, 0x39, 0x23, 0x4f, 0x88, 0xfd, 0x1e, 0xfb, 0x1a, 0xcc, 0xca, 0x84, 0x65, 0x96, 0x5e, 0xb4,
	0x3d, 0xf9, 0xef, 0xd8, 0xee, 0xc0, 0xa0, 0x3a, 0xa0, 0xd9, 0xc9, 0xd6, 0xfe, 0xcd, 0xd0, 0x3e,
	0xfd, 0xa0, 0x99, 0xbc, 0xf2, 0x94, 0x73, 0x80, 0x72, 0x66, 0xb2, 0x7c, 0xe1, 0xd6, 0x14, 0xbd,
	0x03, 0xc2, 0x39, 0x40, 0xf9, 0xc2, 0xda, 0x6c, 0xde, 0x7a, 0x73, 0xb5, 0x6f, 0xbe, 0xdd, 0xa3,
	0xb7, 0xe6, 0xe7, 0xff, 0x05, 0x00, 0x00, 0xff, 0xff, 0x67, 0x25, 0x0d, 0x0e, 0xeb, 0x0a, 0x00,
	0x00,
}
