// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/plan/plan.proto

/*
Package fomo_plans is a generated protocol buffer package.

It is generated from these files:
	proto/plan/plan.proto

It has these top-level messages:
	PlanRequest
	OrderRequest
	GetUserPlanRequest
	GetUserPlansRequest
	DeletePlanRequest
	Plan
	Order
	PlanData
	PlansData
	PlanResponse
	PlansResponse
*/
package fomo_plans

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "golang.org/x/net/context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Requests
type PlanRequest struct {
	PlanID          string          `protobuf:"bytes,1,opt,name=planID" json:"planID"`
	UserID          string          `protobuf:"bytes,2,opt,name=userID" json:"userID"`
	KeyID           string          `protobuf:"bytes,3,opt,name=keyID" json:"keyID"`
	Exchange        string          `protobuf:"bytes,4,opt,name=exchange" json:"exchange"`
	MarketName      string          `protobuf:"bytes,5,opt,name=marketName" json:"marketName"`
	BaseBalance     float64         `protobuf:"fixed64,6,opt,name=baseBalance" json:"baseBalance"`
	CurrencyBalance float64         `protobuf:"fixed64,7,opt,name=currencyBalance" json:"currencyBalance"`
	Active          bool            `protobuf:"varint,8,opt,name=active" json:"active"`
	Orders          []*OrderRequest `protobuf:"bytes,9,rep,name=orders" json:"orders"`
}

func (m *PlanRequest) Reset()                    { *m = PlanRequest{} }
func (m *PlanRequest) String() string            { return proto.CompactTextString(m) }
func (*PlanRequest) ProtoMessage()               {}
func (*PlanRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *PlanRequest) GetPlanID() string {
	if m != nil {
		return m.PlanID
	}
	return ""
}

func (m *PlanRequest) GetUserID() string {
	if m != nil {
		return m.UserID
	}
	return ""
}

func (m *PlanRequest) GetKeyID() string {
	if m != nil {
		return m.KeyID
	}
	return ""
}

func (m *PlanRequest) GetExchange() string {
	if m != nil {
		return m.Exchange
	}
	return ""
}

func (m *PlanRequest) GetMarketName() string {
	if m != nil {
		return m.MarketName
	}
	return ""
}

func (m *PlanRequest) GetBaseBalance() float64 {
	if m != nil {
		return m.BaseBalance
	}
	return 0
}

func (m *PlanRequest) GetCurrencyBalance() float64 {
	if m != nil {
		return m.CurrencyBalance
	}
	return 0
}

func (m *PlanRequest) GetActive() bool {
	if m != nil {
		return m.Active
	}
	return false
}

func (m *PlanRequest) GetOrders() []*OrderRequest {
	if m != nil {
		return m.Orders
	}
	return nil
}

type OrderRequest struct {
	Side            string  `protobuf:"bytes,1,opt,name=side" json:"side"`
	OrderType       string  `protobuf:"bytes,2,opt,name=orderType" json:"orderType"`
	BasePercent     float64 `protobuf:"fixed64,3,opt,name=basePercent" json:"basePercent"`
	CurrencyPercent float64 `protobuf:"fixed64,4,opt,name=currencyPercent" json:"currencyPercent"`
	Conditions      string  `protobuf:"bytes,5,opt,name=conditions" json:"conditions"`
	Price           float64 `protobuf:"fixed64,6,opt,name=price" json:"price"`
}

func (m *OrderRequest) Reset()                    { *m = OrderRequest{} }
func (m *OrderRequest) String() string            { return proto.CompactTextString(m) }
func (*OrderRequest) ProtoMessage()               {}
func (*OrderRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *OrderRequest) GetSide() string {
	if m != nil {
		return m.Side
	}
	return ""
}

func (m *OrderRequest) GetOrderType() string {
	if m != nil {
		return m.OrderType
	}
	return ""
}

func (m *OrderRequest) GetBasePercent() float64 {
	if m != nil {
		return m.BasePercent
	}
	return 0
}

func (m *OrderRequest) GetCurrencyPercent() float64 {
	if m != nil {
		return m.CurrencyPercent
	}
	return 0
}

func (m *OrderRequest) GetConditions() string {
	if m != nil {
		return m.Conditions
	}
	return ""
}

func (m *OrderRequest) GetPrice() float64 {
	if m != nil {
		return m.Price
	}
	return 0
}

type GetUserPlanRequest struct {
	PlanID string `protobuf:"bytes,1,opt,name=planID" json:"planID"`
	UserID string `protobuf:"bytes,2,opt,name=userID" json:"userID"`
}

func (m *GetUserPlanRequest) Reset()                    { *m = GetUserPlanRequest{} }
func (m *GetUserPlanRequest) String() string            { return proto.CompactTextString(m) }
func (*GetUserPlanRequest) ProtoMessage()               {}
func (*GetUserPlanRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *GetUserPlanRequest) GetPlanID() string {
	if m != nil {
		return m.PlanID
	}
	return ""
}

func (m *GetUserPlanRequest) GetUserID() string {
	if m != nil {
		return m.UserID
	}
	return ""
}

type GetUserPlansRequest struct {
	UserID     string `protobuf:"bytes,1,opt,name=userID" json:"userID"`
	Exchange   string `protobuf:"bytes,2,opt,name=exchange" json:"exchange"`
	MarketName string `protobuf:"bytes,3,opt,name=marketName" json:"marketName"`
	Status     string `protobuf:"bytes,4,opt,name=status" json:"status"`
}

func (m *GetUserPlansRequest) Reset()                    { *m = GetUserPlansRequest{} }
func (m *GetUserPlansRequest) String() string            { return proto.CompactTextString(m) }
func (*GetUserPlansRequest) ProtoMessage()               {}
func (*GetUserPlansRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *GetUserPlansRequest) GetUserID() string {
	if m != nil {
		return m.UserID
	}
	return ""
}

func (m *GetUserPlansRequest) GetExchange() string {
	if m != nil {
		return m.Exchange
	}
	return ""
}

func (m *GetUserPlansRequest) GetMarketName() string {
	if m != nil {
		return m.MarketName
	}
	return ""
}

func (m *GetUserPlansRequest) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

type DeletePlanRequest struct {
	PlanID string `protobuf:"bytes,1,opt,name=planID" json:"planID"`
	UserID string `protobuf:"bytes,2,opt,name=userID" json:"userID"`
}

func (m *DeletePlanRequest) Reset()                    { *m = DeletePlanRequest{} }
func (m *DeletePlanRequest) String() string            { return proto.CompactTextString(m) }
func (*DeletePlanRequest) ProtoMessage()               {}
func (*DeletePlanRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *DeletePlanRequest) GetPlanID() string {
	if m != nil {
		return m.PlanID
	}
	return ""
}

func (m *DeletePlanRequest) GetUserID() string {
	if m != nil {
		return m.UserID
	}
	return ""
}

// Responses
type Plan struct {
	PlanID             string   `protobuf:"bytes,1,opt,name=planID" json:"planID"`
	UserID             string   `protobuf:"bytes,2,opt,name=userID" json:"userID"`
	KeyID              string   `protobuf:"bytes,3,opt,name=keyID" json:"keyID"`
	Key                string   `protobuf:"bytes,4,opt,name=key" json:"key"`
	Secret             string   `protobuf:"bytes,5,opt,name=secret" json:"secret"`
	Exchange           string   `protobuf:"bytes,6,opt,name=exchange" json:"exchange"`
	ExchangeMarketName string   `protobuf:"bytes,7,opt,name=exchangeMarketName" json:"exchangeMarketName"`
	MarketName         string   `protobuf:"bytes,8,opt,name=marketName" json:"marketName"`
	BaseBalance        float64  `protobuf:"fixed64,9,opt,name=baseBalance" json:"baseBalance"`
	CurrencyBalance    float64  `protobuf:"fixed64,10,opt,name=currencyBalance" json:"currencyBalance"`
	Status             string   `protobuf:"bytes,11,opt,name=status" json:"status"`
	Orders             []*Order `protobuf:"bytes,12,rep,name=orders" json:"orders"`
}

func (m *Plan) Reset()                    { *m = Plan{} }
func (m *Plan) String() string            { return proto.CompactTextString(m) }
func (*Plan) ProtoMessage()               {}
func (*Plan) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *Plan) GetPlanID() string {
	if m != nil {
		return m.PlanID
	}
	return ""
}

func (m *Plan) GetUserID() string {
	if m != nil {
		return m.UserID
	}
	return ""
}

func (m *Plan) GetKeyID() string {
	if m != nil {
		return m.KeyID
	}
	return ""
}

func (m *Plan) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *Plan) GetSecret() string {
	if m != nil {
		return m.Secret
	}
	return ""
}

func (m *Plan) GetExchange() string {
	if m != nil {
		return m.Exchange
	}
	return ""
}

func (m *Plan) GetExchangeMarketName() string {
	if m != nil {
		return m.ExchangeMarketName
	}
	return ""
}

func (m *Plan) GetMarketName() string {
	if m != nil {
		return m.MarketName
	}
	return ""
}

func (m *Plan) GetBaseBalance() float64 {
	if m != nil {
		return m.BaseBalance
	}
	return 0
}

func (m *Plan) GetCurrencyBalance() float64 {
	if m != nil {
		return m.CurrencyBalance
	}
	return 0
}

func (m *Plan) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *Plan) GetOrders() []*Order {
	if m != nil {
		return m.Orders
	}
	return nil
}

type Order struct {
	OrderID         string  `protobuf:"bytes,1,opt,name=orderID" json:"orderID"`
	Side            string  `protobuf:"bytes,2,opt,name=side" json:"side"`
	OrderType       string  `protobuf:"bytes,3,opt,name=orderType" json:"orderType"`
	Price           float64 `protobuf:"fixed64,4,opt,name=price" json:"price"`
	BasePercent     float64 `protobuf:"fixed64,5,opt,name=basePercent" json:"basePercent"`
	CurrencyPercent float64 `protobuf:"fixed64,6,opt,name=currencyPercent" json:"currencyPercent"`
	Status          string  `protobuf:"bytes,7,opt,name=status" json:"status"`
	Conditions      string  `protobuf:"bytes,8,opt,name=conditions" json:"conditions"`
	Condition       string  `protobuf:"bytes,9,opt,name=condition" json:"condition"`
}

func (m *Order) Reset()                    { *m = Order{} }
func (m *Order) String() string            { return proto.CompactTextString(m) }
func (*Order) ProtoMessage()               {}
func (*Order) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *Order) GetOrderID() string {
	if m != nil {
		return m.OrderID
	}
	return ""
}

func (m *Order) GetSide() string {
	if m != nil {
		return m.Side
	}
	return ""
}

func (m *Order) GetOrderType() string {
	if m != nil {
		return m.OrderType
	}
	return ""
}

func (m *Order) GetPrice() float64 {
	if m != nil {
		return m.Price
	}
	return 0
}

func (m *Order) GetBasePercent() float64 {
	if m != nil {
		return m.BasePercent
	}
	return 0
}

func (m *Order) GetCurrencyPercent() float64 {
	if m != nil {
		return m.CurrencyPercent
	}
	return 0
}

func (m *Order) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *Order) GetConditions() string {
	if m != nil {
		return m.Conditions
	}
	return ""
}

func (m *Order) GetCondition() string {
	if m != nil {
		return m.Condition
	}
	return ""
}

type PlanData struct {
	Plan *Plan `protobuf:"bytes,1,opt,name=plan" json:"plan"`
}

func (m *PlanData) Reset()                    { *m = PlanData{} }
func (m *PlanData) String() string            { return proto.CompactTextString(m) }
func (*PlanData) ProtoMessage()               {}
func (*PlanData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *PlanData) GetPlan() *Plan {
	if m != nil {
		return m.Plan
	}
	return nil
}

type PlansData struct {
	Plans []*Plan `protobuf:"bytes,1,rep,name=plans" json:"plans"`
}

func (m *PlansData) Reset()                    { *m = PlansData{} }
func (m *PlansData) String() string            { return proto.CompactTextString(m) }
func (*PlansData) ProtoMessage()               {}
func (*PlansData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *PlansData) GetPlans() []*Plan {
	if m != nil {
		return m.Plans
	}
	return nil
}

type PlanResponse struct {
	Status  string    `protobuf:"bytes,1,opt,name=status" json:"status"`
	Message string    `protobuf:"bytes,2,opt,name=message" json:"message"`
	Data    *PlanData `protobuf:"bytes,3,opt,name=data" json:"data"`
}

func (m *PlanResponse) Reset()                    { *m = PlanResponse{} }
func (m *PlanResponse) String() string            { return proto.CompactTextString(m) }
func (*PlanResponse) ProtoMessage()               {}
func (*PlanResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *PlanResponse) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *PlanResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *PlanResponse) GetData() *PlanData {
	if m != nil {
		return m.Data
	}
	return nil
}

type PlansResponse struct {
	Status  string     `protobuf:"bytes,1,opt,name=status" json:"status"`
	Message string     `protobuf:"bytes,2,opt,name=message" json:"message"`
	Data    *PlansData `protobuf:"bytes,3,opt,name=data" json:"data"`
}

func (m *PlansResponse) Reset()                    { *m = PlansResponse{} }
func (m *PlansResponse) String() string            { return proto.CompactTextString(m) }
func (*PlansResponse) ProtoMessage()               {}
func (*PlansResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *PlansResponse) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *PlansResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *PlansResponse) GetData() *PlansData {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterType((*PlanRequest)(nil), "fomo.plans.PlanRequest")
	proto.RegisterType((*OrderRequest)(nil), "fomo.plans.OrderRequest")
	proto.RegisterType((*GetUserPlanRequest)(nil), "fomo.plans.GetUserPlanRequest")
	proto.RegisterType((*GetUserPlansRequest)(nil), "fomo.plans.GetUserPlansRequest")
	proto.RegisterType((*DeletePlanRequest)(nil), "fomo.plans.DeletePlanRequest")
	proto.RegisterType((*Plan)(nil), "fomo.plans.Plan")
	proto.RegisterType((*Order)(nil), "fomo.plans.Order")
	proto.RegisterType((*PlanData)(nil), "fomo.plans.PlanData")
	proto.RegisterType((*PlansData)(nil), "fomo.plans.PlansData")
	proto.RegisterType((*PlanResponse)(nil), "fomo.plans.PlanResponse")
	proto.RegisterType((*PlansResponse)(nil), "fomo.plans.PlansResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for PlanService service

type PlanServiceClient interface {
	AddPlan(ctx context.Context, in *PlanRequest, opts ...client.CallOption) (*PlanResponse, error)
	GetUserPlan(ctx context.Context, in *GetUserPlanRequest, opts ...client.CallOption) (*PlanResponse, error)
	GetUserPlans(ctx context.Context, in *GetUserPlansRequest, opts ...client.CallOption) (*PlansResponse, error)
	DeletePlan(ctx context.Context, in *DeletePlanRequest, opts ...client.CallOption) (*PlanResponse, error)
	UpdateOrder(ctx context.Context, in *PlanRequest, opts ...client.CallOption) (*PlanResponse, error)
}

type planServiceClient struct {
	c           client.Client
	serviceName string
}

func NewPlanServiceClient(serviceName string, c client.Client) PlanServiceClient {
	if c == nil {
		c = client.NewClient()
	}
	if len(serviceName) == 0 {
		serviceName = "fomo.plans"
	}
	return &planServiceClient{
		c:           c,
		serviceName: serviceName,
	}
}

func (c *planServiceClient) AddPlan(ctx context.Context, in *PlanRequest, opts ...client.CallOption) (*PlanResponse, error) {
	req := c.c.NewRequest(c.serviceName, "PlanService.AddPlan", in)
	out := new(PlanResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *planServiceClient) GetUserPlan(ctx context.Context, in *GetUserPlanRequest, opts ...client.CallOption) (*PlanResponse, error) {
	req := c.c.NewRequest(c.serviceName, "PlanService.GetUserPlan", in)
	out := new(PlanResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *planServiceClient) GetUserPlans(ctx context.Context, in *GetUserPlansRequest, opts ...client.CallOption) (*PlansResponse, error) {
	req := c.c.NewRequest(c.serviceName, "PlanService.GetUserPlans", in)
	out := new(PlansResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *planServiceClient) DeletePlan(ctx context.Context, in *DeletePlanRequest, opts ...client.CallOption) (*PlanResponse, error) {
	req := c.c.NewRequest(c.serviceName, "PlanService.DeletePlan", in)
	out := new(PlanResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *planServiceClient) UpdateOrder(ctx context.Context, in *PlanRequest, opts ...client.CallOption) (*PlanResponse, error) {
	req := c.c.NewRequest(c.serviceName, "PlanService.UpdateOrder", in)
	out := new(PlanResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for PlanService service

type PlanServiceHandler interface {
	AddPlan(context.Context, *PlanRequest, *PlanResponse) error
	GetUserPlan(context.Context, *GetUserPlanRequest, *PlanResponse) error
	GetUserPlans(context.Context, *GetUserPlansRequest, *PlansResponse) error
	DeletePlan(context.Context, *DeletePlanRequest, *PlanResponse) error
	UpdateOrder(context.Context, *PlanRequest, *PlanResponse) error
}

func RegisterPlanServiceHandler(s server.Server, hdlr PlanServiceHandler, opts ...server.HandlerOption) {
	s.Handle(s.NewHandler(&PlanService{hdlr}, opts...))
}

type PlanService struct {
	PlanServiceHandler
}

func (h *PlanService) AddPlan(ctx context.Context, in *PlanRequest, out *PlanResponse) error {
	return h.PlanServiceHandler.AddPlan(ctx, in, out)
}

func (h *PlanService) GetUserPlan(ctx context.Context, in *GetUserPlanRequest, out *PlanResponse) error {
	return h.PlanServiceHandler.GetUserPlan(ctx, in, out)
}

func (h *PlanService) GetUserPlans(ctx context.Context, in *GetUserPlansRequest, out *PlansResponse) error {
	return h.PlanServiceHandler.GetUserPlans(ctx, in, out)
}

func (h *PlanService) DeletePlan(ctx context.Context, in *DeletePlanRequest, out *PlanResponse) error {
	return h.PlanServiceHandler.DeletePlan(ctx, in, out)
}

func (h *PlanService) UpdateOrder(ctx context.Context, in *PlanRequest, out *PlanResponse) error {
	return h.PlanServiceHandler.UpdateOrder(ctx, in, out)
}

func init() { proto.RegisterFile("proto/plan/plan.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 700 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x56, 0xdd, 0x6e, 0xd3, 0x4a,
	0x10, 0x3e, 0x4e, 0x1c, 0x27, 0x1e, 0xe7, 0xe8, 0xb4, 0x7b, 0xda, 0x1e, 0x9f, 0xaa, 0x94, 0xc8,
	0x42, 0x28, 0xbd, 0x09, 0x55, 0x7a, 0x8f, 0x44, 0x89, 0x54, 0x45, 0xe2, 0xa7, 0x32, 0xf4, 0x01,
	0xb6, 0xf6, 0x00, 0xa1, 0x89, 0x1d, 0xbc, 0x9b, 0x8a, 0x5c, 0x72, 0xcd, 0x73, 0xf0, 0x22, 0xbc,
	0x11, 0xe2, 0x05, 0x90, 0xc7, 0x6b, 0x7b, 0x6d, 0xb7, 0xa5, 0x6a, 0xb9, 0xa9, 0x3c, 0xdf, 0xcc,
	0xee, 0xce, 0x7c, 0x33, 0xdf, 0x34, 0xb0, 0xbd, 0x4c, 0x62, 0x19, 0x3f, 0x59, 0xce, 0x79, 0x44,
	0x7f, 0x46, 0x64, 0x33, 0x78, 0x17, 0x2f, 0xe2, 0x51, 0x0a, 0x08, 0xef, 0x5b, 0x0b, 0x9c, 0xd3,
	0x39, 0x8f, 0x7c, 0xfc, 0xb4, 0x42, 0x21, 0xd9, 0x0e, 0x58, 0xa9, 0x63, 0x3a, 0x71, 0x8d, 0x81,
	0x31, 0xb4, 0x7d, 0x65, 0xa5, 0xf8, 0x4a, 0x60, 0x32, 0x9d, 0xb8, 0xad, 0x0c, 0xcf, 0x2c, 0xb6,
	0x05, 0x9d, 0x0b, 0x5c, 0x4f, 0x27, 0x6e, 0x9b, 0xe0, 0xcc, 0x60, 0xbb, 0xd0, 0xc3, 0xcf, 0xc1,
	0x07, 0x1e, 0xbd, 0x47, 0xd7, 0x24, 0x47, 0x61, 0xb3, 0x7d, 0x80, 0x05, 0x4f, 0x2e, 0x50, 0xbe,
	0xe2, 0x0b, 0x74, 0x3b, 0xe4, 0xd5, 0x10, 0x36, 0x00, 0xe7, 0x9c, 0x0b, 0x3c, 0xe6, 0x73, 0x1e,
	0x05, 0xe8, 0x5a, 0x03, 0x63, 0x68, 0xf8, 0x3a, 0xc4, 0x86, 0xf0, 0x4f, 0xb0, 0x4a, 0x12, 0x8c,
	0x82, 0x75, 0x1e, 0xd5, 0xa5, 0xa8, 0x3a, 0x9c, 0x66, 0xcd, 0x03, 0x39, 0xbb, 0x44, 0xb7, 0x37,
	0x30, 0x86, 0x3d, 0x5f, 0x59, 0xec, 0x10, 0xac, 0x38, 0x09, 0x31, 0x11, 0xae, 0x3d, 0x68, 0x0f,
	0x9d, 0xb1, 0x3b, 0x2a, 0x29, 0x19, 0xbd, 0x4e, 0x3d, 0x8a, 0x0f, 0x5f, 0xc5, 0x79, 0xdf, 0x0d,
	0xe8, 0xeb, 0x0e, 0xc6, 0xc0, 0x14, 0xb3, 0x10, 0x15, 0x4d, 0xf4, 0xcd, 0xf6, 0xc0, 0xa6, 0xf0,
	0xb7, 0xeb, 0x25, 0x2a, 0x9e, 0x4a, 0x20, 0x2f, 0xec, 0x14, 0x93, 0x00, 0x23, 0x49, 0x84, 0xa9,
	0xc2, 0x14, 0xa4, 0x17, 0x96, 0x47, 0x99, 0xd5, 0xc2, 0xf2, 0xc8, 0x7d, 0x80, 0x20, 0x8e, 0xc2,
	0x99, 0x9c, 0xc5, 0x91, 0xc8, 0x49, 0x2c, 0x91, 0xb4, 0x2d, 0xcb, 0x64, 0x56, 0xd0, 0x97, 0x19,
	0xde, 0x04, 0xd8, 0x09, 0xca, 0x33, 0x81, 0xc9, 0x3d, 0x5a, 0xee, 0x7d, 0x31, 0xe0, 0x5f, 0xed,
	0x1a, 0xa1, 0xdd, 0xa3, 0xe2, 0x8d, 0xca, 0x88, 0xe8, 0xc3, 0xd0, 0xba, 0x71, 0x18, 0xda, 0x8d,
	0x61, 0xd8, 0x01, 0x4b, 0x48, 0x2e, 0x57, 0x42, 0x8d, 0x91, 0xb2, 0xbc, 0xe7, 0xb0, 0x39, 0xc1,
	0x39, 0x4a, 0xbc, 0x4f, 0x21, 0x3f, 0x5a, 0x60, 0xa6, 0xe7, 0xff, 0xd0, 0xd0, 0x6f, 0x40, 0xfb,
	0x02, 0xd7, 0x2a, 0xd1, 0xf4, 0x93, 0xb2, 0xc7, 0x20, 0x41, 0xa9, 0x3a, 0xa4, 0xac, 0x0a, 0x23,
	0x56, 0x8d, 0x91, 0x11, 0xb0, 0xfc, 0xfb, 0x65, 0xc9, 0x4c, 0x97, 0xa2, 0xae, 0xf0, 0xd4, 0x18,
	0xec, 0xfd, 0x4e, 0x4e, 0xf6, 0xad, 0xe4, 0x04, 0xd7, 0xca, 0x49, 0x75, 0xc3, 0xd1, 0xbb, 0xc1,
	0x0e, 0x0a, 0x39, 0xf5, 0x49, 0x4e, 0x9b, 0x4d, 0x39, 0xe5, 0x3a, 0xfa, 0xda, 0x82, 0x0e, 0x21,
	0xcc, 0x85, 0x2e, 0x61, 0x05, 0xeb, 0xb9, 0x59, 0x48, 0xab, 0x75, 0x9d, 0xb4, 0xda, 0x75, 0x69,
	0x15, 0xe3, 0x6e, 0x6a, 0xe3, 0x5e, 0x17, 0x5c, 0xe7, 0x56, 0x82, 0xb3, 0xae, 0x16, 0x5c, 0x59,
	0x7a, 0xb7, 0x52, 0x7a, 0x55, 0x88, 0xbd, 0x86, 0x10, 0xf7, 0xc0, 0x2e, 0x2c, 0x22, 0xdf, 0xf6,
	0x4b, 0xc0, 0x3b, 0x84, 0x5e, 0x3a, 0x80, 0x13, 0x2e, 0x39, 0x7b, 0x04, 0x66, 0x4a, 0x18, 0x91,
	0xe1, 0x8c, 0x37, 0x74, 0x0a, 0x69, 0xc8, 0xc9, 0xeb, 0x1d, 0x81, 0x4d, 0xa2, 0xa3, 0x23, 0x8f,
	0xa1, 0x43, 0x01, 0xae, 0x41, 0xb4, 0x37, 0xcf, 0x64, 0x6e, 0xef, 0x23, 0xf4, 0x33, 0x9d, 0x88,
	0x65, 0x1c, 0x09, 0xbd, 0x8f, 0x46, 0xa5, 0x18, 0x17, 0xba, 0x0b, 0x14, 0x82, 0x17, 0x42, 0xcd,
	0x4d, 0x36, 0x04, 0x33, 0xe4, 0x92, 0x13, 0xf3, 0xce, 0x78, 0xab, 0xfe, 0x50, 0x9a, 0x8d, 0x4f,
	0x11, 0xde, 0x1c, 0xfe, 0x56, 0x5b, 0xe1, 0xce, 0x8f, 0x1d, 0x54, 0x1e, 0xdb, 0xae, 0x3f, 0x26,
	0xca, 0xd7, 0xc6, 0x3f, 0xd5, 0xbf, 0xaf, 0x37, 0x98, 0x5c, 0xa6, 0x2d, 0x7f, 0x0a, 0xdd, 0x67,
	0x61, 0x48, 0xa2, 0xfe, 0xaf, 0xc1, 0x46, 0xb6, 0x26, 0x76, 0xdd, 0xa6, 0x23, 0x4b, 0xd5, 0xfb,
	0x8b, 0x4d, 0xc1, 0xd1, 0x56, 0x1b, 0xdb, 0xd7, 0x43, 0x9b, 0xab, 0xf3, 0xc6, 0xab, 0x5e, 0x40,
	0x5f, 0xdf, 0x92, 0xec, 0xe1, 0x35, 0x77, 0xe5, 0xfb, 0x73, 0xf7, 0xff, 0x46, 0xa1, 0xda, 0x6d,
	0x27, 0x00, 0xe5, 0xc2, 0x63, 0x0f, 0xf4, 0xd0, 0xc6, 0x22, 0xbc, 0x31, 0xad, 0x63, 0x70, 0xce,
	0x96, 0x21, 0x97, 0x98, 0xa9, 0xf0, 0x2e, 0x2c, 0x9d, 0x5b, 0xf4, 0x3b, 0xe2, 0xe8, 0x57, 0x00,
	0x00, 0x00, 0xff, 0xff, 0xf4, 0x08, 0x79, 0xc3, 0x60, 0x08, 0x00, 0x00,
}
