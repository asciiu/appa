// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/plan/plan.proto

/*
Package fomo_plans is a generated protocol buffer package.

It is generated from these files:
	proto/plan/plan.proto

It has these top-level messages:
	PlanRequest
	OrderRequest
	GetUserPlanRequest
	GetUserPlansRequest
	DeletePlanRequest
	UpdatePlanRequest
	Plan
	PlanWithPagedOrders
	Order
	PlanData
	PlanResponse
	PlanWithPagedOrdersResponse
	PlansPageResponse
	OrdersPage
	PlansPage
*/
package fomo_plans

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "golang.org/x/net/context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Requests
type PlanRequest struct {
	PlanID          string          `protobuf:"bytes,1,opt,name=planID" json:"planID"`
	UserID          string          `protobuf:"bytes,2,opt,name=userID" json:"userID"`
	KeyID           string          `protobuf:"bytes,3,opt,name=keyID" json:"keyID"`
	PlanTemplateID  string          `protobuf:"bytes,4,opt,name=planTemplateID" json:"planTemplateID"`
	Exchange        string          `protobuf:"bytes,5,opt,name=exchange" json:"exchange"`
	MarketName      string          `protobuf:"bytes,6,opt,name=marketName" json:"marketName"`
	BaseBalance     float64         `protobuf:"fixed64,7,opt,name=baseBalance" json:"baseBalance"`
	CurrencyBalance float64         `protobuf:"fixed64,8,opt,name=currencyBalance" json:"currencyBalance"`
	Status          string          `protobuf:"bytes,9,opt,name=status" json:"status"`
	Orders          []*OrderRequest `protobuf:"bytes,10,rep,name=orders" json:"orders"`
}

func (m *PlanRequest) Reset()                    { *m = PlanRequest{} }
func (m *PlanRequest) String() string            { return proto.CompactTextString(m) }
func (*PlanRequest) ProtoMessage()               {}
func (*PlanRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *PlanRequest) GetPlanID() string {
	if m != nil {
		return m.PlanID
	}
	return ""
}

func (m *PlanRequest) GetUserID() string {
	if m != nil {
		return m.UserID
	}
	return ""
}

func (m *PlanRequest) GetKeyID() string {
	if m != nil {
		return m.KeyID
	}
	return ""
}

func (m *PlanRequest) GetPlanTemplateID() string {
	if m != nil {
		return m.PlanTemplateID
	}
	return ""
}

func (m *PlanRequest) GetExchange() string {
	if m != nil {
		return m.Exchange
	}
	return ""
}

func (m *PlanRequest) GetMarketName() string {
	if m != nil {
		return m.MarketName
	}
	return ""
}

func (m *PlanRequest) GetBaseBalance() float64 {
	if m != nil {
		return m.BaseBalance
	}
	return 0
}

func (m *PlanRequest) GetCurrencyBalance() float64 {
	if m != nil {
		return m.CurrencyBalance
	}
	return 0
}

func (m *PlanRequest) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *PlanRequest) GetOrders() []*OrderRequest {
	if m != nil {
		return m.Orders
	}
	return nil
}

type OrderRequest struct {
	Side            string  `protobuf:"bytes,1,opt,name=side" json:"side"`
	OrderType       string  `protobuf:"bytes,2,opt,name=orderType" json:"orderType"`
	OrderTemplateID string  `protobuf:"bytes,3,opt,name=orderTemplateID" json:"orderTemplateID"`
	BasePercent     float64 `protobuf:"fixed64,4,opt,name=basePercent" json:"basePercent"`
	CurrencyPercent float64 `protobuf:"fixed64,5,opt,name=currencyPercent" json:"currencyPercent"`
	Conditions      string  `protobuf:"bytes,6,opt,name=conditions" json:"conditions"`
	LimitPrice      float64 `protobuf:"fixed64,7,opt,name=limitPrice" json:"limitPrice"`
}

func (m *OrderRequest) Reset()                    { *m = OrderRequest{} }
func (m *OrderRequest) String() string            { return proto.CompactTextString(m) }
func (*OrderRequest) ProtoMessage()               {}
func (*OrderRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *OrderRequest) GetSide() string {
	if m != nil {
		return m.Side
	}
	return ""
}

func (m *OrderRequest) GetOrderType() string {
	if m != nil {
		return m.OrderType
	}
	return ""
}

func (m *OrderRequest) GetOrderTemplateID() string {
	if m != nil {
		return m.OrderTemplateID
	}
	return ""
}

func (m *OrderRequest) GetBasePercent() float64 {
	if m != nil {
		return m.BasePercent
	}
	return 0
}

func (m *OrderRequest) GetCurrencyPercent() float64 {
	if m != nil {
		return m.CurrencyPercent
	}
	return 0
}

func (m *OrderRequest) GetConditions() string {
	if m != nil {
		return m.Conditions
	}
	return ""
}

func (m *OrderRequest) GetLimitPrice() float64 {
	if m != nil {
		return m.LimitPrice
	}
	return 0
}

type GetUserPlanRequest struct {
	PlanID   string `protobuf:"bytes,1,opt,name=planID" json:"planID"`
	UserID   string `protobuf:"bytes,2,opt,name=userID" json:"userID"`
	Page     uint32 `protobuf:"varint,3,opt,name=page" json:"page"`
	PageSize uint32 `protobuf:"varint,4,opt,name=pageSize" json:"pageSize"`
}

func (m *GetUserPlanRequest) Reset()                    { *m = GetUserPlanRequest{} }
func (m *GetUserPlanRequest) String() string            { return proto.CompactTextString(m) }
func (*GetUserPlanRequest) ProtoMessage()               {}
func (*GetUserPlanRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *GetUserPlanRequest) GetPlanID() string {
	if m != nil {
		return m.PlanID
	}
	return ""
}

func (m *GetUserPlanRequest) GetUserID() string {
	if m != nil {
		return m.UserID
	}
	return ""
}

func (m *GetUserPlanRequest) GetPage() uint32 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *GetUserPlanRequest) GetPageSize() uint32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

type GetUserPlansRequest struct {
	UserID     string `protobuf:"bytes,1,opt,name=userID" json:"userID"`
	Exchange   string `protobuf:"bytes,2,opt,name=exchange" json:"exchange"`
	MarketName string `protobuf:"bytes,3,opt,name=marketName" json:"marketName"`
	Status     string `protobuf:"bytes,4,opt,name=status" json:"status"`
	Page       uint32 `protobuf:"varint,5,opt,name=page" json:"page"`
	PageSize   uint32 `protobuf:"varint,6,opt,name=pageSize" json:"pageSize"`
}

func (m *GetUserPlansRequest) Reset()                    { *m = GetUserPlansRequest{} }
func (m *GetUserPlansRequest) String() string            { return proto.CompactTextString(m) }
func (*GetUserPlansRequest) ProtoMessage()               {}
func (*GetUserPlansRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *GetUserPlansRequest) GetUserID() string {
	if m != nil {
		return m.UserID
	}
	return ""
}

func (m *GetUserPlansRequest) GetExchange() string {
	if m != nil {
		return m.Exchange
	}
	return ""
}

func (m *GetUserPlansRequest) GetMarketName() string {
	if m != nil {
		return m.MarketName
	}
	return ""
}

func (m *GetUserPlansRequest) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *GetUserPlansRequest) GetPage() uint32 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *GetUserPlansRequest) GetPageSize() uint32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

type DeletePlanRequest struct {
	PlanID string `protobuf:"bytes,1,opt,name=planID" json:"planID"`
	UserID string `protobuf:"bytes,2,opt,name=userID" json:"userID"`
}

func (m *DeletePlanRequest) Reset()                    { *m = DeletePlanRequest{} }
func (m *DeletePlanRequest) String() string            { return proto.CompactTextString(m) }
func (*DeletePlanRequest) ProtoMessage()               {}
func (*DeletePlanRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *DeletePlanRequest) GetPlanID() string {
	if m != nil {
		return m.PlanID
	}
	return ""
}

func (m *DeletePlanRequest) GetUserID() string {
	if m != nil {
		return m.UserID
	}
	return ""
}

type UpdatePlanRequest struct {
	PlanID          string  `protobuf:"bytes,1,opt,name=planID" json:"planID"`
	UserID          string  `protobuf:"bytes,2,opt,name=userID" json:"userID"`
	Status          string  `protobuf:"bytes,3,opt,name=status" json:"status"`
	BaseBalance     float64 `protobuf:"fixed64,4,opt,name=baseBalance" json:"baseBalance"`
	CurrencyBalance float64 `protobuf:"fixed64,5,opt,name=currencyBalance" json:"currencyBalance"`
}

func (m *UpdatePlanRequest) Reset()                    { *m = UpdatePlanRequest{} }
func (m *UpdatePlanRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdatePlanRequest) ProtoMessage()               {}
func (*UpdatePlanRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *UpdatePlanRequest) GetPlanID() string {
	if m != nil {
		return m.PlanID
	}
	return ""
}

func (m *UpdatePlanRequest) GetUserID() string {
	if m != nil {
		return m.UserID
	}
	return ""
}

func (m *UpdatePlanRequest) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *UpdatePlanRequest) GetBaseBalance() float64 {
	if m != nil {
		return m.BaseBalance
	}
	return 0
}

func (m *UpdatePlanRequest) GetCurrencyBalance() float64 {
	if m != nil {
		return m.CurrencyBalance
	}
	return 0
}

// Responses
type Plan struct {
	PlanID             string   `protobuf:"bytes,1,opt,name=planID" json:"planID"`
	PlanTemplateID     string   `protobuf:"bytes,2,opt,name=planTemplateID" json:"planTemplateID"`
	UserID             string   `protobuf:"bytes,3,opt,name=userID" json:"userID"`
	KeyID              string   `protobuf:"bytes,4,opt,name=keyID" json:"keyID"`
	Key                string   `protobuf:"bytes,5,opt,name=key" json:"key"`
	KeySecret          string   `protobuf:"bytes,6,opt,name=keySecret" json:"keySecret"`
	KeyDescription     string   `protobuf:"bytes,7,opt,name=keyDescription" json:"keyDescription"`
	ActiveOrderNumber  uint32   `protobuf:"varint,8,opt,name=activeOrderNumber" json:"activeOrderNumber"`
	Exchange           string   `protobuf:"bytes,9,opt,name=exchange" json:"exchange"`
	ExchangeMarketName string   `protobuf:"bytes,10,opt,name=exchangeMarketName" json:"exchangeMarketName"`
	MarketName         string   `protobuf:"bytes,11,opt,name=marketName" json:"marketName"`
	BaseBalance        float64  `protobuf:"fixed64,12,opt,name=baseBalance" json:"baseBalance"`
	CurrencyBalance    float64  `protobuf:"fixed64,13,opt,name=currencyBalance" json:"currencyBalance"`
	Status             string   `protobuf:"bytes,14,opt,name=status" json:"status"`
	Orders             []*Order `protobuf:"bytes,15,rep,name=orders" json:"orders"`
}

func (m *Plan) Reset()                    { *m = Plan{} }
func (m *Plan) String() string            { return proto.CompactTextString(m) }
func (*Plan) ProtoMessage()               {}
func (*Plan) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *Plan) GetPlanID() string {
	if m != nil {
		return m.PlanID
	}
	return ""
}

func (m *Plan) GetPlanTemplateID() string {
	if m != nil {
		return m.PlanTemplateID
	}
	return ""
}

func (m *Plan) GetUserID() string {
	if m != nil {
		return m.UserID
	}
	return ""
}

func (m *Plan) GetKeyID() string {
	if m != nil {
		return m.KeyID
	}
	return ""
}

func (m *Plan) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *Plan) GetKeySecret() string {
	if m != nil {
		return m.KeySecret
	}
	return ""
}

func (m *Plan) GetKeyDescription() string {
	if m != nil {
		return m.KeyDescription
	}
	return ""
}

func (m *Plan) GetActiveOrderNumber() uint32 {
	if m != nil {
		return m.ActiveOrderNumber
	}
	return 0
}

func (m *Plan) GetExchange() string {
	if m != nil {
		return m.Exchange
	}
	return ""
}

func (m *Plan) GetExchangeMarketName() string {
	if m != nil {
		return m.ExchangeMarketName
	}
	return ""
}

func (m *Plan) GetMarketName() string {
	if m != nil {
		return m.MarketName
	}
	return ""
}

func (m *Plan) GetBaseBalance() float64 {
	if m != nil {
		return m.BaseBalance
	}
	return 0
}

func (m *Plan) GetCurrencyBalance() float64 {
	if m != nil {
		return m.CurrencyBalance
	}
	return 0
}

func (m *Plan) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *Plan) GetOrders() []*Order {
	if m != nil {
		return m.Orders
	}
	return nil
}

type PlanWithPagedOrders struct {
	PlanID             string      `protobuf:"bytes,1,opt,name=planID" json:"planID"`
	PlanTemplateID     string      `protobuf:"bytes,2,opt,name=planTemplateID" json:"planTemplateID"`
	UserID             string      `protobuf:"bytes,3,opt,name=userID" json:"userID"`
	KeyID              string      `protobuf:"bytes,4,opt,name=keyID" json:"keyID"`
	Key                string      `protobuf:"bytes,5,opt,name=key" json:"key"`
	KeySecret          string      `protobuf:"bytes,6,opt,name=keySecret" json:"keySecret"`
	KeyDescription     string      `protobuf:"bytes,7,opt,name=keyDescription" json:"keyDescription"`
	Exchange           string      `protobuf:"bytes,8,opt,name=exchange" json:"exchange"`
	ExchangeMarketName string      `protobuf:"bytes,9,opt,name=exchangeMarketName" json:"exchangeMarketName"`
	MarketName         string      `protobuf:"bytes,10,opt,name=marketName" json:"marketName"`
	BaseBalance        float64     `protobuf:"fixed64,11,opt,name=baseBalance" json:"baseBalance"`
	CurrencyBalance    float64     `protobuf:"fixed64,12,opt,name=currencyBalance" json:"currencyBalance"`
	Status             string      `protobuf:"bytes,13,opt,name=status" json:"status"`
	OrdersPage         *OrdersPage `protobuf:"bytes,14,opt,name=ordersPage" json:"ordersPage"`
}

func (m *PlanWithPagedOrders) Reset()                    { *m = PlanWithPagedOrders{} }
func (m *PlanWithPagedOrders) String() string            { return proto.CompactTextString(m) }
func (*PlanWithPagedOrders) ProtoMessage()               {}
func (*PlanWithPagedOrders) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *PlanWithPagedOrders) GetPlanID() string {
	if m != nil {
		return m.PlanID
	}
	return ""
}

func (m *PlanWithPagedOrders) GetPlanTemplateID() string {
	if m != nil {
		return m.PlanTemplateID
	}
	return ""
}

func (m *PlanWithPagedOrders) GetUserID() string {
	if m != nil {
		return m.UserID
	}
	return ""
}

func (m *PlanWithPagedOrders) GetKeyID() string {
	if m != nil {
		return m.KeyID
	}
	return ""
}

func (m *PlanWithPagedOrders) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *PlanWithPagedOrders) GetKeySecret() string {
	if m != nil {
		return m.KeySecret
	}
	return ""
}

func (m *PlanWithPagedOrders) GetKeyDescription() string {
	if m != nil {
		return m.KeyDescription
	}
	return ""
}

func (m *PlanWithPagedOrders) GetExchange() string {
	if m != nil {
		return m.Exchange
	}
	return ""
}

func (m *PlanWithPagedOrders) GetExchangeMarketName() string {
	if m != nil {
		return m.ExchangeMarketName
	}
	return ""
}

func (m *PlanWithPagedOrders) GetMarketName() string {
	if m != nil {
		return m.MarketName
	}
	return ""
}

func (m *PlanWithPagedOrders) GetBaseBalance() float64 {
	if m != nil {
		return m.BaseBalance
	}
	return 0
}

func (m *PlanWithPagedOrders) GetCurrencyBalance() float64 {
	if m != nil {
		return m.CurrencyBalance
	}
	return 0
}

func (m *PlanWithPagedOrders) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *PlanWithPagedOrders) GetOrdersPage() *OrdersPage {
	if m != nil {
		return m.OrdersPage
	}
	return nil
}

type Order struct {
	OrderID         string  `protobuf:"bytes,1,opt,name=orderID" json:"orderID"`
	Side            string  `protobuf:"bytes,2,opt,name=side" json:"side"`
	OrderTemplateID string  `protobuf:"bytes,3,opt,name=orderTemplateID" json:"orderTemplateID"`
	OrderNumber     uint32  `protobuf:"varint,4,opt,name=orderNumber" json:"orderNumber"`
	OrderType       string  `protobuf:"bytes,5,opt,name=orderType" json:"orderType"`
	LimitPrice      float64 `protobuf:"fixed64,6,opt,name=limitPrice" json:"limitPrice"`
	BasePercent     float64 `protobuf:"fixed64,7,opt,name=basePercent" json:"basePercent"`
	CurrencyPercent float64 `protobuf:"fixed64,8,opt,name=currencyPercent" json:"currencyPercent"`
	Status          string  `protobuf:"bytes,9,opt,name=status" json:"status"`
	Conditions      string  `protobuf:"bytes,10,opt,name=conditions" json:"conditions"`
	Condition       string  `protobuf:"bytes,11,opt,name=condition" json:"condition"`
	NextOrderID     string  `protobuf:"bytes,12,opt,name=nextOrderID" json:"nextOrderID"`
}

func (m *Order) Reset()                    { *m = Order{} }
func (m *Order) String() string            { return proto.CompactTextString(m) }
func (*Order) ProtoMessage()               {}
func (*Order) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *Order) GetOrderID() string {
	if m != nil {
		return m.OrderID
	}
	return ""
}

func (m *Order) GetSide() string {
	if m != nil {
		return m.Side
	}
	return ""
}

func (m *Order) GetOrderTemplateID() string {
	if m != nil {
		return m.OrderTemplateID
	}
	return ""
}

func (m *Order) GetOrderNumber() uint32 {
	if m != nil {
		return m.OrderNumber
	}
	return 0
}

func (m *Order) GetOrderType() string {
	if m != nil {
		return m.OrderType
	}
	return ""
}

func (m *Order) GetLimitPrice() float64 {
	if m != nil {
		return m.LimitPrice
	}
	return 0
}

func (m *Order) GetBasePercent() float64 {
	if m != nil {
		return m.BasePercent
	}
	return 0
}

func (m *Order) GetCurrencyPercent() float64 {
	if m != nil {
		return m.CurrencyPercent
	}
	return 0
}

func (m *Order) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *Order) GetConditions() string {
	if m != nil {
		return m.Conditions
	}
	return ""
}

func (m *Order) GetCondition() string {
	if m != nil {
		return m.Condition
	}
	return ""
}

func (m *Order) GetNextOrderID() string {
	if m != nil {
		return m.NextOrderID
	}
	return ""
}

type PlanData struct {
	Plan *Plan `protobuf:"bytes,1,opt,name=plan" json:"plan"`
}

func (m *PlanData) Reset()                    { *m = PlanData{} }
func (m *PlanData) String() string            { return proto.CompactTextString(m) }
func (*PlanData) ProtoMessage()               {}
func (*PlanData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *PlanData) GetPlan() *Plan {
	if m != nil {
		return m.Plan
	}
	return nil
}

type PlanResponse struct {
	Status  string    `protobuf:"bytes,1,opt,name=status" json:"status"`
	Message string    `protobuf:"bytes,2,opt,name=message" json:"message"`
	Data    *PlanData `protobuf:"bytes,3,opt,name=data" json:"data"`
}

func (m *PlanResponse) Reset()                    { *m = PlanResponse{} }
func (m *PlanResponse) String() string            { return proto.CompactTextString(m) }
func (*PlanResponse) ProtoMessage()               {}
func (*PlanResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *PlanResponse) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *PlanResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *PlanResponse) GetData() *PlanData {
	if m != nil {
		return m.Data
	}
	return nil
}

type PlanWithPagedOrdersResponse struct {
	Status  string               `protobuf:"bytes,1,opt,name=status" json:"status"`
	Message string               `protobuf:"bytes,2,opt,name=message" json:"message"`
	Data    *PlanWithPagedOrders `protobuf:"bytes,3,opt,name=data" json:"data"`
}

func (m *PlanWithPagedOrdersResponse) Reset()                    { *m = PlanWithPagedOrdersResponse{} }
func (m *PlanWithPagedOrdersResponse) String() string            { return proto.CompactTextString(m) }
func (*PlanWithPagedOrdersResponse) ProtoMessage()               {}
func (*PlanWithPagedOrdersResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *PlanWithPagedOrdersResponse) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *PlanWithPagedOrdersResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *PlanWithPagedOrdersResponse) GetData() *PlanWithPagedOrders {
	if m != nil {
		return m.Data
	}
	return nil
}

type PlansPageResponse struct {
	Status  string     `protobuf:"bytes,1,opt,name=status" json:"status"`
	Message string     `protobuf:"bytes,2,opt,name=message" json:"message"`
	Data    *PlansPage `protobuf:"bytes,3,opt,name=data" json:"data"`
}

func (m *PlansPageResponse) Reset()                    { *m = PlansPageResponse{} }
func (m *PlansPageResponse) String() string            { return proto.CompactTextString(m) }
func (*PlansPageResponse) ProtoMessage()               {}
func (*PlansPageResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *PlansPageResponse) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *PlansPageResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *PlansPageResponse) GetData() *PlansPage {
	if m != nil {
		return m.Data
	}
	return nil
}

type OrdersPage struct {
	Page     uint32   `protobuf:"varint,1,opt,name=page" json:"page"`
	PageSize uint32   `protobuf:"varint,2,opt,name=pageSize" json:"pageSize"`
	Total    uint32   `protobuf:"varint,3,opt,name=total" json:"total"`
	Orders   []*Order `protobuf:"bytes,4,rep,name=orders" json:"orders"`
}

func (m *OrdersPage) Reset()                    { *m = OrdersPage{} }
func (m *OrdersPage) String() string            { return proto.CompactTextString(m) }
func (*OrdersPage) ProtoMessage()               {}
func (*OrdersPage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *OrdersPage) GetPage() uint32 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *OrdersPage) GetPageSize() uint32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *OrdersPage) GetTotal() uint32 {
	if m != nil {
		return m.Total
	}
	return 0
}

func (m *OrdersPage) GetOrders() []*Order {
	if m != nil {
		return m.Orders
	}
	return nil
}

type PlansPage struct {
	Page     uint32  `protobuf:"varint,1,opt,name=page" json:"page"`
	PageSize uint32  `protobuf:"varint,2,opt,name=pageSize" json:"pageSize"`
	Total    uint32  `protobuf:"varint,3,opt,name=total" json:"total"`
	Plans    []*Plan `protobuf:"bytes,4,rep,name=plans" json:"plans"`
}

func (m *PlansPage) Reset()                    { *m = PlansPage{} }
func (m *PlansPage) String() string            { return proto.CompactTextString(m) }
func (*PlansPage) ProtoMessage()               {}
func (*PlansPage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *PlansPage) GetPage() uint32 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *PlansPage) GetPageSize() uint32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *PlansPage) GetTotal() uint32 {
	if m != nil {
		return m.Total
	}
	return 0
}

func (m *PlansPage) GetPlans() []*Plan {
	if m != nil {
		return m.Plans
	}
	return nil
}

func init() {
	proto.RegisterType((*PlanRequest)(nil), "fomo.plans.PlanRequest")
	proto.RegisterType((*OrderRequest)(nil), "fomo.plans.OrderRequest")
	proto.RegisterType((*GetUserPlanRequest)(nil), "fomo.plans.GetUserPlanRequest")
	proto.RegisterType((*GetUserPlansRequest)(nil), "fomo.plans.GetUserPlansRequest")
	proto.RegisterType((*DeletePlanRequest)(nil), "fomo.plans.DeletePlanRequest")
	proto.RegisterType((*UpdatePlanRequest)(nil), "fomo.plans.UpdatePlanRequest")
	proto.RegisterType((*Plan)(nil), "fomo.plans.Plan")
	proto.RegisterType((*PlanWithPagedOrders)(nil), "fomo.plans.PlanWithPagedOrders")
	proto.RegisterType((*Order)(nil), "fomo.plans.Order")
	proto.RegisterType((*PlanData)(nil), "fomo.plans.PlanData")
	proto.RegisterType((*PlanResponse)(nil), "fomo.plans.PlanResponse")
	proto.RegisterType((*PlanWithPagedOrdersResponse)(nil), "fomo.plans.PlanWithPagedOrdersResponse")
	proto.RegisterType((*PlansPageResponse)(nil), "fomo.plans.PlansPageResponse")
	proto.RegisterType((*OrdersPage)(nil), "fomo.plans.OrdersPage")
	proto.RegisterType((*PlansPage)(nil), "fomo.plans.PlansPage")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for PlanService service

type PlanServiceClient interface {
	AddPlan(ctx context.Context, in *PlanRequest, opts ...client.CallOption) (*PlanResponse, error)
	GetUserPlan(ctx context.Context, in *GetUserPlanRequest, opts ...client.CallOption) (*PlanWithPagedOrdersResponse, error)
	GetUserPlans(ctx context.Context, in *GetUserPlansRequest, opts ...client.CallOption) (*PlansPageResponse, error)
	DeletePlan(ctx context.Context, in *DeletePlanRequest, opts ...client.CallOption) (*PlanResponse, error)
	UpdatePlan(ctx context.Context, in *UpdatePlanRequest, opts ...client.CallOption) (*PlanResponse, error)
}

type planServiceClient struct {
	c           client.Client
	serviceName string
}

func NewPlanServiceClient(serviceName string, c client.Client) PlanServiceClient {
	if c == nil {
		c = client.NewClient()
	}
	if len(serviceName) == 0 {
		serviceName = "fomo.plans"
	}
	return &planServiceClient{
		c:           c,
		serviceName: serviceName,
	}
}

func (c *planServiceClient) AddPlan(ctx context.Context, in *PlanRequest, opts ...client.CallOption) (*PlanResponse, error) {
	req := c.c.NewRequest(c.serviceName, "PlanService.AddPlan", in)
	out := new(PlanResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *planServiceClient) GetUserPlan(ctx context.Context, in *GetUserPlanRequest, opts ...client.CallOption) (*PlanWithPagedOrdersResponse, error) {
	req := c.c.NewRequest(c.serviceName, "PlanService.GetUserPlan", in)
	out := new(PlanWithPagedOrdersResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *planServiceClient) GetUserPlans(ctx context.Context, in *GetUserPlansRequest, opts ...client.CallOption) (*PlansPageResponse, error) {
	req := c.c.NewRequest(c.serviceName, "PlanService.GetUserPlans", in)
	out := new(PlansPageResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *planServiceClient) DeletePlan(ctx context.Context, in *DeletePlanRequest, opts ...client.CallOption) (*PlanResponse, error) {
	req := c.c.NewRequest(c.serviceName, "PlanService.DeletePlan", in)
	out := new(PlanResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *planServiceClient) UpdatePlan(ctx context.Context, in *UpdatePlanRequest, opts ...client.CallOption) (*PlanResponse, error) {
	req := c.c.NewRequest(c.serviceName, "PlanService.UpdatePlan", in)
	out := new(PlanResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for PlanService service

type PlanServiceHandler interface {
	AddPlan(context.Context, *PlanRequest, *PlanResponse) error
	GetUserPlan(context.Context, *GetUserPlanRequest, *PlanWithPagedOrdersResponse) error
	GetUserPlans(context.Context, *GetUserPlansRequest, *PlansPageResponse) error
	DeletePlan(context.Context, *DeletePlanRequest, *PlanResponse) error
	UpdatePlan(context.Context, *UpdatePlanRequest, *PlanResponse) error
}

func RegisterPlanServiceHandler(s server.Server, hdlr PlanServiceHandler, opts ...server.HandlerOption) {
	s.Handle(s.NewHandler(&PlanService{hdlr}, opts...))
}

type PlanService struct {
	PlanServiceHandler
}

func (h *PlanService) AddPlan(ctx context.Context, in *PlanRequest, out *PlanResponse) error {
	return h.PlanServiceHandler.AddPlan(ctx, in, out)
}

func (h *PlanService) GetUserPlan(ctx context.Context, in *GetUserPlanRequest, out *PlanWithPagedOrdersResponse) error {
	return h.PlanServiceHandler.GetUserPlan(ctx, in, out)
}

func (h *PlanService) GetUserPlans(ctx context.Context, in *GetUserPlansRequest, out *PlansPageResponse) error {
	return h.PlanServiceHandler.GetUserPlans(ctx, in, out)
}

func (h *PlanService) DeletePlan(ctx context.Context, in *DeletePlanRequest, out *PlanResponse) error {
	return h.PlanServiceHandler.DeletePlan(ctx, in, out)
}

func (h *PlanService) UpdatePlan(ctx context.Context, in *UpdatePlanRequest, out *PlanResponse) error {
	return h.PlanServiceHandler.UpdatePlan(ctx, in, out)
}

func init() { proto.RegisterFile("proto/plan/plan.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 986 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xdc, 0x57, 0x4f, 0x8f, 0xdb, 0x54,
	0x10, 0xc7, 0xb1, 0x93, 0x4d, 0xc6, 0x49, 0xdb, 0xbc, 0xfe, 0xc1, 0x5a, 0xca, 0x76, 0x65, 0xa1,
	0x92, 0x4a, 0x28, 0x54, 0xa9, 0xc4, 0x11, 0x09, 0x88, 0xb4, 0xda, 0x03, 0x6d, 0xe4, 0x6d, 0x05,
	0xd7, 0xb7, 0xce, 0xb0, 0x35, 0x49, 0x6c, 0x63, 0xbf, 0x54, 0x0d, 0x12, 0x27, 0xb8, 0xf1, 0x41,
	0x38, 0xf3, 0x41, 0xf8, 0x14, 0x7c, 0x06, 0x38, 0xa3, 0x37, 0xcf, 0x7f, 0x9e, 0xed, 0x64, 0x13,
	0x58, 0x4e, 0xbd, 0xb4, 0x9e, 0x3f, 0xfb, 0x66, 0xde, 0xfc, 0x7e, 0x6f, 0x66, 0x02, 0xf7, 0xe3,
	0x24, 0x12, 0xd1, 0xa7, 0xf1, 0x92, 0x87, 0xf4, 0xcf, 0x98, 0x64, 0x06, 0xdf, 0x45, 0xab, 0x68,
	0x2c, 0x15, 0xa9, 0xfb, 0x47, 0x0b, 0xec, 0xd9, 0x92, 0x87, 0x1e, 0xfe, 0xb0, 0xc6, 0x54, 0xb0,
	0x07, 0xd0, 0x91, 0x86, 0xf3, 0xa9, 0x63, 0x9c, 0x1a, 0xa3, 0x9e, 0x97, 0x49, 0x52, 0xbf, 0x4e,
	0x31, 0x39, 0x9f, 0x3a, 0x2d, 0xa5, 0x57, 0x12, 0xbb, 0x07, 0xed, 0x05, 0x6e, 0xce, 0xa7, 0x8e,
	0x49, 0x6a, 0x25, 0xb0, 0xc7, 0x70, 0x4b, 0xfe, 0xdd, 0x4b, 0x5c, 0xc5, 0x4b, 0x2e, 0xf0, 0x7c,
	0xea, 0x58, 0x64, 0xae, 0x69, 0xd9, 0x31, 0x74, 0xf1, 0xad, 0xff, 0x9a, 0x87, 0x57, 0xe8, 0xb4,
	0xc9, 0xa3, 0x90, 0xd9, 0x09, 0xc0, 0x8a, 0x27, 0x0b, 0x14, 0xcf, 0xf9, 0x0a, 0x9d, 0x0e, 0x59,
	0x35, 0x0d, 0x3b, 0x05, 0xfb, 0x92, 0xa7, 0xf8, 0x25, 0x5f, 0xf2, 0xd0, 0x47, 0xe7, 0xe8, 0xd4,
	0x18, 0x19, 0x9e, 0xae, 0x62, 0x23, 0xb8, 0xed, 0xaf, 0x93, 0x04, 0x43, 0x7f, 0x93, 0x7b, 0x75,
	0xc9, 0xab, 0xae, 0x96, 0xb7, 0x4b, 0x05, 0x17, 0xeb, 0xd4, 0xe9, 0xa9, 0xdb, 0x29, 0x89, 0x3d,
	0x85, 0x4e, 0x94, 0xcc, 0x31, 0x49, 0x1d, 0x38, 0x35, 0x47, 0xf6, 0xc4, 0x19, 0x97, 0xa5, 0x1b,
	0xbf, 0x90, 0x96, 0xac, 0x6e, 0x5e, 0xe6, 0xe7, 0xfe, 0x6d, 0x40, 0x5f, 0x37, 0x30, 0x06, 0x56,
	0x1a, 0xcc, 0x31, 0x2b, 0x27, 0x7d, 0xb3, 0x87, 0xd0, 0x23, 0xf7, 0x97, 0x9b, 0x18, 0xb3, 0x7a,
	0x96, 0x0a, 0x99, 0xb6, 0x12, 0xca, 0xea, 0xa9, 0xe2, 0xd6, 0xd5, 0x79, 0x09, 0x66, 0x98, 0xf8,
	0x18, 0x0a, 0xaa, 0x71, 0x56, 0x82, 0x4c, 0xa5, 0x97, 0x20, 0xf7, 0x6a, 0x57, 0x4b, 0x90, 0x7b,
	0x9e, 0x00, 0xf8, 0x51, 0x38, 0x0f, 0x44, 0x10, 0x85, 0x69, 0x5e, 0xee, 0x52, 0x23, 0xed, 0xcb,
	0x60, 0x15, 0x88, 0x59, 0x12, 0x14, 0xd5, 0xd6, 0x34, 0xae, 0x00, 0x76, 0x86, 0xe2, 0x55, 0x8a,
	0xc9, 0x4d, 0xe8, 0xc4, 0xc0, 0x8a, 0xf9, 0x15, 0xd2, 0x85, 0x07, 0x1e, 0x7d, 0x4b, 0x92, 0xc8,
	0xff, 0x2f, 0x82, 0x1f, 0x91, 0xae, 0x38, 0xf0, 0x0a, 0xd9, 0xfd, 0xdd, 0x80, 0xbb, 0x5a, 0xd8,
	0x54, 0x8b, 0x9b, 0x9d, 0x6f, 0x54, 0xce, 0xd7, 0x09, 0xd7, 0xba, 0x96, 0x70, 0x66, 0x83, 0x70,
	0x25, 0x49, 0xac, 0x0a, 0x49, 0xf2, 0x9c, 0xdb, 0x3b, 0x72, 0xee, 0xd4, 0x72, 0xfe, 0x0a, 0x86,
	0x53, 0x5c, 0xa2, 0xc0, 0x1b, 0x14, 0xca, 0xfd, 0xcd, 0x80, 0xe1, 0xab, 0x78, 0xce, 0x6f, 0x74,
	0x8a, 0x76, 0x25, 0xb3, 0x72, 0xa5, 0xda, 0xdb, 0xb2, 0x0e, 0x7a, 0x5b, 0xed, 0xad, 0x6f, 0xcb,
	0xfd, 0xcb, 0x04, 0x4b, 0xe6, 0xb8, 0x33, 0xb9, 0x66, 0xb3, 0x68, 0x6d, 0x6d, 0x16, 0xe5, 0x25,
	0xcc, 0xed, 0x2d, 0xc8, 0xd2, 0x5b, 0xd0, 0x1d, 0x30, 0x17, 0xb8, 0xc9, 0xba, 0x8a, 0xfc, 0x94,
	0xaf, 0x6e, 0x81, 0x9b, 0x0b, 0xf4, 0x13, 0x14, 0x19, 0xc1, 0x4b, 0x85, 0xcc, 0x62, 0x81, 0x9b,
	0x29, 0xa6, 0x7e, 0x12, 0xc4, 0x92, 0xf2, 0xc4, 0xf1, 0x9e, 0x57, 0xd3, 0xb2, 0x4f, 0x60, 0xc8,
	0x7d, 0x11, 0xbc, 0x41, 0x7a, 0xe5, 0xcf, 0xd7, 0xab, 0x4b, 0x4c, 0xa8, 0xad, 0x0c, 0xbc, 0xa6,
	0xa1, 0xc2, 0xb7, 0x5e, 0x8d, 0x6f, 0x63, 0x60, 0xf9, 0xf7, 0xd7, 0x25, 0xef, 0x80, 0xbc, 0xb6,
	0x58, 0x6a, 0xfc, 0xb4, 0xf7, 0x35, 0xc4, 0xfe, 0x41, 0xa0, 0x0d, 0xf6, 0x35, 0xc4, 0x5b, 0x15,
	0x62, 0x3c, 0x29, 0x1a, 0xe2, 0x6d, 0x6a, 0x88, 0xc3, 0x66, 0x43, 0xcc, 0x3b, 0xe1, 0x9f, 0x26,
	0xdc, 0x95, 0xb8, 0x7f, 0x13, 0x88, 0xd7, 0x33, 0x7e, 0x85, 0x73, 0x32, 0xa7, 0xef, 0x08, 0x0d,
	0x74, 0x60, 0xbb, 0x07, 0x01, 0xdb, 0x3b, 0x10, 0x58, 0xd8, 0x07, 0xac, 0x7d, 0x10, 0xb0, 0xfd,
	0x7d, 0xc0, 0x0e, 0x2a, 0xc0, 0x7e, 0x06, 0xa0, 0x70, 0x93, 0x50, 0x11, 0xe8, 0xf6, 0xe4, 0x41,
	0x03, 0x5c, 0xb2, 0x7a, 0x9a, 0xa7, 0xfb, 0xb3, 0x09, 0x6d, 0x32, 0x31, 0x07, 0x8e, 0x48, 0x5f,
	0x00, 0x9b, 0x8b, 0xc5, 0x08, 0x6c, 0x69, 0x23, 0xf0, 0x5f, 0x0d, 0xb9, 0x48, 0x7b, 0x6a, 0x6a,
	0x02, 0xe8, 0xaa, 0xea, 0x38, 0x6d, 0xd7, 0xc7, 0x69, 0x75, 0x70, 0x75, 0xea, 0x83, 0xab, 0x3e,
	0x44, 0x8f, 0x0e, 0x1a, 0xa2, 0xdd, 0xed, 0x43, 0x74, 0xd7, 0x1e, 0x51, 0x1d, 0xae, 0xd0, 0x18,
	0xae, 0x0f, 0xa1, 0x57, 0x48, 0xd9, 0xcb, 0x2e, 0x15, 0x32, 0xc3, 0x10, 0xdf, 0x8a, 0x17, 0x59,
	0x75, 0xfb, 0x64, 0xd7, 0x55, 0xee, 0x53, 0xe8, 0xca, 0xa7, 0x36, 0xe5, 0x82, 0xb3, 0x8f, 0xc0,
	0x92, 0x88, 0x11, 0x08, 0xf6, 0xe4, 0x8e, 0x8e, 0x21, 0x8d, 0x0a, 0xb2, 0xba, 0xdf, 0x43, 0x5f,
	0x0d, 0x8e, 0x34, 0x8e, 0xc2, 0x54, 0xe7, 0x85, 0x51, 0xc9, 0xdc, 0x81, 0xa3, 0x15, 0xa6, 0x29,
	0x2f, 0xe6, 0x65, 0x2e, 0xb2, 0x11, 0x58, 0x73, 0x2e, 0x38, 0xc1, 0x66, 0x4f, 0xee, 0xd5, 0xe3,
	0xc8, 0x5c, 0x3c, 0xf2, 0x70, 0x7f, 0x31, 0xe0, 0x83, 0x2d, 0x9d, 0xe0, 0x06, 0xb1, 0x9f, 0x55,
	0x62, 0x3f, 0xaa, 0xc7, 0xae, 0x07, 0x52, 0x69, 0xc4, 0x30, 0xa4, 0x1d, 0x81, 0x38, 0xfc, 0xdf,
	0x63, 0x3f, 0xa9, 0xc4, 0xbe, 0x5f, 0x8f, 0xad, 0x8e, 0x57, 0x11, 0x7f, 0x02, 0x28, 0x9f, 0x4d,
	0xb1, 0x27, 0x18, 0x3b, 0xf6, 0x84, 0x56, 0x75, 0x4f, 0x90, 0x0d, 0x4d, 0x44, 0x82, 0x2f, 0xb3,
	0x65, 0x48, 0x09, 0x5a, 0x07, 0xb6, 0xf6, 0x75, 0xe0, 0x0d, 0xf4, 0x8a, 0x8c, 0xfe, 0xa7, 0xe8,
	0x8f, 0xa1, 0x4d, 0x91, 0xb2, 0xe0, 0x4d, 0x76, 0x29, 0xf3, 0xe4, 0x57, 0x53, 0xfd, 0xac, 0xb8,
	0xc0, 0xe4, 0x8d, 0x7c, 0x64, 0x9f, 0xc3, 0xd1, 0x17, 0xf3, 0x39, 0xad, 0x01, 0xef, 0x37, 0xfe,
	0x46, 0x2d, 0x2f, 0xc7, 0x4e, 0xd3, 0xa0, 0x40, 0x72, 0xdf, 0x63, 0xdf, 0x82, 0xad, 0xad, 0x79,
	0xec, 0x44, 0x77, 0x6d, 0xae, 0x9d, 0xc7, 0x1f, 0xef, 0x63, 0x44, 0x79, 0xf2, 0x0c, 0xfa, 0xfa,
	0x02, 0xc9, 0x1e, 0xed, 0x38, 0x3a, 0x5f, 0x2d, 0x8f, 0x3f, 0xdc, 0x8e, 0x78, 0x79, 0xe2, 0x19,
	0x40, 0xb9, 0xdf, 0xb1, 0x8a, 0x7b, 0x63, 0xef, 0xbb, 0xf6, 0xd2, 0x67, 0x00, 0xe5, 0x8a, 0x57,
	0x3d, 0xa8, 0xb1, 0xfa, 0x5d, 0x77, 0xd0, 0x65, 0x87, 0x7e, 0xf7, 0x3d, 0xfb, 0x27, 0x00, 0x00,
	0xff, 0xff, 0xb4, 0xc4, 0x34, 0xe4, 0x10, 0x0e, 0x00, 0x00,
}
