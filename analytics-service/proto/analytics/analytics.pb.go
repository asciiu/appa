// Code generated by protoc-gen-go. DO NOT EDIT.
// source: github.com/asciiu/gomo/analytics-service/proto/analytics/analytics.proto

/*
Package analytics is a generated protocol buffer package.

It is generated from these files:
	github.com/asciiu/gomo/analytics-service/proto/analytics/analytics.proto

It has these top-level messages:
	ConversionRequest
	MarketPrice
	ConversionAmount
	ConversionResponse
*/
package analytics

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "golang.org/x/net/context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Requests
type ConversionRequest struct {
	Exchange    string  `protobuf:"bytes,1,opt,name=exchange" json:"exchange"`
	From        string  `protobuf:"bytes,2,opt,name=from" json:"from"`
	To          string  `protobuf:"bytes,3,opt,name=to" json:"to"`
	FromAmount  float64 `protobuf:"fixed64,4,opt,name=fromAmount" json:"fromAmount"`
	AtTimestamp string  `protobuf:"bytes,5,opt,name=atTimestamp" json:"atTimestamp"`
}

func (m *ConversionRequest) Reset()                    { *m = ConversionRequest{} }
func (m *ConversionRequest) String() string            { return proto.CompactTextString(m) }
func (*ConversionRequest) ProtoMessage()               {}
func (*ConversionRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *ConversionRequest) GetExchange() string {
	if m != nil {
		return m.Exchange
	}
	return ""
}

func (m *ConversionRequest) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

func (m *ConversionRequest) GetTo() string {
	if m != nil {
		return m.To
	}
	return ""
}

func (m *ConversionRequest) GetFromAmount() float64 {
	if m != nil {
		return m.FromAmount
	}
	return 0
}

func (m *ConversionRequest) GetAtTimestamp() string {
	if m != nil {
		return m.AtTimestamp
	}
	return ""
}

// Responses
type MarketPrice struct {
	Exchange      string  `protobuf:"bytes,1,opt,name=exchange" json:"exchange"`
	MarketName    string  `protobuf:"bytes,2,opt,name=marketName" json:"marketName"`
	ClosedAtTime  string  `protobuf:"bytes,3,opt,name=closedAtTime" json:"closedAtTime"`
	ClosedAtPrice float64 `protobuf:"fixed64,4,opt,name=closedAtPrice" json:"closedAtPrice"`
}

func (m *MarketPrice) Reset()                    { *m = MarketPrice{} }
func (m *MarketPrice) String() string            { return proto.CompactTextString(m) }
func (*MarketPrice) ProtoMessage()               {}
func (*MarketPrice) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *MarketPrice) GetExchange() string {
	if m != nil {
		return m.Exchange
	}
	return ""
}

func (m *MarketPrice) GetMarketName() string {
	if m != nil {
		return m.MarketName
	}
	return ""
}

func (m *MarketPrice) GetClosedAtTime() string {
	if m != nil {
		return m.ClosedAtTime
	}
	return ""
}

func (m *MarketPrice) GetClosedAtPrice() float64 {
	if m != nil {
		return m.ClosedAtPrice
	}
	return 0
}

type ConversionAmount struct {
	ConvertedAmount float64 `protobuf:"fixed64,1,opt,name=convertedAmount" json:"convertedAmount"`
}

func (m *ConversionAmount) Reset()                    { *m = ConversionAmount{} }
func (m *ConversionAmount) String() string            { return proto.CompactTextString(m) }
func (*ConversionAmount) ProtoMessage()               {}
func (*ConversionAmount) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *ConversionAmount) GetConvertedAmount() float64 {
	if m != nil {
		return m.ConvertedAmount
	}
	return 0
}

type ConversionResponse struct {
	Status  string            `protobuf:"bytes,1,opt,name=status" json:"status"`
	Message string            `protobuf:"bytes,2,opt,name=message" json:"message"`
	Data    *ConversionAmount `protobuf:"bytes,3,opt,name=data" json:"data"`
}

func (m *ConversionResponse) Reset()                    { *m = ConversionResponse{} }
func (m *ConversionResponse) String() string            { return proto.CompactTextString(m) }
func (*ConversionResponse) ProtoMessage()               {}
func (*ConversionResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *ConversionResponse) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *ConversionResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *ConversionResponse) GetData() *ConversionAmount {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterType((*ConversionRequest)(nil), "analytics.ConversionRequest")
	proto.RegisterType((*MarketPrice)(nil), "analytics.MarketPrice")
	proto.RegisterType((*ConversionAmount)(nil), "analytics.ConversionAmount")
	proto.RegisterType((*ConversionResponse)(nil), "analytics.ConversionResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for AnalyticsService service

type AnalyticsServiceClient interface {
	ConvertCurrencyToCurrency(ctx context.Context, in *ConversionRequest, opts ...client.CallOption) (*ConversionResponse, error)
}

type analyticsServiceClient struct {
	c           client.Client
	serviceName string
}

func NewAnalyticsServiceClient(serviceName string, c client.Client) AnalyticsServiceClient {
	if c == nil {
		c = client.NewClient()
	}
	if len(serviceName) == 0 {
		serviceName = "analytics"
	}
	return &analyticsServiceClient{
		c:           c,
		serviceName: serviceName,
	}
}

func (c *analyticsServiceClient) ConvertCurrencyToCurrency(ctx context.Context, in *ConversionRequest, opts ...client.CallOption) (*ConversionResponse, error) {
	req := c.c.NewRequest(c.serviceName, "AnalyticsService.ConvertCurrencyToCurrency", in)
	out := new(ConversionResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for AnalyticsService service

type AnalyticsServiceHandler interface {
	ConvertCurrencyToCurrency(context.Context, *ConversionRequest, *ConversionResponse) error
}

func RegisterAnalyticsServiceHandler(s server.Server, hdlr AnalyticsServiceHandler, opts ...server.HandlerOption) {
	s.Handle(s.NewHandler(&AnalyticsService{hdlr}, opts...))
}

type AnalyticsService struct {
	AnalyticsServiceHandler
}

func (h *AnalyticsService) ConvertCurrencyToCurrency(ctx context.Context, in *ConversionRequest, out *ConversionResponse) error {
	return h.AnalyticsServiceHandler.ConvertCurrencyToCurrency(ctx, in, out)
}

func init() {
	proto.RegisterFile("github.com/asciiu/gomo/analytics-service/proto/analytics/analytics.proto", fileDescriptor0)
}

var fileDescriptor0 = []byte{
	// 363 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x92, 0x4f, 0x6f, 0x1a, 0x31,
	0x10, 0xc5, 0xbb, 0x94, 0xd2, 0x32, 0xf4, 0x0f, 0xf5, 0xa1, 0xda, 0xd2, 0x06, 0xa1, 0x55, 0x0e,
	0x5c, 0xc2, 0x4a, 0xe4, 0x9a, 0x0b, 0xe2, 0x92, 0x4b, 0xa2, 0x68, 0xc3, 0x29, 0x37, 0x63, 0x26,
	0x8b, 0x15, 0x6c, 0x13, 0x7b, 0x96, 0x84, 0xcf, 0x11, 0xe5, 0xfb, 0x46, 0x31, 0x5e, 0x58, 0x50,
	0x92, 0xdb, 0xcc, 0xcf, 0xcf, 0xeb, 0xf7, 0x66, 0x07, 0xce, 0x73, 0x49, 0xf3, 0x62, 0x3a, 0x10,
	0x46, 0xa5, 0xdc, 0x09, 0x29, 0x8b, 0x34, 0x37, 0xca, 0xa4, 0x5c, 0xf3, 0xc5, 0x9a, 0xa4, 0x70,
	0x27, 0x0e, 0xed, 0x4a, 0x0a, 0x4c, 0x97, 0xd6, 0x50, 0x85, 0xef, 0xaa, 0x81, 0x3f, 0x61, 0xcd,
	0x2d, 0x48, 0x9e, 0x23, 0xf8, 0x3d, 0x36, 0x7a, 0x85, 0xd6, 0x49, 0xa3, 0x33, 0xbc, 0x2f, 0xd0,
	0x11, 0xeb, 0xc0, 0x37, 0x7c, 0x14, 0x73, 0xae, 0x73, 0x8c, 0xa3, 0x5e, 0xd4, 0x6f, 0x66, 0xdb,
	0x9e, 0x31, 0xa8, 0xdf, 0x5a, 0xa3, 0xe2, 0x9a, 0xe7, 0xbe, 0x66, 0x3f, 0xa1, 0x46, 0x26, 0xfe,
	0xec, 0x49, 0x8d, 0x0c, 0xeb, 0x02, 0xbc, 0xf2, 0x91, 0x32, 0x85, 0xa6, 0xb8, 0xde, 0x8b, 0xfa,
	0x51, 0x56, 0x21, 0xac, 0x07, 0x2d, 0x4e, 0x13, 0xa9, 0xd0, 0x11, 0x57, 0xcb, 0xf8, 0x8b, 0xbf,
	0x58, 0x45, 0xc9, 0x53, 0x04, 0xad, 0x0b, 0x6e, 0xef, 0x90, 0xae, 0xac, 0x14, 0xf8, 0xa1, 0xa3,
	0x2e, 0x80, 0xf2, 0xd2, 0x4b, 0xae, 0x30, 0xf8, 0xaa, 0x10, 0x96, 0xc0, 0x77, 0xb1, 0x30, 0x0e,
	0x67, 0x23, 0xff, 0x40, 0xf0, 0xb9, 0xc7, 0xd8, 0x31, 0xfc, 0x28, 0x7b, 0xff, 0x60, 0x30, 0xbd,
	0x0f, 0x93, 0x33, 0x68, 0xef, 0x86, 0x15, 0xb2, 0xf4, 0xe1, 0x97, 0xf0, 0x8c, 0x70, 0x16, 0x02,
	0x47, 0xfe, 0xee, 0x21, 0x4e, 0x1e, 0x80, 0x55, 0x47, 0xed, 0x96, 0x46, 0x3b, 0x64, 0x7f, 0xa0,
	0xe1, 0x88, 0x53, 0xe1, 0x42, 0xae, 0xd0, 0xb1, 0x18, 0xbe, 0x2a, 0x74, 0x8e, 0xe7, 0x65, 0xa4,
	0xb2, 0x65, 0x29, 0xd4, 0x67, 0x9c, 0xb8, 0xcf, 0xd1, 0x1a, 0xfe, 0x1b, 0xec, 0x7e, 0xef, 0xa1,
	0xb9, 0xcc, 0x0b, 0x87, 0x1a, 0xda, 0xa3, 0x52, 0x73, 0xbd, 0xd9, 0x11, 0x76, 0x03, 0x7f, 0x37,
	0x6a, 0x1a, 0x17, 0xd6, 0xa2, 0x16, 0xeb, 0x89, 0x29, 0x2b, 0xf6, 0xff, 0xcd, 0x6f, 0x86, 0xed,
	0xe8, 0x1c, 0xbd, 0x73, 0xba, 0x09, 0x94, 0x7c, 0x9a, 0x36, 0xfc, 0x9a, 0x9d, 0xbe, 0x04, 0x00,
	0x00, 0xff, 0xff, 0x13, 0xab, 0x70, 0x73, 0xb2, 0x02, 0x00, 0x00,
}
