// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/user/user.proto

/*
Package go_micro_srv_user is a generated protocol buffer package.

It is generated from these files:
	proto/user/user.proto

It has these top-level messages:
	ChangePasswordRequest
	CreateUserRequest
	DeleteUserRequest
	GetUserInfoRequest
	UpdateUserRequest
	Response
	User
	UserData
	UserResponse
*/
package go_micro_srv_user

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "golang.org/x/net/context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Requests
type ChangePasswordRequest struct {
	UserID      string `protobuf:"bytes,1,opt,name=userID" json:"userID,omitempty"`
	NewPassword string `protobuf:"bytes,2,opt,name=newPassword" json:"newPassword,omitempty"`
	OldPassword string `protobuf:"bytes,3,opt,name=oldPassword" json:"oldPassword,omitempty"`
}

func (m *ChangePasswordRequest) Reset()                    { *m = ChangePasswordRequest{} }
func (m *ChangePasswordRequest) String() string            { return proto.CompactTextString(m) }
func (*ChangePasswordRequest) ProtoMessage()               {}
func (*ChangePasswordRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *ChangePasswordRequest) GetUserID() string {
	if m != nil {
		return m.UserID
	}
	return ""
}

func (m *ChangePasswordRequest) GetNewPassword() string {
	if m != nil {
		return m.NewPassword
	}
	return ""
}

func (m *ChangePasswordRequest) GetOldPassword() string {
	if m != nil {
		return m.OldPassword
	}
	return ""
}

type CreateUserRequest struct {
	First    string `protobuf:"bytes,1,opt,name=first" json:"first,omitempty"`
	Last     string `protobuf:"bytes,2,opt,name=last" json:"last,omitempty"`
	Email    string `protobuf:"bytes,3,opt,name=email" json:"email,omitempty"`
	Password string `protobuf:"bytes,4,opt,name=password" json:"password,omitempty"`
}

func (m *CreateUserRequest) Reset()                    { *m = CreateUserRequest{} }
func (m *CreateUserRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateUserRequest) ProtoMessage()               {}
func (*CreateUserRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *CreateUserRequest) GetFirst() string {
	if m != nil {
		return m.First
	}
	return ""
}

func (m *CreateUserRequest) GetLast() string {
	if m != nil {
		return m.Last
	}
	return ""
}

func (m *CreateUserRequest) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *CreateUserRequest) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

type DeleteUserRequest struct {
	UserID string `protobuf:"bytes,1,opt,name=userID" json:"userID,omitempty"`
	Hard   bool   `protobuf:"varint,2,opt,name=hard" json:"hard,omitempty"`
}

func (m *DeleteUserRequest) Reset()                    { *m = DeleteUserRequest{} }
func (m *DeleteUserRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteUserRequest) ProtoMessage()               {}
func (*DeleteUserRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *DeleteUserRequest) GetUserID() string {
	if m != nil {
		return m.UserID
	}
	return ""
}

func (m *DeleteUserRequest) GetHard() bool {
	if m != nil {
		return m.Hard
	}
	return false
}

type GetUserInfoRequest struct {
	UserID string `protobuf:"bytes,1,opt,name=userID" json:"userID,omitempty"`
}

func (m *GetUserInfoRequest) Reset()                    { *m = GetUserInfoRequest{} }
func (m *GetUserInfoRequest) String() string            { return proto.CompactTextString(m) }
func (*GetUserInfoRequest) ProtoMessage()               {}
func (*GetUserInfoRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *GetUserInfoRequest) GetUserID() string {
	if m != nil {
		return m.UserID
	}
	return ""
}

type UpdateUserRequest struct {
	UserID string `protobuf:"bytes,1,opt,name=userID" json:"userID,omitempty"`
	First  string `protobuf:"bytes,2,opt,name=first" json:"first,omitempty"`
	Last   string `protobuf:"bytes,3,opt,name=last" json:"last,omitempty"`
	Email  string `protobuf:"bytes,4,opt,name=email" json:"email,omitempty"`
}

func (m *UpdateUserRequest) Reset()                    { *m = UpdateUserRequest{} }
func (m *UpdateUserRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateUserRequest) ProtoMessage()               {}
func (*UpdateUserRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *UpdateUserRequest) GetUserID() string {
	if m != nil {
		return m.UserID
	}
	return ""
}

func (m *UpdateUserRequest) GetFirst() string {
	if m != nil {
		return m.First
	}
	return ""
}

func (m *UpdateUserRequest) GetLast() string {
	if m != nil {
		return m.Last
	}
	return ""
}

func (m *UpdateUserRequest) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

// Responses
type Response struct {
	Status  string `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
}

func (m *Response) Reset()                    { *m = Response{} }
func (m *Response) String() string            { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()               {}
func (*Response) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *Response) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *Response) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type User struct {
	UserID string `protobuf:"bytes,1,opt,name=userID" json:"userID,omitempty"`
	First  string `protobuf:"bytes,2,opt,name=first" json:"first,omitempty"`
	Last   string `protobuf:"bytes,3,opt,name=last" json:"last,omitempty"`
	Email  string `protobuf:"bytes,4,opt,name=email" json:"email,omitempty"`
}

func (m *User) Reset()                    { *m = User{} }
func (m *User) String() string            { return proto.CompactTextString(m) }
func (*User) ProtoMessage()               {}
func (*User) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *User) GetUserID() string {
	if m != nil {
		return m.UserID
	}
	return ""
}

func (m *User) GetFirst() string {
	if m != nil {
		return m.First
	}
	return ""
}

func (m *User) GetLast() string {
	if m != nil {
		return m.Last
	}
	return ""
}

func (m *User) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

type UserData struct {
	User *User `protobuf:"bytes,1,opt,name=user" json:"user,omitempty"`
}

func (m *UserData) Reset()                    { *m = UserData{} }
func (m *UserData) String() string            { return proto.CompactTextString(m) }
func (*UserData) ProtoMessage()               {}
func (*UserData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *UserData) GetUser() *User {
	if m != nil {
		return m.User
	}
	return nil
}

type UserResponse struct {
	Status  string    `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
	Message string    `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
	Data    *UserData `protobuf:"bytes,3,opt,name=data" json:"data,omitempty"`
}

func (m *UserResponse) Reset()                    { *m = UserResponse{} }
func (m *UserResponse) String() string            { return proto.CompactTextString(m) }
func (*UserResponse) ProtoMessage()               {}
func (*UserResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *UserResponse) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *UserResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *UserResponse) GetData() *UserData {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterType((*ChangePasswordRequest)(nil), "go.micro.srv.user.ChangePasswordRequest")
	proto.RegisterType((*CreateUserRequest)(nil), "go.micro.srv.user.CreateUserRequest")
	proto.RegisterType((*DeleteUserRequest)(nil), "go.micro.srv.user.DeleteUserRequest")
	proto.RegisterType((*GetUserInfoRequest)(nil), "go.micro.srv.user.GetUserInfoRequest")
	proto.RegisterType((*UpdateUserRequest)(nil), "go.micro.srv.user.UpdateUserRequest")
	proto.RegisterType((*Response)(nil), "go.micro.srv.user.Response")
	proto.RegisterType((*User)(nil), "go.micro.srv.user.User")
	proto.RegisterType((*UserData)(nil), "go.micro.srv.user.UserData")
	proto.RegisterType((*UserResponse)(nil), "go.micro.srv.user.UserResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for UserService service

type UserServiceClient interface {
	ChangePassword(ctx context.Context, in *ChangePasswordRequest, opts ...client.CallOption) (*Response, error)
	CreateUser(ctx context.Context, in *CreateUserRequest, opts ...client.CallOption) (*UserResponse, error)
	DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...client.CallOption) (*Response, error)
	GetUserInfo(ctx context.Context, in *GetUserInfoRequest, opts ...client.CallOption) (*UserResponse, error)
	UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...client.CallOption) (*UserResponse, error)
}

type userServiceClient struct {
	c           client.Client
	serviceName string
}

func NewUserServiceClient(serviceName string, c client.Client) UserServiceClient {
	if c == nil {
		c = client.NewClient()
	}
	if len(serviceName) == 0 {
		serviceName = "go.micro.srv.user"
	}
	return &userServiceClient{
		c:           c,
		serviceName: serviceName,
	}
}

func (c *userServiceClient) ChangePassword(ctx context.Context, in *ChangePasswordRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.serviceName, "UserService.ChangePassword", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) CreateUser(ctx context.Context, in *CreateUserRequest, opts ...client.CallOption) (*UserResponse, error) {
	req := c.c.NewRequest(c.serviceName, "UserService.CreateUser", in)
	out := new(UserResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.serviceName, "UserService.DeleteUser", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetUserInfo(ctx context.Context, in *GetUserInfoRequest, opts ...client.CallOption) (*UserResponse, error) {
	req := c.c.NewRequest(c.serviceName, "UserService.GetUserInfo", in)
	out := new(UserResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...client.CallOption) (*UserResponse, error) {
	req := c.c.NewRequest(c.serviceName, "UserService.UpdateUser", in)
	out := new(UserResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for UserService service

type UserServiceHandler interface {
	ChangePassword(context.Context, *ChangePasswordRequest, *Response) error
	CreateUser(context.Context, *CreateUserRequest, *UserResponse) error
	DeleteUser(context.Context, *DeleteUserRequest, *Response) error
	GetUserInfo(context.Context, *GetUserInfoRequest, *UserResponse) error
	UpdateUser(context.Context, *UpdateUserRequest, *UserResponse) error
}

func RegisterUserServiceHandler(s server.Server, hdlr UserServiceHandler, opts ...server.HandlerOption) {
	s.Handle(s.NewHandler(&UserService{hdlr}, opts...))
}

type UserService struct {
	UserServiceHandler
}

func (h *UserService) ChangePassword(ctx context.Context, in *ChangePasswordRequest, out *Response) error {
	return h.UserServiceHandler.ChangePassword(ctx, in, out)
}

func (h *UserService) CreateUser(ctx context.Context, in *CreateUserRequest, out *UserResponse) error {
	return h.UserServiceHandler.CreateUser(ctx, in, out)
}

func (h *UserService) DeleteUser(ctx context.Context, in *DeleteUserRequest, out *Response) error {
	return h.UserServiceHandler.DeleteUser(ctx, in, out)
}

func (h *UserService) GetUserInfo(ctx context.Context, in *GetUserInfoRequest, out *UserResponse) error {
	return h.UserServiceHandler.GetUserInfo(ctx, in, out)
}

func (h *UserService) UpdateUser(ctx context.Context, in *UpdateUserRequest, out *UserResponse) error {
	return h.UserServiceHandler.UpdateUser(ctx, in, out)
}

func init() { proto.RegisterFile("proto/user/user.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 431 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x54, 0xcf, 0x8b, 0xd3, 0x40,
	0x14, 0x76, 0xb7, 0x71, 0x8d, 0x2f, 0x22, 0xe4, 0xe1, 0x6a, 0xa9, 0x07, 0x97, 0x41, 0x61, 0x41,
	0xc9, 0x42, 0x3d, 0x78, 0x11, 0x3c, 0x6c, 0x41, 0xf6, 0xa6, 0x91, 0x20, 0x5e, 0x84, 0xb1, 0x79,
	0x6d, 0x83, 0x69, 0x26, 0x9d, 0x99, 0xb6, 0xff, 0x9f, 0x7f, 0x99, 0xcc, 0x24, 0x69, 0x52, 0x33,
	0xa5, 0x45, 0xd8, 0x4b, 0x99, 0x37, 0xf3, 0xf5, 0xfb, 0x31, 0xcc, 0x17, 0xb8, 0x2c, 0xa5, 0xd0,
	0xe2, 0x66, 0xad, 0x48, 0xda, 0x9f, 0xc8, 0xce, 0x18, 0xce, 0x45, 0xb4, 0xcc, 0xa6, 0x52, 0x44,
	0x4a, 0x6e, 0x22, 0x73, 0xc0, 0x14, 0x5c, 0xde, 0x2e, 0x78, 0x31, 0xa7, 0x2f, 0x5c, 0xa9, 0xad,
	0x90, 0x69, 0x4c, 0xab, 0x35, 0x29, 0x8d, 0xcf, 0xe1, 0xc2, 0x00, 0xee, 0x26, 0xc3, 0xb3, 0xab,
	0xb3, 0xeb, 0xc7, 0x71, 0x3d, 0xe1, 0x15, 0x04, 0x05, 0x6d, 0x1b, 0xf4, 0xf0, 0xdc, 0x1e, 0x76,
	0xb7, 0x0c, 0x42, 0xe4, 0xe9, 0x0e, 0x31, 0xa8, 0x10, 0x9d, 0x2d, 0x26, 0x20, 0xbc, 0x95, 0xc4,
	0x35, 0x25, 0x8a, 0x64, 0x23, 0xf8, 0x0c, 0x1e, 0xce, 0x32, 0xa9, 0x74, 0xad, 0x57, 0x0d, 0x88,
	0xe0, 0xe5, 0x5c, 0xe9, 0x5a, 0xc7, 0xae, 0x0d, 0x92, 0x96, 0x3c, 0xcb, 0x6b, 0xea, 0x6a, 0xc0,
	0x11, 0xf8, 0x65, 0xa3, 0xe9, 0xd9, 0x83, 0xdd, 0xcc, 0x3e, 0x41, 0x38, 0xa1, 0x9c, 0xf6, 0x05,
	0x0f, 0x25, 0x44, 0xf0, 0x16, 0xbc, 0x8e, 0xe6, 0xc7, 0x76, 0xcd, 0xde, 0x01, 0x7e, 0x26, 0x6d,
	0xfe, 0x7d, 0x57, 0xcc, 0xc4, 0x11, 0x06, 0xf6, 0x1b, 0xc2, 0xa4, 0x4c, 0xf9, 0x69, 0x72, 0xbb,
	0xdc, 0xe7, 0xae, 0xdc, 0x03, 0x57, 0x6e, 0xaf, 0x93, 0x9b, 0x7d, 0x04, 0x3f, 0x26, 0x55, 0x8a,
	0x42, 0x91, 0xd1, 0x50, 0x9a, 0xeb, 0xb5, 0x6a, 0x34, 0xaa, 0x09, 0x87, 0xf0, 0x68, 0x49, 0x4a,
	0xf1, 0x39, 0xd5, 0x2a, 0xcd, 0xc8, 0x7e, 0x82, 0x67, 0x4c, 0xde, 0x9b, 0xbb, 0x0f, 0xe0, 0x1b,
	0xfe, 0x09, 0xd7, 0x1c, 0xdf, 0x82, 0x67, 0x58, 0xad, 0x42, 0x30, 0x7e, 0x11, 0xf5, 0x5e, 0x63,
	0x64, 0xef, 0xcb, 0x82, 0xd8, 0x0a, 0x9e, 0x54, 0xb7, 0xf7, 0xbf, 0xd1, 0xf0, 0x06, 0xbc, 0x94,
	0x6b, 0x6e, 0x4d, 0x06, 0xe3, 0x97, 0x07, 0xe4, 0x8c, 0xb3, 0xd8, 0x02, 0xc7, 0x7f, 0x06, 0x10,
	0x98, 0xad, 0x6f, 0x24, 0x37, 0xd9, 0x94, 0xf0, 0x07, 0x3c, 0xdd, 0xef, 0x06, 0x5e, 0x3b, 0x48,
	0x9c, 0xf5, 0x19, 0xb9, 0xe4, 0x9a, 0x2c, 0xec, 0x01, 0x26, 0x00, 0x6d, 0x03, 0xf0, 0xb5, 0x8b,
	0xf6, 0xdf, 0x82, 0x8c, 0x5e, 0x1d, 0xba, 0xb0, 0x96, 0xf6, 0x2b, 0x40, 0xfb, 0xce, 0x9d, 0xb4,
	0xbd, 0x1a, 0x1c, 0x73, 0xfa, 0x1d, 0x82, 0xce, 0xcb, 0xc7, 0x37, 0x0e, 0x74, 0xbf, 0x19, 0xa7,
	0x78, 0x4d, 0x00, 0xda, 0x92, 0x38, 0xbd, 0xf6, 0x3a, 0x74, 0x02, 0xed, 0xaf, 0x0b, 0xfb, 0xa9,
	0x7b, 0xff, 0x37, 0x00, 0x00, 0xff, 0xff, 0xe7, 0xea, 0x41, 0x29, 0x03, 0x05, 0x00, 0x00,
}
