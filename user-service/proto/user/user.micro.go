// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/user/user.proto

/*
Package user is a generated protocol buffer package.

It is generated from these files:
	proto/user/user.proto

It has these top-level messages:
	ChangePasswordRequest
	CreateUserRequest
	DeleteUserRequest
	GetUserInfoRequest
	UpdateUserRequest
	Response
	User
	UserData
	UserResponse
*/
package user

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for UserService service

type UserService interface {
	ChangePassword(ctx context.Context, in *ChangePasswordRequest, opts ...client.CallOption) (*Response, error)
	CreateUser(ctx context.Context, in *CreateUserRequest, opts ...client.CallOption) (*UserResponse, error)
	DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...client.CallOption) (*Response, error)
	GetUserInfo(ctx context.Context, in *GetUserInfoRequest, opts ...client.CallOption) (*UserResponse, error)
	UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...client.CallOption) (*UserResponse, error)
}

type userService struct {
	c    client.Client
	name string
}

func NewUserService(name string, c client.Client) UserService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "userservice"
	}
	return &userService{
		c:    c,
		name: name,
	}
}

func (c *userService) ChangePassword(ctx context.Context, in *ChangePasswordRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "UserService.ChangePassword", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) CreateUser(ctx context.Context, in *CreateUserRequest, opts ...client.CallOption) (*UserResponse, error) {
	req := c.c.NewRequest(c.name, "UserService.CreateUser", in)
	out := new(UserResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "UserService.DeleteUser", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) GetUserInfo(ctx context.Context, in *GetUserInfoRequest, opts ...client.CallOption) (*UserResponse, error) {
	req := c.c.NewRequest(c.name, "UserService.GetUserInfo", in)
	out := new(UserResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...client.CallOption) (*UserResponse, error) {
	req := c.c.NewRequest(c.name, "UserService.UpdateUser", in)
	out := new(UserResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for UserService service

type UserServiceHandler interface {
	ChangePassword(context.Context, *ChangePasswordRequest, *Response) error
	CreateUser(context.Context, *CreateUserRequest, *UserResponse) error
	DeleteUser(context.Context, *DeleteUserRequest, *Response) error
	GetUserInfo(context.Context, *GetUserInfoRequest, *UserResponse) error
	UpdateUser(context.Context, *UpdateUserRequest, *UserResponse) error
}

func RegisterUserServiceHandler(s server.Server, hdlr UserServiceHandler, opts ...server.HandlerOption) error {
	type userService interface {
		ChangePassword(ctx context.Context, in *ChangePasswordRequest, out *Response) error
		CreateUser(ctx context.Context, in *CreateUserRequest, out *UserResponse) error
		DeleteUser(ctx context.Context, in *DeleteUserRequest, out *Response) error
		GetUserInfo(ctx context.Context, in *GetUserInfoRequest, out *UserResponse) error
		UpdateUser(ctx context.Context, in *UpdateUserRequest, out *UserResponse) error
	}
	type UserService struct {
		userService
	}
	h := &userServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&UserService{h}, opts...))
}

type userServiceHandler struct {
	UserServiceHandler
}

func (h *userServiceHandler) ChangePassword(ctx context.Context, in *ChangePasswordRequest, out *Response) error {
	return h.UserServiceHandler.ChangePassword(ctx, in, out)
}

func (h *userServiceHandler) CreateUser(ctx context.Context, in *CreateUserRequest, out *UserResponse) error {
	return h.UserServiceHandler.CreateUser(ctx, in, out)
}

func (h *userServiceHandler) DeleteUser(ctx context.Context, in *DeleteUserRequest, out *Response) error {
	return h.UserServiceHandler.DeleteUser(ctx, in, out)
}

func (h *userServiceHandler) GetUserInfo(ctx context.Context, in *GetUserInfoRequest, out *UserResponse) error {
	return h.UserServiceHandler.GetUserInfo(ctx, in, out)
}

func (h *userServiceHandler) UpdateUser(ctx context.Context, in *UpdateUserRequest, out *UserResponse) error {
	return h.UserServiceHandler.UpdateUser(ctx, in, out)
}
