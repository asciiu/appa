// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/history.proto

/*
Package activity is a generated protocol buffer package.

It is generated from these files:
	proto/history.proto

It has these top-level messages:
	HistoryRequest
	RecentHistoryRequest
	HistoryCountRequest
	UpdateHistoryRequest
	History
	UserHistoryPage
	HistoryPagedResponse
	HistoryData
	HistoryList
	HistoryResponse
	HistoryListResponse
	HistoryCountResponse
*/
package activity

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "golang.org/x/net/context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Requests
type HistoryRequest struct {
	UserID   string `protobuf:"bytes,1,opt,name=userID" json:"userID"`
	ObjectID string `protobuf:"bytes,2,opt,name=objectID" json:"objectID"`
	Page     uint32 `protobuf:"varint,3,opt,name=page" json:"page"`
	PageSize uint32 `protobuf:"varint,4,opt,name=pageSize" json:"pageSize"`
}

func (m *HistoryRequest) Reset()                    { *m = HistoryRequest{} }
func (m *HistoryRequest) String() string            { return proto.CompactTextString(m) }
func (*HistoryRequest) ProtoMessage()               {}
func (*HistoryRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *HistoryRequest) GetUserID() string {
	if m != nil {
		return m.UserID
	}
	return ""
}

func (m *HistoryRequest) GetObjectID() string {
	if m != nil {
		return m.ObjectID
	}
	return ""
}

func (m *HistoryRequest) GetPage() uint32 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *HistoryRequest) GetPageSize() uint32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

type RecentHistoryRequest struct {
	ObjectID string `protobuf:"bytes,1,opt,name=objectID" json:"objectID"`
	Count    string `protobuf:"bytes,2,opt,name=count" json:"count"`
}

func (m *RecentHistoryRequest) Reset()                    { *m = RecentHistoryRequest{} }
func (m *RecentHistoryRequest) String() string            { return proto.CompactTextString(m) }
func (*RecentHistoryRequest) ProtoMessage()               {}
func (*RecentHistoryRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *RecentHistoryRequest) GetObjectID() string {
	if m != nil {
		return m.ObjectID
	}
	return ""
}

func (m *RecentHistoryRequest) GetCount() string {
	if m != nil {
		return m.Count
	}
	return ""
}

type HistoryCountRequest struct {
	ObjectID string `protobuf:"bytes,1,opt,name=objectID" json:"objectID"`
}

func (m *HistoryCountRequest) Reset()                    { *m = HistoryCountRequest{} }
func (m *HistoryCountRequest) String() string            { return proto.CompactTextString(m) }
func (*HistoryCountRequest) ProtoMessage()               {}
func (*HistoryCountRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *HistoryCountRequest) GetObjectID() string {
	if m != nil {
		return m.ObjectID
	}
	return ""
}

type UpdateHistoryRequest struct {
	HistoryID string `protobuf:"bytes,1,opt,name=historyID" json:"historyID"`
	SeenAt    string `protobuf:"bytes,2,opt,name=seenAt" json:"seenAt"`
	ClickedAt string `protobuf:"bytes,3,opt,name=clickedAt" json:"clickedAt"`
}

func (m *UpdateHistoryRequest) Reset()                    { *m = UpdateHistoryRequest{} }
func (m *UpdateHistoryRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateHistoryRequest) ProtoMessage()               {}
func (*UpdateHistoryRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *UpdateHistoryRequest) GetHistoryID() string {
	if m != nil {
		return m.HistoryID
	}
	return ""
}

func (m *UpdateHistoryRequest) GetSeenAt() string {
	if m != nil {
		return m.SeenAt
	}
	return ""
}

func (m *UpdateHistoryRequest) GetClickedAt() string {
	if m != nil {
		return m.ClickedAt
	}
	return ""
}

// Responses
type History struct {
	HistoryID   string `protobuf:"bytes,1,opt,name=historyID" json:"historyID"`
	UserID      string `protobuf:"bytes,3,opt,name=userID" json:"userID"`
	Type        string `protobuf:"bytes,2,opt,name=type" json:"type"`
	ObjectID    string `protobuf:"bytes,4,opt,name=objectID" json:"objectID"`
	Title       string `protobuf:"bytes,5,opt,name=title" json:"title"`
	Subtitle    string `protobuf:"bytes,6,opt,name=subtitle" json:"subtitle"`
	Description string `protobuf:"bytes,7,opt,name=description" json:"description"`
	Timestamp   string `protobuf:"bytes,8,opt,name=timestamp" json:"timestamp"`
	ClickedAt   string `protobuf:"bytes,9,opt,name=clickedAt" json:"clickedAt"`
	SeenAt      string `protobuf:"bytes,10,opt,name=seenAt" json:"seenAt"`
}

func (m *History) Reset()                    { *m = History{} }
func (m *History) String() string            { return proto.CompactTextString(m) }
func (*History) ProtoMessage()               {}
func (*History) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *History) GetHistoryID() string {
	if m != nil {
		return m.HistoryID
	}
	return ""
}

func (m *History) GetUserID() string {
	if m != nil {
		return m.UserID
	}
	return ""
}

func (m *History) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *History) GetObjectID() string {
	if m != nil {
		return m.ObjectID
	}
	return ""
}

func (m *History) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *History) GetSubtitle() string {
	if m != nil {
		return m.Subtitle
	}
	return ""
}

func (m *History) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *History) GetTimestamp() string {
	if m != nil {
		return m.Timestamp
	}
	return ""
}

func (m *History) GetClickedAt() string {
	if m != nil {
		return m.ClickedAt
	}
	return ""
}

func (m *History) GetSeenAt() string {
	if m != nil {
		return m.SeenAt
	}
	return ""
}

type UserHistoryPage struct {
	Page     uint32     `protobuf:"varint,1,opt,name=page" json:"page"`
	PageSize uint32     `protobuf:"varint,2,opt,name=pageSize" json:"pageSize"`
	Total    uint32     `protobuf:"varint,3,opt,name=total" json:"total"`
	History  []*History `protobuf:"bytes,4,rep,name=history" json:"history"`
}

func (m *UserHistoryPage) Reset()                    { *m = UserHistoryPage{} }
func (m *UserHistoryPage) String() string            { return proto.CompactTextString(m) }
func (*UserHistoryPage) ProtoMessage()               {}
func (*UserHistoryPage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *UserHistoryPage) GetPage() uint32 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *UserHistoryPage) GetPageSize() uint32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *UserHistoryPage) GetTotal() uint32 {
	if m != nil {
		return m.Total
	}
	return 0
}

func (m *UserHistoryPage) GetHistory() []*History {
	if m != nil {
		return m.History
	}
	return nil
}

type HistoryPagedResponse struct {
	Status  string           `protobuf:"bytes,1,opt,name=status" json:"status"`
	Message string           `protobuf:"bytes,2,opt,name=message" json:"message"`
	Data    *UserHistoryPage `protobuf:"bytes,3,opt,name=data" json:"data"`
}

func (m *HistoryPagedResponse) Reset()                    { *m = HistoryPagedResponse{} }
func (m *HistoryPagedResponse) String() string            { return proto.CompactTextString(m) }
func (*HistoryPagedResponse) ProtoMessage()               {}
func (*HistoryPagedResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *HistoryPagedResponse) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *HistoryPagedResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *HistoryPagedResponse) GetData() *UserHistoryPage {
	if m != nil {
		return m.Data
	}
	return nil
}

type HistoryData struct {
	History *History `protobuf:"bytes,1,opt,name=history" json:"history"`
}

func (m *HistoryData) Reset()                    { *m = HistoryData{} }
func (m *HistoryData) String() string            { return proto.CompactTextString(m) }
func (*HistoryData) ProtoMessage()               {}
func (*HistoryData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *HistoryData) GetHistory() *History {
	if m != nil {
		return m.History
	}
	return nil
}

type HistoryList struct {
	History []*History `protobuf:"bytes,1,rep,name=history" json:"history"`
}

func (m *HistoryList) Reset()                    { *m = HistoryList{} }
func (m *HistoryList) String() string            { return proto.CompactTextString(m) }
func (*HistoryList) ProtoMessage()               {}
func (*HistoryList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *HistoryList) GetHistory() []*History {
	if m != nil {
		return m.History
	}
	return nil
}

type HistoryResponse struct {
	Status  string       `protobuf:"bytes,1,opt,name=status" json:"status"`
	Message string       `protobuf:"bytes,2,opt,name=message" json:"message"`
	Data    *HistoryData `protobuf:"bytes,3,opt,name=data" json:"data"`
}

func (m *HistoryResponse) Reset()                    { *m = HistoryResponse{} }
func (m *HistoryResponse) String() string            { return proto.CompactTextString(m) }
func (*HistoryResponse) ProtoMessage()               {}
func (*HistoryResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *HistoryResponse) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *HistoryResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *HistoryResponse) GetData() *HistoryData {
	if m != nil {
		return m.Data
	}
	return nil
}

type HistoryListResponse struct {
	Status  string       `protobuf:"bytes,1,opt,name=status" json:"status"`
	Message string       `protobuf:"bytes,2,opt,name=message" json:"message"`
	Data    *HistoryList `protobuf:"bytes,3,opt,name=data" json:"data"`
}

func (m *HistoryListResponse) Reset()                    { *m = HistoryListResponse{} }
func (m *HistoryListResponse) String() string            { return proto.CompactTextString(m) }
func (*HistoryListResponse) ProtoMessage()               {}
func (*HistoryListResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *HistoryListResponse) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *HistoryListResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *HistoryListResponse) GetData() *HistoryList {
	if m != nil {
		return m.Data
	}
	return nil
}

type HistoryCountResponse struct {
	Status  string `protobuf:"bytes,1,opt,name=status" json:"status"`
	Message string `protobuf:"bytes,2,opt,name=message" json:"message"`
	Data    uint32 `protobuf:"varint,3,opt,name=data" json:"data"`
}

func (m *HistoryCountResponse) Reset()                    { *m = HistoryCountResponse{} }
func (m *HistoryCountResponse) String() string            { return proto.CompactTextString(m) }
func (*HistoryCountResponse) ProtoMessage()               {}
func (*HistoryCountResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *HistoryCountResponse) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *HistoryCountResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *HistoryCountResponse) GetData() uint32 {
	if m != nil {
		return m.Data
	}
	return 0
}

func init() {
	proto.RegisterType((*HistoryRequest)(nil), "activity.HistoryRequest")
	proto.RegisterType((*RecentHistoryRequest)(nil), "activity.RecentHistoryRequest")
	proto.RegisterType((*HistoryCountRequest)(nil), "activity.HistoryCountRequest")
	proto.RegisterType((*UpdateHistoryRequest)(nil), "activity.UpdateHistoryRequest")
	proto.RegisterType((*History)(nil), "activity.History")
	proto.RegisterType((*UserHistoryPage)(nil), "activity.UserHistoryPage")
	proto.RegisterType((*HistoryPagedResponse)(nil), "activity.HistoryPagedResponse")
	proto.RegisterType((*HistoryData)(nil), "activity.HistoryData")
	proto.RegisterType((*HistoryList)(nil), "activity.HistoryList")
	proto.RegisterType((*HistoryResponse)(nil), "activity.HistoryResponse")
	proto.RegisterType((*HistoryListResponse)(nil), "activity.HistoryListResponse")
	proto.RegisterType((*HistoryCountResponse)(nil), "activity.HistoryCountResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for HistoryService service

type HistoryServiceClient interface {
	FindUserHistory(ctx context.Context, in *HistoryRequest, opts ...client.CallOption) (*HistoryPagedResponse, error)
	FindMostRecentHistory(ctx context.Context, in *RecentHistoryRequest, opts ...client.CallOption) (*HistoryListResponse, error)
	FindHistoryCount(ctx context.Context, in *HistoryCountRequest, opts ...client.CallOption) (*HistoryCountResponse, error)
	UpdateHistory(ctx context.Context, in *UpdateHistoryRequest, opts ...client.CallOption) (*HistoryResponse, error)
}

type historyServiceClient struct {
	c           client.Client
	serviceName string
}

func NewHistoryServiceClient(serviceName string, c client.Client) HistoryServiceClient {
	if c == nil {
		c = client.NewClient()
	}
	if len(serviceName) == 0 {
		serviceName = "activity"
	}
	return &historyServiceClient{
		c:           c,
		serviceName: serviceName,
	}
}

func (c *historyServiceClient) FindUserHistory(ctx context.Context, in *HistoryRequest, opts ...client.CallOption) (*HistoryPagedResponse, error) {
	req := c.c.NewRequest(c.serviceName, "HistoryService.FindUserHistory", in)
	out := new(HistoryPagedResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *historyServiceClient) FindMostRecentHistory(ctx context.Context, in *RecentHistoryRequest, opts ...client.CallOption) (*HistoryListResponse, error) {
	req := c.c.NewRequest(c.serviceName, "HistoryService.FindMostRecentHistory", in)
	out := new(HistoryListResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *historyServiceClient) FindHistoryCount(ctx context.Context, in *HistoryCountRequest, opts ...client.CallOption) (*HistoryCountResponse, error) {
	req := c.c.NewRequest(c.serviceName, "HistoryService.FindHistoryCount", in)
	out := new(HistoryCountResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *historyServiceClient) UpdateHistory(ctx context.Context, in *UpdateHistoryRequest, opts ...client.CallOption) (*HistoryResponse, error) {
	req := c.c.NewRequest(c.serviceName, "HistoryService.UpdateHistory", in)
	out := new(HistoryResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for HistoryService service

type HistoryServiceHandler interface {
	FindUserHistory(context.Context, *HistoryRequest, *HistoryPagedResponse) error
	FindMostRecentHistory(context.Context, *RecentHistoryRequest, *HistoryListResponse) error
	FindHistoryCount(context.Context, *HistoryCountRequest, *HistoryCountResponse) error
	UpdateHistory(context.Context, *UpdateHistoryRequest, *HistoryResponse) error
}

func RegisterHistoryServiceHandler(s server.Server, hdlr HistoryServiceHandler, opts ...server.HandlerOption) {
	s.Handle(s.NewHandler(&HistoryService{hdlr}, opts...))
}

type HistoryService struct {
	HistoryServiceHandler
}

func (h *HistoryService) FindUserHistory(ctx context.Context, in *HistoryRequest, out *HistoryPagedResponse) error {
	return h.HistoryServiceHandler.FindUserHistory(ctx, in, out)
}

func (h *HistoryService) FindMostRecentHistory(ctx context.Context, in *RecentHistoryRequest, out *HistoryListResponse) error {
	return h.HistoryServiceHandler.FindMostRecentHistory(ctx, in, out)
}

func (h *HistoryService) FindHistoryCount(ctx context.Context, in *HistoryCountRequest, out *HistoryCountResponse) error {
	return h.HistoryServiceHandler.FindHistoryCount(ctx, in, out)
}

func (h *HistoryService) UpdateHistory(ctx context.Context, in *UpdateHistoryRequest, out *HistoryResponse) error {
	return h.HistoryServiceHandler.UpdateHistory(ctx, in, out)
}

func init() { proto.RegisterFile("proto/history.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 586 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x55, 0x4d, 0x6f, 0xd3, 0x40,
	0x10, 0xad, 0x13, 0x37, 0x1f, 0x13, 0x85, 0xc0, 0x36, 0x45, 0x6e, 0x04, 0x28, 0xf2, 0x29, 0x08,
	0x11, 0x44, 0xb8, 0x71, 0xab, 0x88, 0x50, 0x2b, 0xb5, 0x12, 0x72, 0x54, 0x89, 0x03, 0x17, 0xc7,
	0x1e, 0xc1, 0x96, 0xc4, 0x36, 0xde, 0x49, 0x51, 0x38, 0xf3, 0x1f, 0xf8, 0x73, 0xfc, 0x18, 0xb4,
	0x1f, 0x76, 0xd6, 0x49, 0xa0, 0xa8, 0x52, 0x4f, 0xf1, 0x9b, 0xf5, 0xcc, 0x7b, 0xf3, 0x76, 0x3c,
	0x81, 0xa3, 0x2c, 0x4f, 0x29, 0x7d, 0xf5, 0x85, 0x0b, 0x4a, 0xf3, 0xf5, 0x58, 0x21, 0xd6, 0x0a,
	0x23, 0xe2, 0x37, 0x9c, 0xd6, 0x3e, 0xc1, 0x83, 0x33, 0x7d, 0x14, 0xe0, 0xb7, 0x15, 0x0a, 0x62,
	0x8f, 0xa1, 0xb1, 0x12, 0x98, 0x9f, 0x4f, 0x3d, 0x67, 0xe8, 0x8c, 0xda, 0x81, 0x41, 0x6c, 0x00,
	0xad, 0x74, 0x7e, 0x8d, 0x11, 0x9d, 0x4f, 0xbd, 0x9a, 0x3a, 0x29, 0x31, 0x63, 0xe0, 0x66, 0xe1,
	0x67, 0xf4, 0xea, 0x43, 0x67, 0xd4, 0x0d, 0xd4, 0xb3, 0x7c, 0x5f, 0xfe, 0xce, 0xf8, 0x0f, 0xf4,
	0x5c, 0x15, 0x2f, 0xb1, 0x7f, 0x06, 0xfd, 0x00, 0x23, 0x4c, 0x68, 0x8b, 0xdb, 0xe6, 0x70, 0xb6,
	0x38, 0xfa, 0x70, 0x18, 0xa5, 0xab, 0x84, 0x0c, 0xb9, 0x06, 0xfe, 0x6b, 0x38, 0x32, 0x35, 0xde,
	0x49, 0xfc, 0x1f, 0x85, 0xfc, 0x6b, 0xe8, 0x5f, 0x65, 0x71, 0x48, 0xb8, 0x45, 0xfe, 0x04, 0xda,
	0xc6, 0xa5, 0x32, 0x69, 0x13, 0x90, 0xb6, 0x08, 0xc4, 0xe4, 0xb4, 0xe0, 0x37, 0x48, 0x66, 0x45,
	0x0b, 0x1e, 0x7d, 0xc5, 0xf8, 0x94, 0x54, 0xff, 0xed, 0x60, 0x13, 0xf0, 0x7f, 0xd5, 0xa0, 0x69,
	0x68, 0x6e, 0xaf, 0x6f, 0x6c, 0xaf, 0x57, 0x6c, 0x67, 0xe0, 0xd2, 0x3a, 0x43, 0xc3, 0xaa, 0x9e,
	0x2b, 0xdd, 0xb9, 0xbb, 0x36, 0x11, 0xa7, 0x05, 0x7a, 0x87, 0xda, 0x26, 0x05, 0x64, 0x86, 0x58,
	0xcd, 0xf5, 0x41, 0x43, 0x67, 0x14, 0x98, 0x0d, 0xa1, 0x13, 0xa3, 0x88, 0x72, 0x9e, 0x11, 0x4f,
	0x13, 0xaf, 0xa9, 0x8e, 0xed, 0x90, 0x54, 0x4e, 0x7c, 0x89, 0x82, 0xc2, 0x65, 0xe6, 0xb5, 0xb4,
	0xf2, 0x32, 0x50, 0x75, 0xa0, 0xbd, 0xe5, 0x80, 0xe5, 0x1b, 0xd8, 0xbe, 0xf9, 0x3f, 0x1d, 0xe8,
	0x5d, 0x09, 0xcc, 0x8d, 0x3b, 0x1f, 0xe4, 0xc8, 0x14, 0x63, 0xe4, 0xfc, 0x65, 0x8c, 0x6a, 0xd5,
	0x31, 0x52, 0xbd, 0xa6, 0x14, 0x2e, 0xcc, 0xdc, 0x69, 0xc0, 0x5e, 0x40, 0xd3, 0xd8, 0xea, 0xb9,
	0xc3, 0xfa, 0xa8, 0x33, 0x79, 0x34, 0x2e, 0xc6, 0x7d, 0x5c, 0x5c, 0x79, 0xf1, 0x86, 0xff, 0x1d,
	0xfa, 0x96, 0x82, 0x38, 0x40, 0x91, 0xa5, 0x89, 0x40, 0x25, 0x9b, 0x42, 0x5a, 0x89, 0xe2, 0x2b,
	0xd0, 0x88, 0x79, 0xd0, 0x5c, 0xa2, 0x10, 0x52, 0xa5, 0xbe, 0x91, 0x02, 0xb2, 0x97, 0xe0, 0xc6,
	0x21, 0x85, 0x4a, 0x4b, 0x67, 0x72, 0xb2, 0xe1, 0xdc, 0xea, 0x32, 0x50, 0xaf, 0xf9, 0x6f, 0xa1,
	0x63, 0x82, 0xd3, 0x90, 0x42, 0x5b, 0xb4, 0xa3, 0x0a, 0xfc, 0x4b, 0xf4, 0x26, 0xf7, 0x82, 0x0b,
	0xaa, 0xe6, 0xde, 0xd6, 0x70, 0x02, 0xbd, 0x72, 0xee, 0xef, 0xdc, 0xeb, 0xf3, 0x4a, 0xaf, 0xc7,
	0x3b, 0x74, 0xb2, 0x25, 0xd3, 0x67, 0x5e, 0x7e, 0xa0, 0x52, 0xeb, 0x3d, 0x72, 0xaa, 0xf2, 0x9a,
	0xf3, 0x53, 0x79, 0xa9, 0x66, 0x29, 0xdc, 0x99, 0x94, 0x59, 0xa4, 0x5d, 0x5d, 0x7d, 0xf2, 0xbb,
	0x56, 0xee, 0xcc, 0x19, 0xe6, 0x37, 0x3c, 0x42, 0x76, 0x09, 0xbd, 0xf7, 0x3c, 0x89, 0xad, 0x9b,
	0x66, 0xde, 0xee, 0x1d, 0xe8, 0x3d, 0x33, 0x78, 0xb6, 0x73, 0x52, 0x19, 0x3d, 0xff, 0x80, 0x7d,
	0x84, 0x63, 0x59, 0xee, 0x32, 0x95, 0x86, 0x59, 0x6b, 0x92, 0x59, 0xa9, 0xfb, 0xf6, 0xe7, 0xe0,
	0xe9, 0x7e, 0x57, 0x36, 0x95, 0x67, 0xf0, 0x50, 0x56, 0xb6, 0xdd, 0x61, 0xbb, 0x49, 0xf6, 0x2a,
	0xdd, 0x23, 0xb7, 0x62, 0xaa, 0x7f, 0xc0, 0x2e, 0xa0, 0x5b, 0x59, 0xa8, 0xb6, 0xcc, 0x7d, 0x9b,
	0x76, 0x70, 0xb2, 0xc7, 0x9b, 0xa2, 0xda, 0xbc, 0xa1, 0xfe, 0xa2, 0xde, 0xfc, 0x09, 0x00, 0x00,
	0xff, 0xff, 0x06, 0x03, 0x6a, 0xe3, 0xb9, 0x06, 0x00, 0x00,
}
