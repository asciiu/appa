// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/key/key.proto

/*
Package fomo_keys is a generated protocol buffer package.

It is generated from these files:
	proto/key/key.proto

It has these top-level messages:
	KeyRequest
	GetUserKeyRequest
	GetUserKeysRequest
	RemoveKeyRequest
	Key
	UserKeyData
	UserKeysData
	KeyResponse
	KeyListResponse
*/
package fomo_keys

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "golang.org/x/net/context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Requests
type KeyRequest struct {
	KeyID       string `protobuf:"bytes,1,opt,name=keyID" json:"keyID"`
	UserID      string `protobuf:"bytes,2,opt,name=userID" json:"userID"`
	Exchange    string `protobuf:"bytes,3,opt,name=exchange" json:"exchange"`
	Key         string `protobuf:"bytes,4,opt,name=key" json:"key"`
	Secret      string `protobuf:"bytes,5,opt,name=secret" json:"secret"`
	Description string `protobuf:"bytes,6,opt,name=description" json:"description"`
	Status      string `protobuf:"bytes,7,opt,name=status" json:"status"`
}

func (m *KeyRequest) Reset()                    { *m = KeyRequest{} }
func (m *KeyRequest) String() string            { return proto.CompactTextString(m) }
func (*KeyRequest) ProtoMessage()               {}
func (*KeyRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *KeyRequest) GetKeyID() string {
	if m != nil {
		return m.KeyID
	}
	return ""
}

func (m *KeyRequest) GetUserID() string {
	if m != nil {
		return m.UserID
	}
	return ""
}

func (m *KeyRequest) GetExchange() string {
	if m != nil {
		return m.Exchange
	}
	return ""
}

func (m *KeyRequest) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *KeyRequest) GetSecret() string {
	if m != nil {
		return m.Secret
	}
	return ""
}

func (m *KeyRequest) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *KeyRequest) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

type GetUserKeyRequest struct {
	UserID string `protobuf:"bytes,1,opt,name=userID" json:"userID"`
	KeyID  string `protobuf:"bytes,2,opt,name=keyID" json:"keyID"`
}

func (m *GetUserKeyRequest) Reset()                    { *m = GetUserKeyRequest{} }
func (m *GetUserKeyRequest) String() string            { return proto.CompactTextString(m) }
func (*GetUserKeyRequest) ProtoMessage()               {}
func (*GetUserKeyRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *GetUserKeyRequest) GetUserID() string {
	if m != nil {
		return m.UserID
	}
	return ""
}

func (m *GetUserKeyRequest) GetKeyID() string {
	if m != nil {
		return m.KeyID
	}
	return ""
}

type GetUserKeysRequest struct {
	UserID string `protobuf:"bytes,1,opt,name=userID" json:"userID"`
}

func (m *GetUserKeysRequest) Reset()                    { *m = GetUserKeysRequest{} }
func (m *GetUserKeysRequest) String() string            { return proto.CompactTextString(m) }
func (*GetUserKeysRequest) ProtoMessage()               {}
func (*GetUserKeysRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *GetUserKeysRequest) GetUserID() string {
	if m != nil {
		return m.UserID
	}
	return ""
}

type RemoveKeyRequest struct {
	UserID string `protobuf:"bytes,1,opt,name=userID" json:"userID"`
	KeyID  string `protobuf:"bytes,2,opt,name=keyID" json:"keyID"`
}

func (m *RemoveKeyRequest) Reset()                    { *m = RemoveKeyRequest{} }
func (m *RemoveKeyRequest) String() string            { return proto.CompactTextString(m) }
func (*RemoveKeyRequest) ProtoMessage()               {}
func (*RemoveKeyRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *RemoveKeyRequest) GetUserID() string {
	if m != nil {
		return m.UserID
	}
	return ""
}

func (m *RemoveKeyRequest) GetKeyID() string {
	if m != nil {
		return m.KeyID
	}
	return ""
}

// Responses
type Key struct {
	KeyID       string `protobuf:"bytes,1,opt,name=keyID" json:"keyID"`
	UserID      string `protobuf:"bytes,2,opt,name=userID" json:"userID"`
	Exchange    string `protobuf:"bytes,3,opt,name=exchange" json:"exchange"`
	Key         string `protobuf:"bytes,4,opt,name=key" json:"key"`
	Secret      string `protobuf:"bytes,5,opt,name=secret" json:"secret"`
	Status      string `protobuf:"bytes,6,opt,name=status" json:"status"`
	Description string `protobuf:"bytes,7,opt,name=description" json:"description"`
}

func (m *Key) Reset()                    { *m = Key{} }
func (m *Key) String() string            { return proto.CompactTextString(m) }
func (*Key) ProtoMessage()               {}
func (*Key) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *Key) GetKeyID() string {
	if m != nil {
		return m.KeyID
	}
	return ""
}

func (m *Key) GetUserID() string {
	if m != nil {
		return m.UserID
	}
	return ""
}

func (m *Key) GetExchange() string {
	if m != nil {
		return m.Exchange
	}
	return ""
}

func (m *Key) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *Key) GetSecret() string {
	if m != nil {
		return m.Secret
	}
	return ""
}

func (m *Key) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *Key) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

type UserKeyData struct {
	Key *Key `protobuf:"bytes,1,opt,name=key" json:"key"`
}

func (m *UserKeyData) Reset()                    { *m = UserKeyData{} }
func (m *UserKeyData) String() string            { return proto.CompactTextString(m) }
func (*UserKeyData) ProtoMessage()               {}
func (*UserKeyData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *UserKeyData) GetKey() *Key {
	if m != nil {
		return m.Key
	}
	return nil
}

type UserKeysData struct {
	Keys []*Key `protobuf:"bytes,1,rep,name=keys" json:"keys"`
}

func (m *UserKeysData) Reset()                    { *m = UserKeysData{} }
func (m *UserKeysData) String() string            { return proto.CompactTextString(m) }
func (*UserKeysData) ProtoMessage()               {}
func (*UserKeysData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *UserKeysData) GetKeys() []*Key {
	if m != nil {
		return m.Keys
	}
	return nil
}

type KeyResponse struct {
	Status  string       `protobuf:"bytes,1,opt,name=status" json:"status"`
	Message string       `protobuf:"bytes,2,opt,name=message" json:"message"`
	Data    *UserKeyData `protobuf:"bytes,3,opt,name=data" json:"data"`
}

func (m *KeyResponse) Reset()                    { *m = KeyResponse{} }
func (m *KeyResponse) String() string            { return proto.CompactTextString(m) }
func (*KeyResponse) ProtoMessage()               {}
func (*KeyResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *KeyResponse) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *KeyResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *KeyResponse) GetData() *UserKeyData {
	if m != nil {
		return m.Data
	}
	return nil
}

type KeyListResponse struct {
	Status  string        `protobuf:"bytes,1,opt,name=status" json:"status"`
	Message string        `protobuf:"bytes,2,opt,name=message" json:"message"`
	Data    *UserKeysData `protobuf:"bytes,3,opt,name=data" json:"data"`
}

func (m *KeyListResponse) Reset()                    { *m = KeyListResponse{} }
func (m *KeyListResponse) String() string            { return proto.CompactTextString(m) }
func (*KeyListResponse) ProtoMessage()               {}
func (*KeyListResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *KeyListResponse) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *KeyListResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *KeyListResponse) GetData() *UserKeysData {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterType((*KeyRequest)(nil), "fomo.keys.KeyRequest")
	proto.RegisterType((*GetUserKeyRequest)(nil), "fomo.keys.GetUserKeyRequest")
	proto.RegisterType((*GetUserKeysRequest)(nil), "fomo.keys.GetUserKeysRequest")
	proto.RegisterType((*RemoveKeyRequest)(nil), "fomo.keys.RemoveKeyRequest")
	proto.RegisterType((*Key)(nil), "fomo.keys.Key")
	proto.RegisterType((*UserKeyData)(nil), "fomo.keys.UserKeyData")
	proto.RegisterType((*UserKeysData)(nil), "fomo.keys.UserKeysData")
	proto.RegisterType((*KeyResponse)(nil), "fomo.keys.KeyResponse")
	proto.RegisterType((*KeyListResponse)(nil), "fomo.keys.KeyListResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for KeyService service

type KeyServiceClient interface {
	AddKey(ctx context.Context, in *KeyRequest, opts ...client.CallOption) (*KeyResponse, error)
	GetUserKey(ctx context.Context, in *GetUserKeyRequest, opts ...client.CallOption) (*KeyResponse, error)
	GetUserKeys(ctx context.Context, in *GetUserKeysRequest, opts ...client.CallOption) (*KeyListResponse, error)
	RemoveKey(ctx context.Context, in *RemoveKeyRequest, opts ...client.CallOption) (*KeyResponse, error)
	UpdateKeyDescription(ctx context.Context, in *KeyRequest, opts ...client.CallOption) (*KeyResponse, error)
}

type keyServiceClient struct {
	c           client.Client
	serviceName string
}

func NewKeyServiceClient(serviceName string, c client.Client) KeyServiceClient {
	if c == nil {
		c = client.NewClient()
	}
	if len(serviceName) == 0 {
		serviceName = "fomo.keys"
	}
	return &keyServiceClient{
		c:           c,
		serviceName: serviceName,
	}
}

func (c *keyServiceClient) AddKey(ctx context.Context, in *KeyRequest, opts ...client.CallOption) (*KeyResponse, error) {
	req := c.c.NewRequest(c.serviceName, "KeyService.AddKey", in)
	out := new(KeyResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyServiceClient) GetUserKey(ctx context.Context, in *GetUserKeyRequest, opts ...client.CallOption) (*KeyResponse, error) {
	req := c.c.NewRequest(c.serviceName, "KeyService.GetUserKey", in)
	out := new(KeyResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyServiceClient) GetUserKeys(ctx context.Context, in *GetUserKeysRequest, opts ...client.CallOption) (*KeyListResponse, error) {
	req := c.c.NewRequest(c.serviceName, "KeyService.GetUserKeys", in)
	out := new(KeyListResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyServiceClient) RemoveKey(ctx context.Context, in *RemoveKeyRequest, opts ...client.CallOption) (*KeyResponse, error) {
	req := c.c.NewRequest(c.serviceName, "KeyService.RemoveKey", in)
	out := new(KeyResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyServiceClient) UpdateKeyDescription(ctx context.Context, in *KeyRequest, opts ...client.CallOption) (*KeyResponse, error) {
	req := c.c.NewRequest(c.serviceName, "KeyService.UpdateKeyDescription", in)
	out := new(KeyResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for KeyService service

type KeyServiceHandler interface {
	AddKey(context.Context, *KeyRequest, *KeyResponse) error
	GetUserKey(context.Context, *GetUserKeyRequest, *KeyResponse) error
	GetUserKeys(context.Context, *GetUserKeysRequest, *KeyListResponse) error
	RemoveKey(context.Context, *RemoveKeyRequest, *KeyResponse) error
	UpdateKeyDescription(context.Context, *KeyRequest, *KeyResponse) error
}

func RegisterKeyServiceHandler(s server.Server, hdlr KeyServiceHandler, opts ...server.HandlerOption) {
	s.Handle(s.NewHandler(&KeyService{hdlr}, opts...))
}

type KeyService struct {
	KeyServiceHandler
}

func (h *KeyService) AddKey(ctx context.Context, in *KeyRequest, out *KeyResponse) error {
	return h.KeyServiceHandler.AddKey(ctx, in, out)
}

func (h *KeyService) GetUserKey(ctx context.Context, in *GetUserKeyRequest, out *KeyResponse) error {
	return h.KeyServiceHandler.GetUserKey(ctx, in, out)
}

func (h *KeyService) GetUserKeys(ctx context.Context, in *GetUserKeysRequest, out *KeyListResponse) error {
	return h.KeyServiceHandler.GetUserKeys(ctx, in, out)
}

func (h *KeyService) RemoveKey(ctx context.Context, in *RemoveKeyRequest, out *KeyResponse) error {
	return h.KeyServiceHandler.RemoveKey(ctx, in, out)
}

func (h *KeyService) UpdateKeyDescription(ctx context.Context, in *KeyRequest, out *KeyResponse) error {
	return h.KeyServiceHandler.UpdateKeyDescription(ctx, in, out)
}

func init() { proto.RegisterFile("proto/key/key.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 455 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x54, 0xc1, 0x8e, 0xd3, 0x30,
	0x10, 0xdd, 0x34, 0xdd, 0x94, 0x4e, 0x10, 0x2c, 0x66, 0x29, 0x56, 0x00, 0x29, 0xf2, 0x09, 0x01,
	0xca, 0x4a, 0xe1, 0xc4, 0x8d, 0x45, 0x91, 0x56, 0x4b, 0x39, 0x05, 0xed, 0x07, 0x98, 0x64, 0x58,
	0xa2, 0xa8, 0x4d, 0x88, 0xdd, 0x8a, 0x7c, 0x17, 0x37, 0x3e, 0x88, 0xef, 0x40, 0x76, 0xd2, 0xc4,
	0x49, 0xab, 0x22, 0xe0, 0xc0, 0xa1, 0x52, 0xc7, 0x33, 0xf3, 0xde, 0xf3, 0xf3, 0x4c, 0xe0, 0x61,
	0x59, 0x15, 0xb2, 0xb8, 0xc8, 0xb1, 0x56, 0xbf, 0x40, 0x47, 0x64, 0xfe, 0xb9, 0x58, 0x15, 0x41,
	0x8e, 0xb5, 0x60, 0x3f, 0x2c, 0x80, 0x25, 0xd6, 0x31, 0x7e, 0xdd, 0xa0, 0x90, 0xe4, 0x1c, 0x4e,
	0x73, 0xac, 0xaf, 0x23, 0x6a, 0xf9, 0xd6, 0xf3, 0x79, 0xdc, 0x04, 0x64, 0x01, 0xce, 0x46, 0x60,
	0x75, 0x1d, 0xd1, 0x89, 0x3e, 0x6e, 0x23, 0xe2, 0xc1, 0x1d, 0xfc, 0x96, 0x7c, 0xe1, 0xeb, 0x5b,
	0xa4, 0xb6, 0xce, 0x74, 0x31, 0x39, 0x03, 0x3b, 0xc7, 0x9a, 0x4e, 0xf5, 0xb1, 0xfa, 0xab, 0x50,
	0x04, 0x26, 0x15, 0x4a, 0x7a, 0xda, 0xa0, 0x34, 0x11, 0xf1, 0xc1, 0x4d, 0x51, 0x24, 0x55, 0x56,
	0xca, 0xac, 0x58, 0x53, 0x47, 0x27, 0xcd, 0x23, 0xdd, 0x29, 0xb9, 0xdc, 0x08, 0x3a, 0x6b, 0x3b,
	0x75, 0xc4, 0x2e, 0xe1, 0xc1, 0x15, 0xca, 0x1b, 0x81, 0x95, 0x71, 0x85, 0x5e, 0xac, 0x35, 0x10,
	0xdb, 0x5d, 0x6d, 0x62, 0x5c, 0x8d, 0xbd, 0x02, 0xd2, 0x43, 0x88, 0xdf, 0x60, 0xb0, 0xb7, 0x70,
	0x16, 0xe3, 0xaa, 0xd8, 0xe2, 0x5f, 0xf3, 0x7d, 0xb7, 0xc0, 0x5e, 0x62, 0xfd, 0x5f, 0x8c, 0xee,
	0x6d, 0x74, 0x4c, 0x1b, 0xc7, 0x0f, 0x30, 0xdb, 0x7b, 0x00, 0x76, 0x01, 0x6e, 0x6b, 0x51, 0xc4,
	0x25, 0x27, 0x7e, 0x43, 0xa9, 0xa4, 0xbb, 0xe1, 0xbd, 0xa0, 0x9b, 0xa6, 0x40, 0xd9, 0xa2, 0x52,
	0x2c, 0x84, 0xbb, 0x3b, 0x4f, 0x75, 0x07, 0x83, 0xa9, 0x2a, 0xa0, 0x96, 0x6f, 0x1f, 0x68, 0xd1,
	0x39, 0x96, 0x83, 0xab, 0x6d, 0x15, 0x65, 0xb1, 0x16, 0x68, 0xa8, 0xb5, 0x06, 0x6a, 0x29, 0xcc,
	0x56, 0x28, 0x04, 0xbf, 0xc5, 0xd6, 0xa4, 0x5d, 0x48, 0x5e, 0xc0, 0x34, 0xe5, 0x92, 0x6b, 0x87,
	0xdc, 0x70, 0x61, 0x90, 0x18, 0xe2, 0x63, 0x5d, 0xc3, 0x4a, 0xb8, 0xbf, 0xc4, 0xfa, 0x43, 0x26,
	0xe4, 0x3f, 0x10, 0xbe, 0x1c, 0x10, 0x3e, 0xde, 0x27, 0x14, 0x3d, 0x63, 0xf8, 0x73, 0xa2, 0x37,
	0xed, 0x23, 0x56, 0xdb, 0x2c, 0x41, 0xf2, 0x06, 0x9c, 0xcb, 0x34, 0x55, 0xa3, 0xf0, 0x68, 0xe4,
	0x46, 0x33, 0x57, 0xde, 0x62, 0x7c, 0xdc, 0xc8, 0x64, 0x27, 0x24, 0x02, 0xe8, 0x67, 0x96, 0x3c,
	0x35, 0xea, 0xf6, 0xb6, 0xe1, 0x08, 0xca, 0x7b, 0x70, 0x8d, 0xc9, 0x27, 0xcf, 0x0e, 0xc2, 0xec,
	0x36, 0xc2, 0xf3, 0x86, 0x38, 0xa6, 0x71, 0xec, 0x84, 0xbc, 0x83, 0x79, 0xb7, 0x17, 0xe4, 0x89,
	0x51, 0x3a, 0xde, 0x96, 0x23, 0x7a, 0xae, 0xe0, 0xfc, 0xa6, 0x4c, 0xb9, 0x54, 0xd5, 0x91, 0xb1,
	0xfc, 0x7f, 0x6a, 0xcf, 0x27, 0x47, 0x7f, 0xe4, 0x5e, 0xff, 0x0a, 0x00, 0x00, 0xff, 0xff, 0xba,
	0x5d, 0x73, 0xba, 0xfb, 0x04, 0x00, 0x00,
}
