// Code generated by protoc-gen-go. DO NOT EDIT.
// source: github.com/asciiu/gomo/execution-engine/proto/engine/engine.proto

/*
Package engine is a generated protocol buffer package.

It is generated from these files:
	github.com/asciiu/gomo/execution-engine/proto/engine/engine.proto

It has these top-level messages:
	ActiveRequest
	KillRequest
	KillUserRequest
	NewPlanRequest
	Order
	Trigger
	Plan
	PlanList
	PlanResponse
*/
package engine

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "golang.org/x/net/context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Requests
type ActiveRequest struct {
	Exchange   string `protobuf:"bytes,1,opt,name=exchange" json:"exchange"`
	MarketName string `protobuf:"bytes,2,opt,name=marketName" json:"marketName"`
}

func (m *ActiveRequest) Reset()                    { *m = ActiveRequest{} }
func (m *ActiveRequest) String() string            { return proto.CompactTextString(m) }
func (*ActiveRequest) ProtoMessage()               {}
func (*ActiveRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *ActiveRequest) GetExchange() string {
	if m != nil {
		return m.Exchange
	}
	return ""
}

func (m *ActiveRequest) GetMarketName() string {
	if m != nil {
		return m.MarketName
	}
	return ""
}

type KillRequest struct {
	PlanID string `protobuf:"bytes,1,opt,name=planID" json:"planID"`
}

func (m *KillRequest) Reset()                    { *m = KillRequest{} }
func (m *KillRequest) String() string            { return proto.CompactTextString(m) }
func (*KillRequest) ProtoMessage()               {}
func (*KillRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *KillRequest) GetPlanID() string {
	if m != nil {
		return m.PlanID
	}
	return ""
}

type KillUserRequest struct {
	UserID string `protobuf:"bytes,1,opt,name=userID" json:"userID"`
}

func (m *KillUserRequest) Reset()                    { *m = KillUserRequest{} }
func (m *KillUserRequest) String() string            { return proto.CompactTextString(m) }
func (*KillUserRequest) ProtoMessage()               {}
func (*KillUserRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *KillUserRequest) GetUserID() string {
	if m != nil {
		return m.UserID
	}
	return ""
}

type NewPlanRequest struct {
	PlanID                string   `protobuf:"bytes,1,opt,name=planID" json:"planID"`
	UserID                string   `protobuf:"bytes,2,opt,name=userID" json:"userID"`
	ActiveCurrencySymbol  string   `protobuf:"bytes,3,opt,name=activeCurrencySymbol" json:"activeCurrencySymbol"`
	ActiveCurrencyBalance float64  `protobuf:"fixed64,4,opt,name=activeCurrencyBalance" json:"activeCurrencyBalance"`
	CloseOnComplete       bool     `protobuf:"varint,5,opt,name=closeOnComplete" json:"closeOnComplete"`
	Orders                []*Order `protobuf:"bytes,6,rep,name=orders" json:"orders"`
}

func (m *NewPlanRequest) Reset()                    { *m = NewPlanRequest{} }
func (m *NewPlanRequest) String() string            { return proto.CompactTextString(m) }
func (*NewPlanRequest) ProtoMessage()               {}
func (*NewPlanRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *NewPlanRequest) GetPlanID() string {
	if m != nil {
		return m.PlanID
	}
	return ""
}

func (m *NewPlanRequest) GetUserID() string {
	if m != nil {
		return m.UserID
	}
	return ""
}

func (m *NewPlanRequest) GetActiveCurrencySymbol() string {
	if m != nil {
		return m.ActiveCurrencySymbol
	}
	return ""
}

func (m *NewPlanRequest) GetActiveCurrencyBalance() float64 {
	if m != nil {
		return m.ActiveCurrencyBalance
	}
	return 0
}

func (m *NewPlanRequest) GetCloseOnComplete() bool {
	if m != nil {
		return m.CloseOnComplete
	}
	return false
}

func (m *NewPlanRequest) GetOrders() []*Order {
	if m != nil {
		return m.Orders
	}
	return nil
}

type Order struct {
	OrderID     string     `protobuf:"bytes,1,opt,name=orderID" json:"orderID"`
	Exchange    string     `protobuf:"bytes,2,opt,name=exchange" json:"exchange"`
	MarketName  string     `protobuf:"bytes,3,opt,name=marketName" json:"marketName"`
	Side        string     `protobuf:"bytes,4,opt,name=side" json:"side"`
	LimitPrice  float64    `protobuf:"fixed64,5,opt,name=limitPrice" json:"limitPrice"`
	OrderType   string     `protobuf:"bytes,6,opt,name=orderType" json:"orderType"`
	OrderStatus string     `protobuf:"bytes,7,opt,name=orderStatus" json:"orderStatus"`
	AccountID   string     `protobuf:"bytes,8,opt,name=accountID" json:"accountID"`
	AccountType string     `protobuf:"bytes,9,opt,name=accountType" json:"accountType"`
	KeyPublic   string     `protobuf:"bytes,10,opt,name=keyPublic" json:"keyPublic"`
	KeySecret   string     `protobuf:"bytes,11,opt,name=keySecret" json:"keySecret"`
	Triggers    []*Trigger `protobuf:"bytes,12,rep,name=triggers" json:"triggers"`
}

func (m *Order) Reset()                    { *m = Order{} }
func (m *Order) String() string            { return proto.CompactTextString(m) }
func (*Order) ProtoMessage()               {}
func (*Order) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *Order) GetOrderID() string {
	if m != nil {
		return m.OrderID
	}
	return ""
}

func (m *Order) GetExchange() string {
	if m != nil {
		return m.Exchange
	}
	return ""
}

func (m *Order) GetMarketName() string {
	if m != nil {
		return m.MarketName
	}
	return ""
}

func (m *Order) GetSide() string {
	if m != nil {
		return m.Side
	}
	return ""
}

func (m *Order) GetLimitPrice() float64 {
	if m != nil {
		return m.LimitPrice
	}
	return 0
}

func (m *Order) GetOrderType() string {
	if m != nil {
		return m.OrderType
	}
	return ""
}

func (m *Order) GetOrderStatus() string {
	if m != nil {
		return m.OrderStatus
	}
	return ""
}

func (m *Order) GetAccountID() string {
	if m != nil {
		return m.AccountID
	}
	return ""
}

func (m *Order) GetAccountType() string {
	if m != nil {
		return m.AccountType
	}
	return ""
}

func (m *Order) GetKeyPublic() string {
	if m != nil {
		return m.KeyPublic
	}
	return ""
}

func (m *Order) GetKeySecret() string {
	if m != nil {
		return m.KeySecret
	}
	return ""
}

func (m *Order) GetTriggers() []*Trigger {
	if m != nil {
		return m.Triggers
	}
	return nil
}

type Trigger struct {
	TriggerID string   `protobuf:"bytes,1,opt,name=triggerID" json:"triggerID"`
	OrderID   string   `protobuf:"bytes,2,opt,name=orderID" json:"orderID"`
	Name      string   `protobuf:"bytes,5,opt,name=name" json:"name"`
	Code      string   `protobuf:"bytes,6,opt,name=code" json:"code"`
	Triggered bool     `protobuf:"varint,7,opt,name=triggered" json:"triggered"`
	Actions   []string `protobuf:"bytes,8,rep,name=actions" json:"actions"`
}

func (m *Trigger) Reset()                    { *m = Trigger{} }
func (m *Trigger) String() string            { return proto.CompactTextString(m) }
func (*Trigger) ProtoMessage()               {}
func (*Trigger) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *Trigger) GetTriggerID() string {
	if m != nil {
		return m.TriggerID
	}
	return ""
}

func (m *Trigger) GetOrderID() string {
	if m != nil {
		return m.OrderID
	}
	return ""
}

func (m *Trigger) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Trigger) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

func (m *Trigger) GetTriggered() bool {
	if m != nil {
		return m.Triggered
	}
	return false
}

func (m *Trigger) GetActions() []string {
	if m != nil {
		return m.Actions
	}
	return nil
}

// Responses
type Plan struct {
	PlanID string `protobuf:"bytes,1,opt,name=planID" json:"planID"`
}

func (m *Plan) Reset()                    { *m = Plan{} }
func (m *Plan) String() string            { return proto.CompactTextString(m) }
func (*Plan) ProtoMessage()               {}
func (*Plan) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *Plan) GetPlanID() string {
	if m != nil {
		return m.PlanID
	}
	return ""
}

type PlanList struct {
	Plans []*Plan `protobuf:"bytes,1,rep,name=plans" json:"plans"`
}

func (m *PlanList) Reset()                    { *m = PlanList{} }
func (m *PlanList) String() string            { return proto.CompactTextString(m) }
func (*PlanList) ProtoMessage()               {}
func (*PlanList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *PlanList) GetPlans() []*Plan {
	if m != nil {
		return m.Plans
	}
	return nil
}

type PlanResponse struct {
	Status  string    `protobuf:"bytes,1,opt,name=status" json:"status"`
	Message string    `protobuf:"bytes,2,opt,name=message" json:"message"`
	Data    *PlanList `protobuf:"bytes,3,opt,name=data" json:"data"`
}

func (m *PlanResponse) Reset()                    { *m = PlanResponse{} }
func (m *PlanResponse) String() string            { return proto.CompactTextString(m) }
func (*PlanResponse) ProtoMessage()               {}
func (*PlanResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *PlanResponse) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *PlanResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *PlanResponse) GetData() *PlanList {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterType((*ActiveRequest)(nil), "engine.ActiveRequest")
	proto.RegisterType((*KillRequest)(nil), "engine.KillRequest")
	proto.RegisterType((*KillUserRequest)(nil), "engine.KillUserRequest")
	proto.RegisterType((*NewPlanRequest)(nil), "engine.NewPlanRequest")
	proto.RegisterType((*Order)(nil), "engine.Order")
	proto.RegisterType((*Trigger)(nil), "engine.Trigger")
	proto.RegisterType((*Plan)(nil), "engine.Plan")
	proto.RegisterType((*PlanList)(nil), "engine.PlanList")
	proto.RegisterType((*PlanResponse)(nil), "engine.PlanResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for ExecutionEngine service

type ExecutionEngineClient interface {
	AddPlan(ctx context.Context, in *NewPlanRequest, opts ...client.CallOption) (*PlanResponse, error)
	GetActivePlans(ctx context.Context, in *ActiveRequest, opts ...client.CallOption) (*PlanResponse, error)
	KillPlan(ctx context.Context, in *KillRequest, opts ...client.CallOption) (*PlanResponse, error)
	KillUserPlans(ctx context.Context, in *KillUserRequest, opts ...client.CallOption) (*PlanResponse, error)
}

type executionEngineClient struct {
	c           client.Client
	serviceName string
}

func NewExecutionEngineClient(serviceName string, c client.Client) ExecutionEngineClient {
	if c == nil {
		c = client.NewClient()
	}
	if len(serviceName) == 0 {
		serviceName = "engine"
	}
	return &executionEngineClient{
		c:           c,
		serviceName: serviceName,
	}
}

func (c *executionEngineClient) AddPlan(ctx context.Context, in *NewPlanRequest, opts ...client.CallOption) (*PlanResponse, error) {
	req := c.c.NewRequest(c.serviceName, "ExecutionEngine.AddPlan", in)
	out := new(PlanResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *executionEngineClient) GetActivePlans(ctx context.Context, in *ActiveRequest, opts ...client.CallOption) (*PlanResponse, error) {
	req := c.c.NewRequest(c.serviceName, "ExecutionEngine.GetActivePlans", in)
	out := new(PlanResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *executionEngineClient) KillPlan(ctx context.Context, in *KillRequest, opts ...client.CallOption) (*PlanResponse, error) {
	req := c.c.NewRequest(c.serviceName, "ExecutionEngine.KillPlan", in)
	out := new(PlanResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *executionEngineClient) KillUserPlans(ctx context.Context, in *KillUserRequest, opts ...client.CallOption) (*PlanResponse, error) {
	req := c.c.NewRequest(c.serviceName, "ExecutionEngine.KillUserPlans", in)
	out := new(PlanResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ExecutionEngine service

type ExecutionEngineHandler interface {
	AddPlan(context.Context, *NewPlanRequest, *PlanResponse) error
	GetActivePlans(context.Context, *ActiveRequest, *PlanResponse) error
	KillPlan(context.Context, *KillRequest, *PlanResponse) error
	KillUserPlans(context.Context, *KillUserRequest, *PlanResponse) error
}

func RegisterExecutionEngineHandler(s server.Server, hdlr ExecutionEngineHandler, opts ...server.HandlerOption) {
	s.Handle(s.NewHandler(&ExecutionEngine{hdlr}, opts...))
}

type ExecutionEngine struct {
	ExecutionEngineHandler
}

func (h *ExecutionEngine) AddPlan(ctx context.Context, in *NewPlanRequest, out *PlanResponse) error {
	return h.ExecutionEngineHandler.AddPlan(ctx, in, out)
}

func (h *ExecutionEngine) GetActivePlans(ctx context.Context, in *ActiveRequest, out *PlanResponse) error {
	return h.ExecutionEngineHandler.GetActivePlans(ctx, in, out)
}

func (h *ExecutionEngine) KillPlan(ctx context.Context, in *KillRequest, out *PlanResponse) error {
	return h.ExecutionEngineHandler.KillPlan(ctx, in, out)
}

func (h *ExecutionEngine) KillUserPlans(ctx context.Context, in *KillUserRequest, out *PlanResponse) error {
	return h.ExecutionEngineHandler.KillUserPlans(ctx, in, out)
}

func init() {
	proto.RegisterFile("github.com/asciiu/gomo/execution-engine/proto/engine/engine.proto", fileDescriptor0)
}

var fileDescriptor0 = []byte{
	// 658 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x54, 0xed, 0x6e, 0xd3, 0x4a,
	0x10, 0xbd, 0xce, 0xa7, 0x33, 0x69, 0x9b, 0xab, 0xbd, 0xed, 0xbd, 0x56, 0x75, 0x55, 0x45, 0x16,
	0x95, 0x82, 0x10, 0x89, 0x14, 0x90, 0x10, 0xbf, 0xa0, 0xb4, 0x15, 0xaa, 0x8a, 0xda, 0xca, 0x2d,
	0x0f, 0xb0, 0x59, 0x0f, 0xe9, 0xaa, 0xf6, 0x6e, 0xf0, 0xae, 0xa1, 0x79, 0x03, 0x5e, 0x83, 0xd7,
	0x84, 0x3f, 0x68, 0x77, 0x6d, 0xc7, 0xa9, 0x1a, 0xf8, 0x95, 0xcc, 0x39, 0x73, 0xce, 0xee, 0xcc,
	0x78, 0x07, 0x8e, 0xe6, 0x5c, 0xdf, 0xe6, 0xb3, 0x31, 0x93, 0xe9, 0x84, 0x2a, 0xc6, 0x79, 0x3e,
	0x99, 0xcb, 0x54, 0x4e, 0xf0, 0x1e, 0x59, 0xae, 0xb9, 0x14, 0xcf, 0x51, 0xcc, 0xb9, 0xc0, 0xc9,
	0x22, 0x93, 0x5a, 0x4e, 0x8a, 0xc0, 0xfd, 0x8c, 0x2d, 0x46, 0x3a, 0x2e, 0x0a, 0xcf, 0x61, 0xfb,
	0x88, 0x69, 0xfe, 0x05, 0x23, 0xfc, 0x9c, 0xa3, 0xd2, 0x64, 0x1f, 0x7c, 0xbc, 0x67, 0xb7, 0x54,
	0xcc, 0x31, 0xf0, 0x86, 0xde, 0xa8, 0x17, 0x55, 0x31, 0x39, 0x00, 0x48, 0x69, 0x76, 0x87, 0xfa,
	0x82, 0xa6, 0x18, 0x34, 0x2c, 0x5b, 0x43, 0xc2, 0x43, 0xe8, 0x9f, 0xf3, 0x24, 0x29, 0xad, 0xfe,
	0x85, 0xce, 0x22, 0xa1, 0xe2, 0xec, 0xa4, 0x30, 0x2a, 0xa2, 0xf0, 0x29, 0x0c, 0x4c, 0xda, 0x47,
	0x85, 0x59, 0x2d, 0x35, 0x57, 0x98, 0xad, 0x52, 0x5d, 0x14, 0xfe, 0xf4, 0x60, 0xe7, 0x02, 0xbf,
	0x5e, 0x25, 0x54, 0xfc, 0xc1, 0xb5, 0x66, 0xd1, 0xa8, 0x5b, 0x90, 0x29, 0xec, 0x52, 0x5b, 0xe1,
	0x71, 0x9e, 0x65, 0x28, 0xd8, 0xf2, 0x7a, 0x99, 0xce, 0x64, 0x12, 0x34, 0x6d, 0xd6, 0xa3, 0x1c,
	0x79, 0x09, 0x7b, 0xeb, 0xf8, 0x3b, 0x9a, 0x50, 0xc1, 0x30, 0x68, 0x0d, 0xbd, 0x91, 0x17, 0x3d,
	0x4e, 0x92, 0x11, 0x0c, 0x58, 0x22, 0x15, 0x5e, 0x8a, 0x63, 0x99, 0x2e, 0x12, 0xd4, 0x18, 0xb4,
	0x87, 0xde, 0xc8, 0x8f, 0x1e, 0xc2, 0xe4, 0x10, 0x3a, 0x32, 0x8b, 0x31, 0x53, 0x41, 0x67, 0xd8,
	0x1c, 0xf5, 0xa7, 0xdb, 0xe3, 0x62, 0x38, 0x97, 0x06, 0x8d, 0x0a, 0x32, 0xfc, 0xd1, 0x80, 0xb6,
	0x45, 0x48, 0x00, 0x5d, 0x8b, 0x55, 0x55, 0x97, 0xe1, 0xda, 0xbc, 0x1a, 0xbf, 0x9d, 0x57, 0xf3,
	0xe1, 0xbc, 0x08, 0x81, 0x96, 0xe2, 0xb1, 0xab, 0xaa, 0x17, 0xd9, 0xff, 0x46, 0x93, 0xf0, 0x94,
	0xeb, 0xab, 0x8c, 0x33, 0x77, 0x7f, 0x2f, 0xaa, 0x21, 0xe4, 0x7f, 0xe8, 0xd9, 0xa3, 0x6f, 0x96,
	0x0b, 0x0c, 0x3a, 0x56, 0xb8, 0x02, 0xc8, 0x10, 0xfa, 0x36, 0xb8, 0xd6, 0x54, 0xe7, 0x2a, 0xe8,
	0x5a, 0xbe, 0x0e, 0x19, 0x3d, 0x65, 0x4c, 0xe6, 0x42, 0x9f, 0x9d, 0x04, 0xbe, 0xd3, 0x57, 0x80,
	0xd1, 0x17, 0x81, 0xf5, 0xef, 0x39, 0x7d, 0x0d, 0x32, 0xfa, 0x3b, 0x5c, 0x5e, 0xe5, 0xb3, 0x84,
	0xb3, 0x00, 0x9c, 0xbe, 0x02, 0x0a, 0xf6, 0x1a, 0x59, 0x86, 0x3a, 0xe8, 0x57, 0xac, 0x03, 0xc8,
	0x33, 0xf0, 0x75, 0xc6, 0xe7, 0x73, 0xd3, 0xf8, 0x2d, 0xdb, 0xf8, 0x41, 0xd9, 0xf8, 0x1b, 0x87,
	0x47, 0x55, 0x42, 0xf8, 0xdd, 0x83, 0x6e, 0x81, 0x1a, 0xdb, 0x02, 0xaf, 0x06, 0xb0, 0x02, 0xea,
	0xc3, 0x69, 0xac, 0x0f, 0x87, 0x40, 0x4b, 0x98, 0xd6, 0xb7, 0x5d, 0x83, 0x45, 0xd1, 0x74, 0x26,
	0xe3, 0xb2, 0x77, 0xf6, 0x7f, 0xcd, 0x1f, 0x63, 0xdb, 0x34, 0x3f, 0x5a, 0x01, 0xc6, 0xdf, 0x7c,
	0x70, 0x52, 0xa8, 0xc0, 0x1f, 0x36, 0x8d, 0x7f, 0x11, 0x86, 0x07, 0xd0, 0x32, 0x4f, 0x63, 0xe3,
	0x4b, 0x1b, 0x83, 0x6f, 0xf8, 0x0f, 0x5c, 0x69, 0x12, 0x42, 0xdb, 0xa0, 0x2a, 0xf0, 0x6c, 0xe5,
	0x5b, 0x65, 0xe5, 0xf6, 0x6d, 0x39, 0x2a, 0xfc, 0x04, 0x5b, 0xee, 0xa9, 0xa9, 0x85, 0x14, 0x0a,
	0x8d, 0xaf, 0x72, 0x93, 0x2c, 0x7c, 0x5d, 0x64, 0x6e, 0x94, 0xa2, 0x52, 0xb4, 0xfa, 0xe6, 0xca,
	0x90, 0x3c, 0x81, 0x56, 0x4c, 0x35, 0xb5, 0x1f, 0x5b, 0x7f, 0xfa, 0x77, 0xfd, 0x10, 0x73, 0x8b,
	0xc8, 0xb2, 0xd3, 0x6f, 0x0d, 0x18, 0x9c, 0x96, 0xcb, 0xea, 0xd4, 0xa6, 0x90, 0xd7, 0xd0, 0x3d,
	0x8a, 0x63, 0x57, 0x4e, 0x29, 0x5b, 0x7f, 0xfa, 0xfb, 0xbb, 0x6b, 0x77, 0x2e, 0x2e, 0x19, 0xfe,
	0x45, 0xde, 0xc0, 0xce, 0x7b, 0xd4, 0x6e, 0x8f, 0x19, 0x4a, 0x91, 0xbd, 0x32, 0x73, 0x6d, 0xb9,
	0x6d, 0x34, 0x78, 0x05, 0xbe, 0xd9, 0x48, 0xf6, 0xf0, 0x7f, 0xca, 0x9c, 0xda, 0x2a, 0xdb, 0x28,
	0x7c, 0x0b, 0xdb, 0xe5, 0x2a, 0x73, 0x07, 0xff, 0x57, 0x57, 0xd7, 0x36, 0xdc, 0x26, 0x87, 0x59,
	0xc7, 0xee, 0xe3, 0x17, 0xbf, 0x02, 0x00, 0x00, 0xff, 0xff, 0x34, 0x22, 0xbc, 0x2f, 0xd4, 0x05,
	0x00, 0x00,
}
