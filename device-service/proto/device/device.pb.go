// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/device/device.proto

/*
Package go_micro_srv_device is a generated protocol buffer package.

It is generated from these files:
	proto/device/device.proto

It has these top-level messages:
	AddDeviceRequest
	GetUserDeviceRequest
	GetUserDevicesRequest
	RemoveDeviceRequest
	UpdateDeviceRequest
	Device
	UserDeviceData
	UserDevicesData
	DeviceResponse
	DeviceListResponse
*/
package go_micro_srv_device

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "golang.org/x/net/context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Requests
type AddDeviceRequest struct {
	UserId           string `protobuf:"bytes,1,opt,name=userId" json:"userId,omitempty"`
	DeviceType       string `protobuf:"bytes,2,opt,name=deviceType" json:"deviceType,omitempty"`
	ExternalDeviceId string `protobuf:"bytes,3,opt,name=externalDeviceId" json:"externalDeviceId,omitempty"`
	DeviceToken      string `protobuf:"bytes,4,opt,name=deviceToken" json:"deviceToken,omitempty"`
}

func (m *AddDeviceRequest) Reset()                    { *m = AddDeviceRequest{} }
func (m *AddDeviceRequest) String() string            { return proto.CompactTextString(m) }
func (*AddDeviceRequest) ProtoMessage()               {}
func (*AddDeviceRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *AddDeviceRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *AddDeviceRequest) GetDeviceType() string {
	if m != nil {
		return m.DeviceType
	}
	return ""
}

func (m *AddDeviceRequest) GetExternalDeviceId() string {
	if m != nil {
		return m.ExternalDeviceId
	}
	return ""
}

func (m *AddDeviceRequest) GetDeviceToken() string {
	if m != nil {
		return m.DeviceToken
	}
	return ""
}

type GetUserDeviceRequest struct {
	UserId   string `protobuf:"bytes,1,opt,name=userId" json:"userId,omitempty"`
	DeviceId string `protobuf:"bytes,2,opt,name=deviceId" json:"deviceId,omitempty"`
}

func (m *GetUserDeviceRequest) Reset()                    { *m = GetUserDeviceRequest{} }
func (m *GetUserDeviceRequest) String() string            { return proto.CompactTextString(m) }
func (*GetUserDeviceRequest) ProtoMessage()               {}
func (*GetUserDeviceRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *GetUserDeviceRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *GetUserDeviceRequest) GetDeviceId() string {
	if m != nil {
		return m.DeviceId
	}
	return ""
}

type GetUserDevicesRequest struct {
	UserId string `protobuf:"bytes,1,opt,name=userId" json:"userId,omitempty"`
}

func (m *GetUserDevicesRequest) Reset()                    { *m = GetUserDevicesRequest{} }
func (m *GetUserDevicesRequest) String() string            { return proto.CompactTextString(m) }
func (*GetUserDevicesRequest) ProtoMessage()               {}
func (*GetUserDevicesRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *GetUserDevicesRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

type RemoveDeviceRequest struct {
	UserId   string `protobuf:"bytes,1,opt,name=userId" json:"userId,omitempty"`
	DeviceId string `protobuf:"bytes,2,opt,name=deviceId" json:"deviceId,omitempty"`
}

func (m *RemoveDeviceRequest) Reset()                    { *m = RemoveDeviceRequest{} }
func (m *RemoveDeviceRequest) String() string            { return proto.CompactTextString(m) }
func (*RemoveDeviceRequest) ProtoMessage()               {}
func (*RemoveDeviceRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *RemoveDeviceRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *RemoveDeviceRequest) GetDeviceId() string {
	if m != nil {
		return m.DeviceId
	}
	return ""
}

type UpdateDeviceRequest struct {
	DeviceId         string `protobuf:"bytes,1,opt,name=deviceId" json:"deviceId,omitempty"`
	UserId           string `protobuf:"bytes,2,opt,name=userId" json:"userId,omitempty"`
	ExternalDeviceId string `protobuf:"bytes,3,opt,name=externalDeviceId" json:"externalDeviceId,omitempty"`
	DeviceType       string `protobuf:"bytes,4,opt,name=deviceType" json:"deviceType,omitempty"`
	DeviceToken      string `protobuf:"bytes,5,opt,name=deviceToken" json:"deviceToken,omitempty"`
}

func (m *UpdateDeviceRequest) Reset()                    { *m = UpdateDeviceRequest{} }
func (m *UpdateDeviceRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateDeviceRequest) ProtoMessage()               {}
func (*UpdateDeviceRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *UpdateDeviceRequest) GetDeviceId() string {
	if m != nil {
		return m.DeviceId
	}
	return ""
}

func (m *UpdateDeviceRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *UpdateDeviceRequest) GetExternalDeviceId() string {
	if m != nil {
		return m.ExternalDeviceId
	}
	return ""
}

func (m *UpdateDeviceRequest) GetDeviceType() string {
	if m != nil {
		return m.DeviceType
	}
	return ""
}

func (m *UpdateDeviceRequest) GetDeviceToken() string {
	if m != nil {
		return m.DeviceToken
	}
	return ""
}

// Responses
type Device struct {
	DeviceId         string `protobuf:"bytes,1,opt,name=deviceId" json:"deviceId,omitempty"`
	UserId           string `protobuf:"bytes,2,opt,name=userId" json:"userId,omitempty"`
	ExternalDeviceId string `protobuf:"bytes,3,opt,name=externalDeviceId" json:"externalDeviceId,omitempty"`
	DeviceType       string `protobuf:"bytes,4,opt,name=deviceType" json:"deviceType,omitempty"`
	DeviceToken      string `protobuf:"bytes,5,opt,name=deviceToken" json:"deviceToken,omitempty"`
}

func (m *Device) Reset()                    { *m = Device{} }
func (m *Device) String() string            { return proto.CompactTextString(m) }
func (*Device) ProtoMessage()               {}
func (*Device) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *Device) GetDeviceId() string {
	if m != nil {
		return m.DeviceId
	}
	return ""
}

func (m *Device) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *Device) GetExternalDeviceId() string {
	if m != nil {
		return m.ExternalDeviceId
	}
	return ""
}

func (m *Device) GetDeviceType() string {
	if m != nil {
		return m.DeviceType
	}
	return ""
}

func (m *Device) GetDeviceToken() string {
	if m != nil {
		return m.DeviceToken
	}
	return ""
}

type UserDeviceData struct {
	Device *Device `protobuf:"bytes,1,opt,name=device" json:"device,omitempty"`
}

func (m *UserDeviceData) Reset()                    { *m = UserDeviceData{} }
func (m *UserDeviceData) String() string            { return proto.CompactTextString(m) }
func (*UserDeviceData) ProtoMessage()               {}
func (*UserDeviceData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *UserDeviceData) GetDevice() *Device {
	if m != nil {
		return m.Device
	}
	return nil
}

type UserDevicesData struct {
	Device []*Device `protobuf:"bytes,1,rep,name=device" json:"device,omitempty"`
}

func (m *UserDevicesData) Reset()                    { *m = UserDevicesData{} }
func (m *UserDevicesData) String() string            { return proto.CompactTextString(m) }
func (*UserDevicesData) ProtoMessage()               {}
func (*UserDevicesData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *UserDevicesData) GetDevice() []*Device {
	if m != nil {
		return m.Device
	}
	return nil
}

type DeviceResponse struct {
	Status  string          `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
	Message string          `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
	Data    *UserDeviceData `protobuf:"bytes,3,opt,name=data" json:"data,omitempty"`
}

func (m *DeviceResponse) Reset()                    { *m = DeviceResponse{} }
func (m *DeviceResponse) String() string            { return proto.CompactTextString(m) }
func (*DeviceResponse) ProtoMessage()               {}
func (*DeviceResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *DeviceResponse) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *DeviceResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *DeviceResponse) GetData() *UserDeviceData {
	if m != nil {
		return m.Data
	}
	return nil
}

type DeviceListResponse struct {
	Status  string           `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
	Message string           `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
	Data    *UserDevicesData `protobuf:"bytes,3,opt,name=data" json:"data,omitempty"`
}

func (m *DeviceListResponse) Reset()                    { *m = DeviceListResponse{} }
func (m *DeviceListResponse) String() string            { return proto.CompactTextString(m) }
func (*DeviceListResponse) ProtoMessage()               {}
func (*DeviceListResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *DeviceListResponse) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *DeviceListResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *DeviceListResponse) GetData() *UserDevicesData {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterType((*AddDeviceRequest)(nil), "go.micro.srv.device.AddDeviceRequest")
	proto.RegisterType((*GetUserDeviceRequest)(nil), "go.micro.srv.device.GetUserDeviceRequest")
	proto.RegisterType((*GetUserDevicesRequest)(nil), "go.micro.srv.device.GetUserDevicesRequest")
	proto.RegisterType((*RemoveDeviceRequest)(nil), "go.micro.srv.device.RemoveDeviceRequest")
	proto.RegisterType((*UpdateDeviceRequest)(nil), "go.micro.srv.device.UpdateDeviceRequest")
	proto.RegisterType((*Device)(nil), "go.micro.srv.device.Device")
	proto.RegisterType((*UserDeviceData)(nil), "go.micro.srv.device.UserDeviceData")
	proto.RegisterType((*UserDevicesData)(nil), "go.micro.srv.device.UserDevicesData")
	proto.RegisterType((*DeviceResponse)(nil), "go.micro.srv.device.DeviceResponse")
	proto.RegisterType((*DeviceListResponse)(nil), "go.micro.srv.device.DeviceListResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for DeviceService service

type DeviceServiceClient interface {
	AddDevice(ctx context.Context, in *AddDeviceRequest, opts ...client.CallOption) (*DeviceResponse, error)
	GetUserDevice(ctx context.Context, in *GetUserDeviceRequest, opts ...client.CallOption) (*DeviceResponse, error)
	GetUserDevices(ctx context.Context, in *GetUserDevicesRequest, opts ...client.CallOption) (*DeviceListResponse, error)
	RemoveDevice(ctx context.Context, in *RemoveDeviceRequest, opts ...client.CallOption) (*DeviceResponse, error)
	UpdateDevice(ctx context.Context, in *UpdateDeviceRequest, opts ...client.CallOption) (*DeviceResponse, error)
}

type deviceServiceClient struct {
	c           client.Client
	serviceName string
}

func NewDeviceServiceClient(serviceName string, c client.Client) DeviceServiceClient {
	if c == nil {
		c = client.NewClient()
	}
	if len(serviceName) == 0 {
		serviceName = "go.micro.srv.device"
	}
	return &deviceServiceClient{
		c:           c,
		serviceName: serviceName,
	}
}

func (c *deviceServiceClient) AddDevice(ctx context.Context, in *AddDeviceRequest, opts ...client.CallOption) (*DeviceResponse, error) {
	req := c.c.NewRequest(c.serviceName, "DeviceService.AddDevice", in)
	out := new(DeviceResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceServiceClient) GetUserDevice(ctx context.Context, in *GetUserDeviceRequest, opts ...client.CallOption) (*DeviceResponse, error) {
	req := c.c.NewRequest(c.serviceName, "DeviceService.GetUserDevice", in)
	out := new(DeviceResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceServiceClient) GetUserDevices(ctx context.Context, in *GetUserDevicesRequest, opts ...client.CallOption) (*DeviceListResponse, error) {
	req := c.c.NewRequest(c.serviceName, "DeviceService.GetUserDevices", in)
	out := new(DeviceListResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceServiceClient) RemoveDevice(ctx context.Context, in *RemoveDeviceRequest, opts ...client.CallOption) (*DeviceResponse, error) {
	req := c.c.NewRequest(c.serviceName, "DeviceService.RemoveDevice", in)
	out := new(DeviceResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceServiceClient) UpdateDevice(ctx context.Context, in *UpdateDeviceRequest, opts ...client.CallOption) (*DeviceResponse, error) {
	req := c.c.NewRequest(c.serviceName, "DeviceService.UpdateDevice", in)
	out := new(DeviceResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for DeviceService service

type DeviceServiceHandler interface {
	AddDevice(context.Context, *AddDeviceRequest, *DeviceResponse) error
	GetUserDevice(context.Context, *GetUserDeviceRequest, *DeviceResponse) error
	GetUserDevices(context.Context, *GetUserDevicesRequest, *DeviceListResponse) error
	RemoveDevice(context.Context, *RemoveDeviceRequest, *DeviceResponse) error
	UpdateDevice(context.Context, *UpdateDeviceRequest, *DeviceResponse) error
}

func RegisterDeviceServiceHandler(s server.Server, hdlr DeviceServiceHandler, opts ...server.HandlerOption) {
	s.Handle(s.NewHandler(&DeviceService{hdlr}, opts...))
}

type DeviceService struct {
	DeviceServiceHandler
}

func (h *DeviceService) AddDevice(ctx context.Context, in *AddDeviceRequest, out *DeviceResponse) error {
	return h.DeviceServiceHandler.AddDevice(ctx, in, out)
}

func (h *DeviceService) GetUserDevice(ctx context.Context, in *GetUserDeviceRequest, out *DeviceResponse) error {
	return h.DeviceServiceHandler.GetUserDevice(ctx, in, out)
}

func (h *DeviceService) GetUserDevices(ctx context.Context, in *GetUserDevicesRequest, out *DeviceListResponse) error {
	return h.DeviceServiceHandler.GetUserDevices(ctx, in, out)
}

func (h *DeviceService) RemoveDevice(ctx context.Context, in *RemoveDeviceRequest, out *DeviceResponse) error {
	return h.DeviceServiceHandler.RemoveDevice(ctx, in, out)
}

func (h *DeviceService) UpdateDevice(ctx context.Context, in *UpdateDeviceRequest, out *DeviceResponse) error {
	return h.DeviceServiceHandler.UpdateDevice(ctx, in, out)
}

func init() { proto.RegisterFile("proto/device/device.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 461 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x55, 0xc1, 0xae, 0x12, 0x31,
	0x14, 0x7d, 0xf3, 0xc0, 0xd1, 0x77, 0x79, 0x0f, 0x49, 0x51, 0x33, 0x62, 0x62, 0x48, 0xd1, 0x88,
	0x2c, 0x86, 0x04, 0x16, 0xba, 0x35, 0x41, 0x0d, 0xc6, 0xd5, 0x28, 0x0b, 0x57, 0xa4, 0xd2, 0x1b,
	0x42, 0x14, 0x66, 0x9c, 0x16, 0xa2, 0x71, 0xe3, 0x67, 0xf8, 0x0d, 0xfe, 0x80, 0xbf, 0xe6, 0xd2,
	0xd8, 0xce, 0x40, 0xcb, 0x54, 0x18, 0xc3, 0xca, 0x15, 0xb9, 0x77, 0x7a, 0xcf, 0x39, 0xed, 0x69,
	0x0f, 0x70, 0x37, 0x49, 0x63, 0x19, 0xf7, 0x39, 0x6e, 0x16, 0x33, 0xcc, 0x7e, 0x42, 0xd5, 0x23,
	0xcd, 0x79, 0x1c, 0x2e, 0x17, 0xb3, 0x34, 0x0e, 0x45, 0xba, 0x09, 0xf5, 0x27, 0xfa, 0xdd, 0x83,
	0xc6, 0x33, 0xce, 0x47, 0xaa, 0x8a, 0xf0, 0xd3, 0x1a, 0x85, 0x24, 0x77, 0xc0, 0x5f, 0x0b, 0x4c,
	0xc7, 0x3c, 0xf0, 0xda, 0x5e, 0xf7, 0x22, 0xca, 0x2a, 0x72, 0x1f, 0x40, 0x8f, 0xbd, 0xfd, 0x92,
	0x60, 0x70, 0xae, 0xbe, 0x19, 0x1d, 0xd2, 0x83, 0x06, 0x7e, 0x96, 0x98, 0xae, 0xd8, 0x47, 0x0d,
	0x38, 0xe6, 0x41, 0x45, 0xad, 0x2a, 0xf4, 0x49, 0x1b, 0x6a, 0xd9, 0x64, 0xfc, 0x01, 0x57, 0x41,
	0x55, 0x2d, 0x33, 0x5b, 0xf4, 0x15, 0xdc, 0x7a, 0x89, 0x72, 0x22, 0x30, 0x2d, 0xa7, 0xae, 0x05,
	0x37, 0x78, 0xce, 0xaa, 0xb5, 0x6d, 0x6b, 0xda, 0x87, 0xdb, 0x16, 0x96, 0x38, 0x02, 0x46, 0xc7,
	0xd0, 0x8c, 0x70, 0x19, 0x6f, 0xf0, 0x74, 0xee, 0x9f, 0x1e, 0x34, 0x27, 0x09, 0x67, 0x72, 0x0f,
	0xcb, 0x9c, 0xf1, 0xec, 0x19, 0x83, 0xe7, 0xdc, 0xe2, 0xf9, 0x97, 0x13, 0xb6, 0xdd, 0xaa, 0x16,
	0xdc, 0xda, 0x73, 0xe0, 0x5a, 0xd1, 0x81, 0x1f, 0x1e, 0xf8, 0x1a, 0xee, 0x3f, 0x10, 0xfb, 0x1c,
	0xea, 0x3b, 0x7f, 0x47, 0x4c, 0x32, 0x32, 0x04, 0x5f, 0x2f, 0x50, 0x8a, 0x6b, 0x83, 0x7b, 0xa1,
	0xe3, 0x05, 0x84, 0x99, 0x29, 0xd9, 0x52, 0xfa, 0x02, 0x6e, 0x1a, 0xd7, 0xa4, 0x80, 0x53, 0x29,
	0x8b, 0xf3, 0x15, 0xea, 0xb9, 0xdd, 0x22, 0x89, 0x57, 0x02, 0xff, 0x1c, 0x93, 0x90, 0x4c, 0xae,
	0x45, 0x7e, 0x77, 0x74, 0x45, 0x02, 0xb8, 0xbe, 0x44, 0x21, 0xd8, 0x3c, 0x7f, 0x52, 0x79, 0x49,
	0x9e, 0x40, 0x95, 0x33, 0xc9, 0xd4, 0xa1, 0xd5, 0x06, 0x1d, 0x27, 0xad, 0xbd, 0xe7, 0x48, 0x0d,
	0xd0, 0x6f, 0x1e, 0x10, 0xdd, 0x7c, 0xbd, 0x10, 0xf2, 0x04, 0x05, 0x4f, 0x2d, 0x05, 0x0f, 0x8e,
	0x28, 0x10, 0x3b, 0x09, 0x83, 0x5f, 0x15, 0xb8, 0xd2, 0xdd, 0x37, 0x98, 0xaa, 0x2b, 0xf4, 0x0e,
	0x2e, 0xb6, 0x49, 0x43, 0x1e, 0x3a, 0xa1, 0xf6, 0x93, 0xa8, 0xd5, 0x39, 0x74, 0xd4, 0xd9, 0xb6,
	0xe8, 0x19, 0x61, 0x70, 0x65, 0x3d, 0x6f, 0xf2, 0xd8, 0x39, 0xe7, 0x8a, 0x93, 0xb2, 0x14, 0x73,
	0xa8, 0xdb, 0x09, 0x42, 0x7a, 0xc7, 0x39, 0xf2, 0x98, 0x69, 0x3d, 0x3a, 0x40, 0x62, 0x5a, 0x44,
	0xcf, 0xc8, 0x14, 0x2e, 0xcd, 0xe4, 0x21, 0x5d, 0xe7, 0xa8, 0x23, 0x9c, 0xca, 0xee, 0x64, 0x0a,
	0x97, 0x66, 0x1c, 0xfd, 0x85, 0xc0, 0x91, 0x58, 0x25, 0x09, 0xde, 0xfb, 0xea, 0xff, 0x66, 0xf8,
	0x3b, 0x00, 0x00, 0xff, 0xff, 0x15, 0x6c, 0x9a, 0x62, 0x8c, 0x06, 0x00, 0x00,
}
