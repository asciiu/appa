{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "https"
  ],
  "swagger": "2.0",
  "info": {
    "description": "Endpoints labeled open do not require authentication. The protected endpoints on the other hand, do require\nauthentication. I'm not sure how long the jwt token should last. I'm thinking we should set the expire on\nthat token to be super short - like 5 minutes (upto an hour maybe?) to minimize the amount of time an\nattacker can use that token. The refresh token will last longer - currently 7 days. If you make a request\nto a protected endpoint using a \"Refresh\" token in your request headers, you will receive a new\nauthorization token (set-authorization) and refresh token (set-refresh) in the response headers when\nyou make a request with an expired authorization token. You MUST replace both tokens in your request headers\nto stay authenticated. The old refresh token gets replaced on the backend therefore, you need to use the\nnew refresh token to remain actively logged in.",
    "title": "FOMO API",
    "version": "0.0.1"
  },
  "host": "stage.fomo.exchange",
  "basePath": "/api",
  "paths": {
    "/accounts": {
      "get": {
        "description": "Returns all accounts with their balances.",
        "tags": [
          "accounts"
        ],
        "summary": "get user accounts (protected)",
        "operationId": "GetUserAccountsParams",
        "responses": {
          "200": {
            "$ref": "#/responses/ResponseAccountListSuccess"
          },
          "500": {
            "description": "the message will state what the internal server error was with \"status\": \"error\"",
            "schema": {
              "$ref": "#/definitions/responseError"
            }
          }
        }
      },
      "post": {
        "description": "An exchange account is associated with balances. Paper accounts may also have optional client specified balances.\nReal exchange accounts require the public/secret key pair to populate the account balances. All balances for each\naccount will be wrapped in an account object.",
        "tags": [
          "accounts"
        ],
        "summary": "add new exchange account (protected)",
        "operationId": "PostAccount",
        "parameters": [
          {
            "x-go-name": "Exchange",
            "description": "Required exchange for account. Specify 'binance', 'binance paper', '... paper', etc",
            "name": "exchange",
            "in": "body",
            "schema": {
              "type": "string"
            }
          },
          {
            "x-go-name": "KeyPublic",
            "description": "Optional public viewable key-secret pair. This value is required for non paper accounts.",
            "name": "keyPublic",
            "in": "body",
            "schema": {
              "type": "string"
            }
          },
          {
            "x-go-name": "KeySecret",
            "description": "Optional init timestamp for plan RFC3339 formatted (e.g. 2018-08-26T22:49:10.168652Z). This timestamp will be used to measure initial user currency balance (valuation in user preferred currency)",
            "name": "keySecret",
            "in": "body",
            "schema": {
              "type": "string"
            }
          },
          {
            "x-go-name": "Title",
            "description": "Required title",
            "name": "title",
            "in": "body",
            "schema": {
              "type": "string"
            }
          },
          {
            "x-go-name": "Color",
            "description": "Required color",
            "name": "color",
            "in": "body",
            "schema": {
              "type": "string"
            }
          },
          {
            "x-go-name": "Description",
            "description": "Optional defaults to 'active' status. Valid input status is 'active', 'inactive', or 'historic'",
            "name": "description",
            "in": "body",
            "schema": {
              "type": "string"
            }
          },
          {
            "x-go-name": "Balances",
            "description": "Optional balances for a paper account",
            "name": "balances",
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/NewBalanceReq"
              }
            }
          },
          {
            "x-go-name": "AccountType",
            "description": "Required type",
            "name": "type",
            "in": "body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "\"data\" will contain account data",
            "schema": {
              "$ref": "#/definitions/ResponseAccountSuccess"
            }
          },
          "400": {
            "description": "missing or incorrect params with \"status\": \"fail\"",
            "schema": {
              "$ref": "#/definitions/responseError"
            }
          },
          "500": {
            "description": "the message will state what the internal server error was with \"status\": \"error\"",
            "schema": {
              "$ref": "#/definitions/responseError"
            }
          }
        }
      }
    },
    "/accounts/:accountID": {
      "get": {
        "description": "Returns account deets with balances.",
        "tags": [
          "accounts"
        ],
        "summary": "get account by accountID (protected)",
        "operationId": "GetAccountParms",
        "responses": {
          "200": {
            "description": "\"data\" will contain account deets.",
            "schema": {
              "$ref": "#/definitions/ResponseAccountSuccess"
            }
          },
          "500": {
            "description": "the message will state what the internal server error was with \"status\": \"error\"",
            "schema": {
              "$ref": "#/definitions/responseError"
            }
          }
        }
      },
      "put": {
        "description": "You can update the account's keys and description. Once an account exchange has been set you cannot change\nthe exchange.",
        "tags": [
          "accounts"
        ],
        "summary": "update a account (protected)",
        "operationId": "UpdateAccountParams",
        "parameters": [
          {
            "x-go-name": "KeyPublic",
            "description": "Optional public viewable key-secret pair. This value is required for non paper accounts.",
            "name": "keyPublic",
            "in": "body",
            "schema": {
              "type": "string"
            }
          },
          {
            "x-go-name": "KeySecret",
            "description": "Optional init timestamp for plan RFC3339 formatted (e.g. 2018-08-26T22:49:10.168652Z). This timestamp will be used to measure initial user currency balance (valuation in user preferred currency)",
            "name": "keySecret",
            "in": "body",
            "schema": {
              "type": "string"
            }
          },
          {
            "x-go-name": "Color",
            "description": "Optional color",
            "name": "color",
            "in": "body",
            "schema": {
              "type": "string"
            }
          },
          {
            "x-go-name": "Description",
            "description": "Optional defaults to 'active' status. Valid input status is 'active', 'inactive', or 'historic'",
            "name": "description",
            "in": "body",
            "schema": {
              "type": "string"
            }
          },
          {
            "x-go-name": "Title",
            "description": "Optional title",
            "name": "title",
            "in": "body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/responseAccountSuccess"
          },
          "500": {
            "description": "the message will state what the internal server error was with \"status\": \"error\" \"data\" will contain order info with \"status\": \"success\"",
            "schema": {
              "$ref": "#/definitions/responseError"
            }
          }
        }
      },
      "delete": {
        "description": "This will set the status of an account to deleted.",
        "tags": [
          "accounts"
        ],
        "summary": "soft delete account (protected)",
        "operationId": "DeleteAccount",
        "responses": {
          "200": {
            "description": "\"data\" will contain account summary.",
            "schema": {
              "$ref": "#/definitions/ResponseAccountSuccess"
            }
          },
          "500": {
            "description": "the message will state what the internal server error was with \"status\": \"error\"",
            "schema": {
              "$ref": "#/definitions/responseError"
            }
          }
        }
      }
    },
    "/activity": {
      "get": {
        "description": "Returns a list of activity. Response is paginated.",
        "tags": [
          "activity"
        ],
        "summary": "get activity (protected)",
        "operationId": "searchActivity",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ObjectID",
            "description": "Optional activity in relation to objectID",
            "name": "objectID",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Page",
            "description": "Optional page that starts from 0",
            "name": "page",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "PageSize",
            "description": "Optional page size that defaults to 20",
            "name": "pageSize",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "\"data\" will contain array of protoActivity with \"status\": \"success\"",
            "schema": {
              "$ref": "#/definitions/ResponseActivityPageSuccess"
            }
          }
        }
      }
    },
    "/activity/:activityID": {
      "put": {
        "description": "Update activity clickedAt or seenAt. Timestamps must be UTC.",
        "tags": [
          "activity"
        ],
        "summary": "update activity (protected)",
        "operationId": "UpdateActivity",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ClickedAt",
            "description": "Optional e.g. 2006-01-02T15:04:05Z",
            "name": "clickedAt",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "SeenAt",
            "description": "Optional e.g. 2006-01-02T15:04:05Z",
            "name": "seenAt",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/responseActivitySuccess"
          }
        }
      }
    },
    "/devices": {
      "get": {
        "description": "Returns a list of the user's registered devicesr.",
        "tags": [
          "devices"
        ],
        "summary": "all registered devices (protected)",
        "operationId": "GetAllDevices",
        "responses": {
          "200": {
            "description": "\"data\" will contain array of devices with \"status\": \"success\"",
            "schema": {
              "$ref": "#/definitions/ResponseDevicesSuccess"
            }
          },
          "500": {
            "description": "the message will state what the internal server error was with \"status\": \"error\"",
            "schema": {
              "$ref": "#/definitions/responseError"
            }
          }
        }
      },
      "post": {
        "description": "Registers a new device for a user so they may receive push notifications.",
        "tags": [
          "devices"
        ],
        "summary": "add new device (protected)",
        "operationId": "AddDevice",
        "parameters": [
          {
            "x-go-name": "DeviceType",
            "description": "Required.",
            "name": "deviceType",
            "in": "body",
            "schema": {
              "type": "string"
            }
          },
          {
            "x-go-name": "DeviceToken",
            "description": "Required.",
            "name": "deviceToken",
            "in": "body",
            "schema": {
              "type": "string"
            }
          },
          {
            "x-go-name": "ExternalDeviceID",
            "description": "Required.",
            "name": "externalDeviceID",
            "in": "body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "\"data\" will be non null with \"status\": success",
            "schema": {
              "$ref": "#/definitions/ResponseDeviceSuccess"
            }
          },
          "400": {
            "description": "missing params",
            "schema": {
              "$ref": "#/definitions/responseError"
            }
          },
          "500": {
            "description": "the message will state what the internal server error was with \"status\": error",
            "schema": {
              "$ref": "#/definitions/responseError"
            }
          }
        }
      }
    },
    "/devices/:deviceID": {
      "get": {
        "description": "Get a user's device by the device's ID.",
        "tags": [
          "devices"
        ],
        "summary": "get a device by ID (protected)",
        "operationId": "GetDevice",
        "responses": {
          "200": {
            "description": "\"data\" will contain device stuffs with \"status\": \"success\"",
            "schema": {
              "$ref": "#/definitions/ResponseDeviceSuccess"
            }
          },
          "500": {
            "description": "the message will state what the internal server error was with \"status\": constRes.Error",
            "schema": {
              "$ref": "#/definitions/responseError"
            }
          }
        }
      },
      "put": {
        "description": "Updates a user's device.",
        "tags": [
          "devices"
        ],
        "summary": "update a registered device (protected)",
        "operationId": "UpdateDevice",
        "parameters": [
          {
            "x-go-name": "DeviceType",
            "description": "Required.",
            "name": "deviceType",
            "in": "body",
            "schema": {
              "type": "string"
            }
          },
          {
            "x-go-name": "DeviceToken",
            "description": "Required.",
            "name": "deviceToken",
            "in": "body",
            "schema": {
              "type": "string"
            }
          },
          {
            "x-go-name": "ExternalDeviceID",
            "description": "Required.",
            "name": "externalDeviceID",
            "in": "body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "\"data\" will contain updated device info with \"status\": success",
            "schema": {
              "$ref": "#/definitions/ResponseDeviceSuccess"
            }
          },
          "500": {
            "description": "the message will state what the internal server error was with \"status\": error",
            "schema": {
              "$ref": "#/definitions/responseError"
            }
          }
        }
      },
      "delete": {
        "description": "Removes device by ID.",
        "tags": [
          "devices"
        ],
        "summary": "removes a user's device (protected)",
        "operationId": "DeleteDevice",
        "responses": {
          "200": {
            "description": "data will be null with \"status\": success",
            "schema": {
              "$ref": "#/definitions/responseSuccess"
            }
          },
          "500": {
            "description": "the message will state what the internal server error was with \"status\": error",
            "schema": {
              "$ref": "#/definitions/responseError"
            }
          }
        }
      }
    },
    "/login": {
      "post": {
        "description": "The login endpoint returns an authorization token in the \"set-authorization\" response header.\nYou may also receive an optional refresh token if you include 'remember': true in your post request.\nBoth tokens will be returned in the reponse headers as \"set-refresh\" and \"set-authorization\".",
        "tags": [
          "authentication"
        ],
        "summary": "user login (open)",
        "operationId": "login",
        "parameters": [
          {
            "x-go-name": "Email",
            "description": "Required. Backend code does not check email atm.",
            "name": "email",
            "in": "body",
            "schema": {
              "type": "string"
            }
          },
          {
            "x-go-name": "Password",
            "description": "Required. Backend code does not have any password requirements atm.",
            "name": "password",
            "in": "body",
            "schema": {
              "type": "string"
            }
          },
          {
            "x-go-name": "Remember",
            "description": "Optional. Return refresh token in response",
            "name": "remember",
            "in": "body",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "\"data\" will be non null with \"status\": \"success\"",
            "schema": {
              "$ref": "#/definitions/responseSuccess"
            }
          },
          "400": {
            "description": "email and password are not found in request with \"status\": \"fail\"",
            "schema": {
              "$ref": "#/definitions/responseError"
            }
          },
          "401": {
            "description": "unauthorized user because of incorrect password with \"status\": \"fail\"",
            "schema": {
              "$ref": "#/definitions/responseError"
            }
          },
          "500": {
            "description": "the message will state what the internal server error was with \"status\": \"error\"",
            "schema": {
              "$ref": "#/definitions/responseError"
            }
          }
        }
      }
    },
    "/logout": {
      "get": {
        "description": "If a valid refresh token is found in the request headers, the server\nwill attempt to remove the refresh token from the database.",
        "tags": [
          "authentication"
        ],
        "summary": "logout user (protected)",
        "operationId": "logout",
        "responses": {
          "200": {
            "description": "data will be null with status \"success\"",
            "schema": {
              "$ref": "#/definitions/responseSuccess"
            }
          },
          "400": {
            "description": "you either sent in no refresh token or the refresh token in the header is not valid with status: \"fail\"",
            "schema": {
              "$ref": "#/definitions/responseError"
            }
          }
        }
      }
    },
    "/plans": {
      "get": {
        "description": "Returns a summary for each plan. The plan orders will contain the last executed order and the child orders of the executed order.\nQuery Params: status, marketName, exchange, page, pageSize\n\nThe defaults for the params are:\nstatus - active\npage - 0\npageSize - 50\n\nexample: /plans?exchange=binance",
        "tags": [
          "plans"
        ],
        "summary": "get user plans (protected)",
        "operationId": "GetUserPlansParams",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Exchange",
            "name": "exchange",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "MarketName",
            "name": "marketName",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Status",
            "name": "status",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "uint32",
            "x-go-name": "Page",
            "name": "page",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "uint32",
            "x-go-name": "PageSize",
            "name": "pageSize",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "\"data\" will contain an array of plan summaries",
            "schema": {
              "$ref": "#/definitions/ResponsePlansSuccess"
            }
          },
          "500": {
            "description": "the message will state what the internal server error was with \"status\": \"error\"",
            "schema": {
              "$ref": "#/definitions/responseError"
            }
          }
        }
      },
      "post": {
        "description": "This will create a new chain of orders for the user.",
        "tags": [
          "plans"
        ],
        "summary": "create a new plan (protected)",
        "operationId": "PostPlan",
        "parameters": [
          {
            "x-go-name": "UserCurrencySymbol",
            "description": "Optional base currency from which plan currency will be measured with. e.g. USDT, BTC, ETH. Default to USDT.",
            "name": "userCurrencySymbol",
            "in": "body",
            "schema": {
              "type": "string"
            }
          },
          {
            "x-go-name": "Title",
            "description": "Required plan title",
            "name": "title",
            "in": "body",
            "schema": {
              "type": "string"
            }
          },
          {
            "x-go-name": "PlanTemplateID",
            "description": "Optional plan template ID. Leo wanted this for the templating system.",
            "name": "planTemplateID",
            "in": "body",
            "schema": {
              "type": "string"
            }
          },
          {
            "x-go-name": "InitialTimestamp",
            "description": "Optional init timestamp for plan RFC3339 formatted (e.g. 2018-08-26T22:49:10.168652Z). This timestamp will be used to measure initial user currency balance (valuation in user preferred currency)",
            "name": "initialTimestamp",
            "in": "body",
            "schema": {
              "type": "string"
            }
          },
          {
            "x-go-name": "Status",
            "description": "Optional defaults to 'active' status. Valid input status is 'active', 'inactive', or 'historic'",
            "name": "status",
            "in": "body",
            "schema": {
              "type": "string"
            }
          },
          {
            "x-go-name": "CloseOnComplete",
            "description": "Required bool to indicate that you want the plan to be 'closed' when the last order for the plan finishes (note: order status fail will also close the plan)",
            "name": "closeOnComplete",
            "in": "body",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "x-go-name": "Orders",
            "description": "Required array of orders. The structure of the order tree will be dictated by the parentOrderID. All orders following the root order must have a parentOrderID. The root order must have a parentOrderID of \"00000000-0000-0000-0000-000000000000\". Use grupo (aka spanish for group) to assign a group label to the order.",
            "name": "orders",
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/NewOrderReq"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "\"data\" will contain the order tree",
            "schema": {
              "$ref": "#/definitions/ResponsePlanSuccess"
            }
          },
          "400": {
            "description": "missing or incorrect params with \"status\": \"fail\"",
            "schema": {
              "$ref": "#/definitions/responseError"
            }
          },
          "500": {
            "description": "the message will state what the internal server error was with \"status\": \"error\"",
            "schema": {
              "$ref": "#/definitions/responseError"
            }
          }
        }
      }
    },
    "/plans/:planID": {
      "get": {
        "description": "Returns a plan with the currency and base currency names. Plan protoOrder will be retrieved\nbased upon planDepth and planLength. The root order of a plan begins at planDepth=0. The\nplanLength deteremines the length of the tree to retrieve.\n\nexample: /plans/:some_plan_id?planDepth=0\u0026planLength=10\nThe example above will retrieve the plan from planDepth 0 to planDepth 10.",
        "tags": [
          "plans"
        ],
        "summary": "get plan with planID (protected)",
        "operationId": "GetPlanParams",
        "parameters": [
          {
            "type": "integer",
            "format": "uint32",
            "x-go-name": "PlanDepth",
            "name": "planDepth",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "uint32",
            "x-go-name": "PlanLength",
            "name": "planLength",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "\"data\" will contain plan deets.",
            "schema": {
              "$ref": "#/definitions/ResponsePlanSuccess"
            }
          },
          "500": {
            "description": "the message will state what the internal server error was with \"status\": \"error\"",
            "schema": {
              "$ref": "#/definitions/responseError"
            }
          }
        }
      },
      "put": {
        "description": "You must send in the entire inactive chain that you want updated in a single call.",
        "tags": [
          "plans"
        ],
        "summary": "update a plan (protected)",
        "operationId": "UpdatePlanParams",
        "parameters": [
          {
            "x-go-name": "UserCurrencySymbol",
            "description": "Optional base currency from which plan currency will be measured with.",
            "name": "userCurrencySymbol",
            "in": "body",
            "schema": {
              "type": "string"
            }
          },
          {
            "x-go-name": "Title",
            "description": "Optional plan title",
            "name": "title",
            "in": "body",
            "schema": {
              "type": "string"
            }
          },
          {
            "x-go-name": "PlanTemplateID",
            "description": "Optional plan template ID.",
            "name": "planTemplateID",
            "in": "body",
            "schema": {
              "type": "string"
            }
          },
          {
            "x-go-name": "InitialTimestamp",
            "description": "Optional init timestamp for plan RFC3339 formatted (e.g. 2018-08-26T22:49:10.168652Z). This timestamp will be used to measure initial user currency balance (valuation in user preferred currency)",
            "name": "initialTimestamp",
            "in": "body",
            "schema": {
              "type": "string"
            }
          },
          {
            "x-go-name": "Status",
            "description": "Optional only needed to update the status of the plan to 'inactive', 'active'",
            "name": "status",
            "in": "body",
            "schema": {
              "type": "string"
            }
          },
          {
            "x-go-name": "CloseOnComplete",
            "description": "Optional bool to indicate that you want the plan to be 'closed' when the last order for the plan finishes (note: order status fail will also close the plan)",
            "name": "closeOnComplete",
            "in": "body",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "x-go-name": "Orders",
            "description": "Required array of orders. You cannot update executed orders. The entire inactive chain is assumed to be in this array.",
            "name": "orders",
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/NewOrderReq"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/responsePlanSuccess"
          },
          "500": {
            "description": "the message will state what the internal server error was with \"status\": \"error\" \"data\" will contain order info with \"status\": \"success\"",
            "schema": {
              "$ref": "#/definitions/responseError"
            }
          }
        }
      },
      "delete": {
        "description": "You may delete a plan if it has not executed. That is, the plan has no filled protoOrder. Delete plan becomes cancel plan\nwhen an order has been filled. In theory, this should kill all active protoOrder for a plan and set the status for the plan\nas 'aborted'. Once a plan has been 'aborted' you cannot update or restart that plan.",
        "tags": [
          "plans"
        ],
        "summary": "deletes a plan (protected)",
        "operationId": "DeletePlan",
        "responses": {
          "200": {
            "description": "\"data\" will contain plan summary.",
            "schema": {
              "$ref": "#/definitions/ResponsePlanSuccess"
            }
          },
          "500": {
            "description": "the message will state what the internal server error was with \"status\": \"error\"",
            "schema": {
              "$ref": "#/definitions/responseError"
            }
          }
        }
      }
    },
    "/search": {
      "get": {
        "description": "Returns a list of active markets.",
        "tags": [
          "search"
        ],
        "summary": "search markets (protected)",
        "operationId": "searchMarkets",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Term",
            "name": "term",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "\"data\" will contain array of markets with \"status\": \"success\"",
            "schema": {
              "$ref": "#/definitions/responseSearchSuccess"
            }
          }
        }
      }
    },
    "/session": {
      "get": {
        "description": "Creates a new session for an authenticated user. The session data will eventually contain\nwhatever info you need to begin a new session. At the moment the response data mirrors\nlogin data. This endpoint depends on the user-service. If the user-service\nis unreachable, a 410 with a status of \"error\" will be returned.",
        "tags": [
          "session"
        ],
        "summary": "create a new session for a user (protected)",
        "operationId": "sessionBegin",
        "responses": {
          "200": {
            "description": "data will be non null with status \"success\"",
            "schema": {
              "$ref": "#/definitions/ResponseSessionSuccess"
            }
          },
          "410": {
            "description": "the user-service is unreachable with status \"error\"",
            "schema": {
              "$ref": "#/definitions/responseError"
            }
          }
        }
      }
    },
    "/signup": {
      "post": {
        "description": "Registers a new user. Expects email to be unique. Duplicate email will result\nin a bad request.",
        "tags": [
          "authentication"
        ],
        "summary": "user registration (open)",
        "operationId": "signup",
        "parameters": [
          {
            "x-go-name": "First",
            "description": "Optional.",
            "name": "first",
            "in": "body",
            "schema": {
              "type": "string"
            }
          },
          {
            "x-go-name": "Last",
            "description": "Optional.",
            "name": "last",
            "in": "body",
            "schema": {
              "type": "string"
            }
          },
          {
            "x-go-name": "Email",
            "description": "Required. Must be unique! We need to validate these coming in.",
            "name": "email",
            "in": "body",
            "schema": {
              "type": "string"
            }
          },
          {
            "x-go-name": "Password",
            "description": "Required. We need password requirements.",
            "name": "password",
            "in": "body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "\"data\" will be non null with \"status\": \"success\"",
            "schema": {
              "$ref": "#/definitions/responseSuccess"
            }
          },
          "400": {
            "description": "message should relay information with regard to bad request with \"status\": \"fail\"",
            "schema": {
              "$ref": "#/definitions/responseError"
            }
          },
          "410": {
            "description": "the user-service is not reachable. The user-service is a microservice that runs independantly from the api. When we take it offline you will receive this error.",
            "schema": {
              "$ref": "#/definitions/responseError"
            }
          },
          "500": {
            "description": "the message will state what the internal server error was with \"status\": \"error\"",
            "schema": {
              "$ref": "#/definitions/responseError"
            }
          }
        }
      }
    },
    "/users/:id": {
      "put": {
        "description": "You can change the user's first, last, or email. Note we need to implement a secure method of\nverifing the user's new email. This has yet to be implemented.",
        "tags": [
          "users"
        ],
        "summary": "updates user info (protected)",
        "operationId": "UpdateUser",
        "parameters": [
          {
            "x-go-name": "First",
            "description": "Optional.",
            "name": "first",
            "in": "body",
            "schema": {
              "type": "string"
            }
          },
          {
            "x-go-name": "Last",
            "description": "Optional.",
            "name": "last",
            "in": "body",
            "schema": {
              "type": "string"
            }
          },
          {
            "x-go-name": "Email",
            "description": "Optional. Note: we need to validate these!",
            "name": "email",
            "in": "body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "\"data\" will contain updated user data with \"status\": \"success\"",
            "schema": {
              "$ref": "#/definitions/responseSuccess"
            }
          },
          "400": {
            "description": "message in badrequest should be descriptive with \"status\": \"fail\"",
            "schema": {
              "$ref": "#/definitions/responseError"
            }
          },
          "401": {
            "description": "unauthorized user because of incorrect url param with \"status\": \"fail\"",
            "schema": {
              "$ref": "#/definitions/responseError"
            }
          },
          "410": {
            "description": "the user-service is unreachable with status \"error\"",
            "schema": {
              "$ref": "#/definitions/responseError"
            }
          },
          "500": {
            "description": "the message will state what the internal server error was with \"status\": \"error\"",
            "schema": {
              "$ref": "#/definitions/responseError"
            }
          }
        }
      }
    },
    "/users/:id/changepassword": {
      "put": {
        "description": "Allows an authenticated user to change their password. The url param is the user's id.",
        "tags": [
          "users"
        ],
        "summary": "change a user's password (protected)",
        "operationId": "ChangePassword",
        "parameters": [
          {
            "x-go-name": "OldPassword",
            "description": "Required.",
            "name": "oldPassword",
            "in": "body",
            "schema": {
              "type": "string"
            }
          },
          {
            "x-go-name": "NewPassword",
            "description": "Required.",
            "name": "newPassword",
            "in": "body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "the status will be \"success\" with data null.",
            "schema": {
              "$ref": "#/definitions/responseSuccess"
            }
          },
          "400": {
            "description": "you did something wrong here with status \"fail\". Hopefully, the message is descriptive enough.",
            "schema": {
              "$ref": "#/definitions/responseError"
            }
          },
          "401": {
            "description": "the user ID in url param does not match with status \"fail\".",
            "schema": {
              "$ref": "#/definitions/responseError"
            }
          },
          "410": {
            "description": "the user-service is unreachable with status \"error\"",
            "schema": {
              "$ref": "#/definitions/responseError"
            }
          },
          "500": {
            "description": "the message will state what the internal server error was with \"status\": \"error\"",
            "schema": {
              "$ref": "#/definitions/responseError"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "Account": {
      "description": "This response should never return the key secret",
      "type": "object",
      "properties": {
        "accountID": {
          "type": "string",
          "x-go-name": "AccountID"
        },
        "balances": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Balance"
          },
          "x-go-name": "Balances"
        },
        "color": {
          "type": "string",
          "x-go-name": "Color"
        },
        "createdOn": {
          "type": "string",
          "x-go-name": "CreatedOn"
        },
        "description": {
          "type": "string",
          "x-go-name": "Description"
        },
        "exchange": {
          "type": "string",
          "x-go-name": "Exchange"
        },
        "keyPublic": {
          "type": "string",
          "x-go-name": "KeyPublic"
        },
        "status": {
          "type": "string",
          "x-go-name": "Status"
        },
        "title": {
          "type": "string",
          "x-go-name": "Title"
        },
        "type": {
          "type": "string",
          "x-go-name": "AccountType"
        },
        "updatedOn": {
          "type": "string",
          "x-go-name": "UpdatedOn"
        }
      },
      "x-go-package": "github.com/asciiu/gomo/api/controllers"
    },
    "AccountController": {
      "type": "object",
      "properties": {
        "AccountClient": {
          "$ref": "#/definitions/AccountServiceClient"
        },
        "DB": {
          "$ref": "#/definitions/DB"
        }
      },
      "x-go-package": "github.com/asciiu/gomo/api/controllers"
    },
    "AccountList": {
      "type": "object",
      "properties": {
        "accounts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Account"
          },
          "x-go-name": "Accounts"
        }
      },
      "x-go-package": "github.com/asciiu/gomo/api/controllers"
    },
    "AccountRequest": {
      "type": "object",
      "properties": {
        "balances": {
          "description": "Optional balances for a paper account\nin: body",
          "type": "array",
          "items": {
            "$ref": "#/definitions/NewBalanceReq"
          },
          "x-go-name": "Balances"
        },
        "color": {
          "description": "Required color\nin: body",
          "type": "string",
          "x-go-name": "Color"
        },
        "description": {
          "description": "Optional defaults to 'active' status. Valid input status is 'active', 'inactive', or 'historic'\nin: body",
          "type": "string",
          "x-go-name": "Description"
        },
        "exchange": {
          "description": "Required exchange for account. Specify 'binance', 'binance paper', '... paper', etc\nin: body",
          "type": "string",
          "x-go-name": "Exchange"
        },
        "keyPublic": {
          "description": "Optional public viewable key-secret pair. This value is required for non paper accounts.\nin: body",
          "type": "string",
          "x-go-name": "KeyPublic"
        },
        "keySecret": {
          "description": "Optional init timestamp for plan RFC3339 formatted (e.g. 2018-08-26T22:49:10.168652Z). This timestamp will be used to measure initial user currency balance (valuation in user preferred currency)\nin: body",
          "type": "string",
          "x-go-name": "KeySecret"
        },
        "title": {
          "description": "Required title\nin: body",
          "type": "string",
          "x-go-name": "Title"
        },
        "type": {
          "description": "Required type\nin: body",
          "type": "string",
          "x-go-name": "AccountType"
        }
      },
      "x-go-package": "github.com/asciiu/gomo/api/controllers"
    },
    "AccountServiceClient": {
      "type": "object",
      "x-go-package": "github.com/asciiu/gomo/api/vendor/github.com/asciiu/gomo/account-service/proto/account"
    },
    "Activity": {
      "description": "Responses",
      "type": "object",
      "properties": {
        "activityID": {
          "type": "string",
          "x-go-name": "ActivityID"
        },
        "clickedAt": {
          "type": "string",
          "x-go-name": "ClickedAt"
        },
        "description": {
          "type": "string",
          "x-go-name": "Description"
        },
        "details": {
          "type": "string",
          "x-go-name": "Details"
        },
        "objectID": {
          "type": "string",
          "x-go-name": "ObjectID"
        },
        "seenAt": {
          "type": "string",
          "x-go-name": "SeenAt"
        },
        "subtitle": {
          "type": "string",
          "x-go-name": "Subtitle"
        },
        "timestamp": {
          "type": "string",
          "x-go-name": "Timestamp"
        },
        "title": {
          "type": "string",
          "x-go-name": "Title"
        },
        "type": {
          "type": "string",
          "x-go-name": "Type"
        },
        "userID": {
          "type": "string",
          "x-go-name": "UserID"
        }
      },
      "x-go-package": "github.com/asciiu/gomo/api/vendor/github.com/asciiu/gomo/activity-bulletin/proto"
    },
    "ActivityBulletinClient": {
      "type": "object",
      "x-go-package": "github.com/asciiu/gomo/api/vendor/github.com/asciiu/gomo/activity-bulletin/proto"
    },
    "ActivityController": {
      "type": "object",
      "properties": {
        "BulletinClient": {
          "$ref": "#/definitions/ActivityBulletinClient"
        }
      },
      "x-go-package": "github.com/asciiu/gomo/api/controllers"
    },
    "ActivityData": {
      "type": "object",
      "properties": {
        "activity": {
          "$ref": "#/definitions/Activity"
        }
      },
      "x-go-package": "github.com/asciiu/gomo/api/vendor/github.com/asciiu/gomo/activity-bulletin/proto"
    },
    "AnalyticsServiceClient": {
      "type": "object",
      "x-go-package": "github.com/asciiu/gomo/api/vendor/github.com/asciiu/gomo/analytics-service/proto/analytics"
    },
    "ApiDevice": {
      "type": "object",
      "properties": {
        "deviceID": {
          "type": "string",
          "x-go-name": "DeviceID"
        },
        "deviceToken": {
          "type": "string",
          "x-go-name": "DeviceToken"
        },
        "deviceType": {
          "type": "string",
          "x-go-name": "DeviceType"
        },
        "externalDeviceID": {
          "type": "string",
          "x-go-name": "ExternalDeviceID"
        }
      },
      "x-go-package": "github.com/asciiu/gomo/api/controllers"
    },
    "AuthController": {
      "type": "object",
      "properties": {
        "DB": {
          "$ref": "#/definitions/DB"
        },
        "DeviceClient": {
          "$ref": "#/definitions/DeviceServiceClient"
        },
        "UserClient": {
          "$ref": "#/definitions/UserServiceClient"
        }
      },
      "x-go-package": "github.com/asciiu/gomo/api/controllers"
    },
    "Balance": {
      "type": "object",
      "properties": {
        "available": {
          "type": "number",
          "format": "double",
          "x-go-name": "Available"
        },
        "createdOn": {
          "type": "string",
          "x-go-name": "CreatedOn"
        },
        "currencySymbol": {
          "type": "string",
          "x-go-name": "CurrencySymbol"
        },
        "exchangeAvailable": {
          "type": "number",
          "format": "double",
          "x-go-name": "ExchangeAvailable"
        },
        "exchangeLocked": {
          "type": "number",
          "format": "double",
          "x-go-name": "ExchangeLocked"
        },
        "exchangeTotal": {
          "type": "number",
          "format": "double",
          "x-go-name": "ExchangeTotal"
        },
        "locked": {
          "type": "number",
          "format": "double",
          "x-go-name": "Locked"
        },
        "updatedOn": {
          "type": "string",
          "x-go-name": "UpdatedOn"
        }
      },
      "x-go-package": "github.com/asciiu/gomo/api/controllers"
    },
    "DB": {
      "description": "The sql package creates and frees connections automatically; it\nalso maintains a free pool of idle connections. If the database has\na concept of per-connection state, such state can only be reliably\nobserved within a transaction. Once DB.Begin is called, the\nreturned Tx is bound to a single connection. Once Commit or\nRollback is called on the transaction, that transaction's\nconnection is returned to DB's idle connection pool. The pool size\ncan be controlled with SetMaxIdleConns.",
      "type": "object",
      "title": "DB is a database handle representing a pool of zero or more\nunderlying connections. It's safe for concurrent use by multiple\ngoroutines.",
      "x-go-package": "database/sql"
    },
    "Device": {
      "type": "object",
      "properties": {
        "deviceID": {
          "type": "string",
          "x-go-name": "DeviceID"
        },
        "deviceToken": {
          "type": "string",
          "x-go-name": "DeviceToken"
        },
        "deviceType": {
          "type": "string",
          "x-go-name": "DeviceType"
        },
        "externalDeviceID": {
          "type": "string",
          "x-go-name": "ExternalDeviceID"
        }
      },
      "x-go-package": "github.com/asciiu/gomo/api/controllers"
    },
    "DeviceController": {
      "type": "object",
      "properties": {
        "DB": {
          "$ref": "#/definitions/DB"
        },
        "DeviceClient": {
          "$ref": "#/definitions/DeviceServiceClient"
        }
      },
      "x-go-package": "github.com/asciiu/gomo/api/controllers"
    },
    "DeviceList": {
      "type": "object",
      "properties": {
        "devices": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ApiDevice"
          },
          "x-go-name": "Devices"
        }
      },
      "x-go-package": "github.com/asciiu/gomo/api/controllers"
    },
    "DeviceRequest": {
      "type": "object",
      "properties": {
        "deviceToken": {
          "description": "Required.\nin: body",
          "type": "string",
          "x-go-name": "DeviceToken"
        },
        "deviceType": {
          "description": "Required.\nin: body",
          "type": "string",
          "x-go-name": "DeviceType"
        },
        "externalDeviceID": {
          "description": "Required.\nin: body",
          "type": "string",
          "x-go-name": "ExternalDeviceID"
        }
      },
      "x-go-package": "github.com/asciiu/gomo/api/controllers"
    },
    "DeviceServiceClient": {
      "type": "object",
      "x-go-package": "github.com/asciiu/gomo/api/vendor/github.com/asciiu/gomo/device-service/proto/device"
    },
    "GetPlanParams": {
      "description": "required for swaggered, otherwise never used",
      "type": "object",
      "properties": {
        "planDepth": {
          "type": "integer",
          "format": "uint32",
          "x-go-name": "PlanDepth"
        },
        "planLength": {
          "type": "integer",
          "format": "uint32",
          "x-go-name": "PlanLength"
        }
      },
      "x-go-package": "github.com/asciiu/gomo/api/controllers"
    },
    "GetUserPlansParams": {
      "description": "required for swaggered, otherwise never used",
      "type": "object",
      "properties": {
        "exchange": {
          "type": "string",
          "x-go-name": "Exchange"
        },
        "marketName": {
          "type": "string",
          "x-go-name": "MarketName"
        },
        "page": {
          "type": "integer",
          "format": "uint32",
          "x-go-name": "Page"
        },
        "pageSize": {
          "type": "integer",
          "format": "uint32",
          "x-go-name": "PageSize"
        },
        "status": {
          "type": "string",
          "x-go-name": "Status"
        }
      },
      "x-go-package": "github.com/asciiu/gomo/api/controllers"
    },
    "JwtClaims": {
      "type": "object",
      "properties": {
        "aud": {
          "type": "string",
          "x-go-name": "Audience"
        },
        "email": {
          "type": "string",
          "x-go-name": "Email"
        },
        "exp": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ExpiresAt"
        },
        "iat": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "IssuedAt"
        },
        "iss": {
          "type": "string",
          "x-go-name": "Issuer"
        },
        "jti": {
          "type": "string",
          "x-go-name": "Id"
        },
        "nbf": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "NotBefore"
        },
        "sub": {
          "type": "string",
          "x-go-name": "Subject"
        }
      },
      "x-go-package": "github.com/asciiu/gomo/api/controllers"
    },
    "KeyMeta": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string",
          "x-go-name": "Description"
        },
        "exchange": {
          "type": "string",
          "x-go-name": "Exchange"
        },
        "keyID": {
          "type": "string",
          "x-go-name": "KeyID"
        },
        "status": {
          "type": "string",
          "x-go-name": "Status"
        }
      },
      "x-go-package": "github.com/asciiu/gomo/api/controllers"
    },
    "LoginRequest": {
      "type": "object",
      "properties": {
        "email": {
          "description": "Required. Backend code does not check email atm.\nin: body",
          "type": "string",
          "x-go-name": "Email"
        },
        "password": {
          "description": "Required. Backend code does not have any password requirements atm.\nin: body",
          "type": "string",
          "x-go-name": "Password"
        },
        "remember": {
          "description": "Optional. Return refresh token in response\nin: body",
          "type": "boolean",
          "x-go-name": "Remember"
        }
      },
      "x-go-package": "github.com/asciiu/gomo/api/controllers"
    },
    "Market": {
      "type": "object",
      "properties": {
        "baseCurrencyName": {
          "type": "string",
          "x-go-name": "BaseCurrencyName"
        },
        "baseCurrencySymbol": {
          "type": "string",
          "x-go-name": "BaseCurrencySymbol"
        },
        "basePrecision": {
          "type": "integer",
          "format": "int32",
          "x-go-name": "BasePrecision"
        },
        "exchange": {
          "type": "string",
          "x-go-name": "Exchange"
        },
        "exchangeMarketName": {
          "type": "string",
          "x-go-name": "ExchangeMarketName"
        },
        "marketCurrencyName": {
          "type": "string",
          "x-go-name": "MarketCurrencyName"
        },
        "marketCurrencySymbol": {
          "type": "string",
          "x-go-name": "MarketCurrencySymbol"
        },
        "marketName": {
          "type": "string",
          "x-go-name": "MarketName"
        },
        "marketPrecision": {
          "type": "integer",
          "format": "int32",
          "x-go-name": "MarketPrecision"
        },
        "marketPriceStep": {
          "type": "string",
          "x-go-name": "MarketPriceStep"
        },
        "maxMarketPrice": {
          "type": "string",
          "x-go-name": "MaxMarketPrice"
        },
        "maxTradeSize": {
          "type": "string",
          "x-go-name": "MaxTradeSize"
        },
        "minMarketPrice": {
          "type": "string",
          "x-go-name": "MinMarketPrice"
        },
        "minTradeSize": {
          "type": "string",
          "x-go-name": "MinTradeSize"
        },
        "price": {
          "type": "string",
          "x-go-name": "Price"
        },
        "tradeSizeStep": {
          "type": "string",
          "x-go-name": "TradeSizeStep"
        }
      },
      "x-go-package": "github.com/asciiu/gomo/api/controllers"
    },
    "NewBalanceReq": {
      "type": "object",
      "properties": {
        "available": {
          "description": "Required amount of currency.\nin: body",
          "type": "number",
          "format": "double",
          "x-go-name": "Available"
        },
        "currencySymbol": {
          "description": "Required examples: BTC, USDT.\nin: body",
          "type": "string",
          "x-go-name": "CurrencySymbol"
        }
      },
      "x-go-package": "github.com/asciiu/gomo/api/controllers"
    },
    "NewOrderReq": {
      "type": "object",
      "properties": {
        "accountID": {
          "description": "Required accountID to use for this order. The account defines the exchange keys and balances.\nin: body",
          "type": "string",
          "x-go-name": "AccountID"
        },
        "grupo": {
          "description": "Optional group of order\nin: body",
          "type": "string",
          "x-go-name": "Grupo"
        },
        "initialCurrencyBalance": {
          "description": "Required for the root order of the tree. Child protoOrder for tree may or may not have a currencyBalance.\nin: body",
          "type": "number",
          "format": "double",
          "x-go-name": "InitialCurrencyBalance"
        },
        "keyID": {
          "description": "Deprecated this used to be our key ID (string uuid) assigned to the user's exchange key and secret. Use accountID instead. DO NOT USE THIS!\nin: body",
          "type": "string",
          "x-go-name": "KeyID"
        },
        "limitPrice": {
          "description": "Required for 'limit' protoOrder. Defines limit price.\nin: body",
          "type": "number",
          "format": "double",
          "x-go-name": "LimitPrice"
        },
        "marketName": {
          "description": "Required e.g. ADA-BTC. Base pair should be the suffix.\nin: body",
          "type": "string",
          "x-go-name": "MarketName"
        },
        "orderID": {
          "description": "Required the client assigns the order ID as a UUID, the format is 8-4-4-4-12.\nin: body",
          "type": "string",
          "x-go-name": "OrderID"
        },
        "orderPriority": {
          "description": "Optional precedence of order when multiple orders are at the same depth: value of 1 is highest priority. E.g. depth 2 buy ADA (1) or buy EOS (2). ADA with higher priority 1 will execute and EOS will not execute.\nin: body",
          "type": "integer",
          "format": "uint32",
          "x-go-name": "OrderPriority"
        },
        "orderTemplateID": {
          "description": "Optional order template ID. This is a Leo thing.\nin: body",
          "type": "string",
          "x-go-name": "OrderTemplateID"
        },
        "orderType": {
          "description": "Required order types are \"market\", \"limit\", \"paper\". Orders not within these types will be rejected.\nin: body",
          "type": "string",
          "x-go-name": "OrderType"
        },
        "parentOrderID": {
          "description": "Required the root node of the decision tree should be assigned a parentOrderID of \"00000000-0000-0000-0000-000000000000\" .\nin: body",
          "type": "string",
          "x-go-name": "ParentOrderID"
        },
        "side": {
          "description": "Required \"buy\" or \"sell\"\nin: body",
          "type": "string",
          "x-go-name": "Side"
        },
        "triggers": {
          "description": "Required these are the conditions that trigger the order to execute: ???\nin: body",
          "type": "array",
          "items": {
            "$ref": "#/definitions/TriggerReq"
          },
          "x-go-name": "Triggers"
        }
      },
      "x-go-package": "github.com/asciiu/gomo/api/controllers"
    },
    "Order": {
      "type": "object",
      "properties": {
        "accountID": {
          "type": "string",
          "x-go-name": "AccountID"
        },
        "baseCurrencyName": {
          "type": "string",
          "x-go-name": "BaseCurrencyName"
        },
        "baseCurrencySymbol": {
          "type": "string",
          "x-go-name": "BaseCurrencySymbol"
        },
        "createdOn": {
          "type": "string",
          "x-go-name": "CreatedOn"
        },
        "errors": {
          "type": "string",
          "x-go-name": "Errors"
        },
        "exchange": {
          "type": "string",
          "x-go-name": "Exchange"
        },
        "exchangeOrderID": {
          "type": "string",
          "x-go-name": "ExchangeOrderID"
        },
        "exchangePrice": {
          "type": "number",
          "format": "double",
          "x-go-name": "ExchangePrice"
        },
        "exchangeTime": {
          "type": "string",
          "x-go-name": "ExchangeTime"
        },
        "feeCurrencyAmount": {
          "type": "number",
          "format": "double",
          "x-go-name": "FeeCurrencyAmount"
        },
        "feeCurrencySymbol": {
          "type": "string",
          "x-go-name": "FeeCurrencySymbol"
        },
        "finalCurrencyBalance": {
          "type": "number",
          "format": "double",
          "x-go-name": "FinalCurrencyBalance"
        },
        "finalCurrencyName": {
          "type": "string",
          "x-go-name": "FinalCurrencyName"
        },
        "finalCurrencySymbol": {
          "type": "string",
          "x-go-name": "FinalCurrencySymbol"
        },
        "finalCurrencyValue": {
          "type": "number",
          "format": "double",
          "x-go-name": "FinalCurrencyValue"
        },
        "grupo": {
          "type": "string",
          "x-go-name": "Grupo"
        },
        "initialCurrencyBalance": {
          "type": "number",
          "format": "double",
          "x-go-name": "InitialCurrencyBalance"
        },
        "initialCurrencyName": {
          "type": "string",
          "x-go-name": "InitialCurrencyName"
        },
        "initialCurrencyRemainder": {
          "type": "number",
          "format": "double",
          "x-go-name": "InitialCurrencyRemainder"
        },
        "initialCurrencySymbol": {
          "type": "string",
          "x-go-name": "InitialCurrencySymbol"
        },
        "initialCurrencyTraded": {
          "type": "number",
          "format": "double",
          "x-go-name": "InitialCurrencyTraded"
        },
        "initialCurrencyValue": {
          "type": "number",
          "format": "double",
          "x-go-name": "InitialCurrencyValue"
        },
        "keyDescription": {
          "type": "string",
          "x-go-name": "KeyDescription"
        },
        "keyPublic": {
          "type": "string",
          "x-go-name": "KeyPublic"
        },
        "limitPrice": {
          "type": "number",
          "format": "double",
          "x-go-name": "LimitPrice"
        },
        "marketCurrencyName": {
          "type": "string",
          "x-go-name": "MarketCurrencyName"
        },
        "marketCurrencySymbol": {
          "type": "string",
          "x-go-name": "MarketCurrencySymbol"
        },
        "marketName": {
          "type": "string",
          "x-go-name": "MarketName"
        },
        "orderID": {
          "type": "string",
          "x-go-name": "OrderID"
        },
        "orderPriority": {
          "type": "integer",
          "format": "uint32",
          "x-go-name": "OrderPriority"
        },
        "orderTemplateID": {
          "type": "string",
          "x-go-name": "OrderTemplateID"
        },
        "orderType": {
          "type": "string",
          "x-go-name": "OrderType"
        },
        "parentOrderID": {
          "type": "string",
          "x-go-name": "ParentOrderID"
        },
        "planDepth": {
          "type": "integer",
          "format": "uint32",
          "x-go-name": "PlanDepth"
        },
        "side": {
          "type": "string",
          "x-go-name": "Side"
        },
        "status": {
          "type": "string",
          "x-go-name": "Status"
        },
        "triggers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Trigger"
          },
          "x-go-name": "Triggers"
        },
        "updatedOn": {
          "type": "string",
          "x-go-name": "UpdatedOn"
        }
      },
      "x-go-package": "github.com/asciiu/gomo/api/controllers"
    },
    "Plan": {
      "description": "This response should never return the key secret",
      "type": "object",
      "properties": {
        "activeCurrencyBalance": {
          "type": "number",
          "format": "double",
          "x-go-name": "ActiveCurrencyBalance"
        },
        "activeCurrencyName": {
          "type": "string",
          "x-go-name": "ActiveCurrencyName"
        },
        "activeCurrencySymbol": {
          "type": "string",
          "x-go-name": "ActiveCurrencySymbol"
        },
        "closeOnComplete": {
          "type": "boolean",
          "x-go-name": "CloseOnComplete"
        },
        "createdOn": {
          "type": "string",
          "x-go-name": "CreatedOn"
        },
        "exchange": {
          "type": "string",
          "x-go-name": "Exchange"
        },
        "initialCurrencyBalance": {
          "type": "number",
          "format": "double",
          "x-go-name": "InitialCurrencyBalance"
        },
        "initialCurrencyName": {
          "type": "string",
          "x-go-name": "InitialCurrencyName"
        },
        "initialCurrencySymbol": {
          "type": "string",
          "x-go-name": "InitialCurrencySymbol"
        },
        "initialTimestamp": {
          "type": "string",
          "x-go-name": "InitialTimestamp"
        },
        "initialUserCurrencyBalance": {
          "type": "number",
          "format": "double",
          "x-go-name": "InitialUserCurrencyBalance"
        },
        "lastExecutedOrderID": {
          "type": "string",
          "x-go-name": "LastExecutedOrderID"
        },
        "lastExecutedPlanDepth": {
          "type": "integer",
          "format": "uint32",
          "x-go-name": "LastExecutedPlanDepth"
        },
        "orders": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Order"
          },
          "x-go-name": "Orders"
        },
        "planID": {
          "type": "string",
          "x-go-name": "PlanID"
        },
        "planNumber": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "PlanNumber"
        },
        "planTemplateID": {
          "type": "string",
          "x-go-name": "PlanTemplateID"
        },
        "status": {
          "type": "string",
          "x-go-name": "Status"
        },
        "title": {
          "type": "string",
          "x-go-name": "Title"
        },
        "totalDepth": {
          "type": "integer",
          "format": "uint32",
          "x-go-name": "TotalDepth"
        },
        "updatedOn": {
          "type": "string",
          "x-go-name": "UpdatedOn"
        },
        "userCurrencyBalance": {
          "type": "number",
          "format": "double",
          "x-go-name": "UserCurrencyBalance"
        },
        "userCurrencySymbol": {
          "type": "string",
          "x-go-name": "UserCurrencySymbol"
        }
      },
      "x-go-package": "github.com/asciiu/gomo/api/controllers"
    },
    "PlanActivitySummary": {
      "type": "object",
      "properties": {
        "recent": {
          "$ref": "#/definitions/Activity"
        },
        "total": {
          "type": "integer",
          "format": "uint32",
          "x-go-name": "Total"
        }
      },
      "x-go-package": "github.com/asciiu/gomo/api/controllers"
    },
    "PlanController": {
      "type": "object",
      "properties": {
        "AnalyticsClient": {
          "$ref": "#/definitions/AnalyticsServiceClient"
        },
        "BulletinClient": {
          "$ref": "#/definitions/ActivityBulletinClient"
        },
        "DB": {
          "$ref": "#/definitions/DB"
        },
        "PlanClient": {
          "$ref": "#/definitions/PlanServiceClient"
        }
      },
      "x-go-package": "github.com/asciiu/gomo/api/controllers"
    },
    "PlanRequest": {
      "type": "object",
      "properties": {
        "closeOnComplete": {
          "description": "Required bool to indicate that you want the plan to be 'closed' when the last order for the plan finishes (note: order status fail will also close the plan)\nin: body",
          "type": "boolean",
          "x-go-name": "CloseOnComplete"
        },
        "initialTimestamp": {
          "description": "Optional init timestamp for plan RFC3339 formatted (e.g. 2018-08-26T22:49:10.168652Z). This timestamp will be used to measure initial user currency balance (valuation in user preferred currency)\nin: body",
          "type": "string",
          "x-go-name": "InitialTimestamp"
        },
        "orders": {
          "description": "Required array of orders. The structure of the order tree will be dictated by the parentOrderID. All orders following the root order must have a parentOrderID. The root order must have a parentOrderID of \"00000000-0000-0000-0000-000000000000\". Use grupo (aka spanish for group) to assign a group label to the order.\nin: body",
          "type": "array",
          "items": {
            "$ref": "#/definitions/NewOrderReq"
          },
          "x-go-name": "Orders"
        },
        "planTemplateID": {
          "description": "Optional plan template ID. Leo wanted this for the templating system.\nin: body",
          "type": "string",
          "x-go-name": "PlanTemplateID"
        },
        "status": {
          "description": "Optional defaults to 'active' status. Valid input status is 'active', 'inactive', or 'historic'\nin: body",
          "type": "string",
          "x-go-name": "Status"
        },
        "title": {
          "description": "Required plan title\nin: body",
          "type": "string",
          "x-go-name": "Title"
        },
        "userCurrencySymbol": {
          "description": "Optional base currency from which plan currency will be measured with. e.g. USDT, BTC, ETH. Default to USDT.\nin: body",
          "type": "string",
          "x-go-name": "UserCurrencySymbol"
        }
      },
      "x-go-package": "github.com/asciiu/gomo/api/controllers"
    },
    "PlanServiceClient": {
      "type": "object",
      "x-go-package": "github.com/asciiu/gomo/api/vendor/github.com/asciiu/gomo/plan-service/proto/plan"
    },
    "PlansPage": {
      "type": "object",
      "properties": {
        "page": {
          "type": "integer",
          "format": "uint32",
          "x-go-name": "Page"
        },
        "pageSize": {
          "type": "integer",
          "format": "uint32",
          "x-go-name": "PageSize"
        },
        "plans": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Plan"
          },
          "x-go-name": "Plans"
        },
        "total": {
          "type": "integer",
          "format": "uint32",
          "x-go-name": "Total"
        }
      },
      "x-go-package": "github.com/asciiu/gomo/api/controllers"
    },
    "ResponseAccountSuccess": {
      "type": "object",
      "title": "A ResponseAccountSuccess will always contain a status of \"successful\".",
      "properties": {
        "data": {
          "$ref": "#/definitions/Account"
        },
        "status": {
          "type": "string",
          "x-go-name": "Status"
        }
      },
      "x-go-package": "github.com/asciiu/gomo/api/controllers"
    },
    "ResponseAccountsSuccess": {
      "type": "object",
      "title": "A ResponseAccountsSuccess will always contain a status of \"successful\".",
      "properties": {
        "data": {
          "$ref": "#/definitions/AccountList"
        },
        "status": {
          "type": "string",
          "x-go-name": "Status"
        }
      },
      "x-go-name": "ResponseAccountListSuccess",
      "x-go-package": "github.com/asciiu/gomo/api/controllers"
    },
    "ResponseActivityPageSuccess": {
      "type": "object",
      "title": "A ResponseActivityPageSuccess will always contain a status of \"successful\".",
      "properties": {
        "data": {
          "$ref": "#/definitions/UserActivityPage"
        },
        "status": {
          "type": "string",
          "x-go-name": "Status"
        }
      },
      "x-go-package": "github.com/asciiu/gomo/api/controllers"
    },
    "ResponseActivitySuccess": {
      "type": "object",
      "title": "A ResponseActivitySuccess will always contain a status of \"successful\".",
      "properties": {
        "data": {
          "$ref": "#/definitions/ActivityData"
        },
        "status": {
          "type": "string",
          "x-go-name": "Status"
        }
      },
      "x-go-package": "github.com/asciiu/gomo/api/controllers"
    },
    "ResponseDeviceSuccess": {
      "type": "object",
      "title": "A ResponseDeviceSuccess will always contain a status of \"successful\".",
      "properties": {
        "data": {
          "$ref": "#/definitions/UserDeviceData"
        },
        "status": {
          "type": "string",
          "x-go-name": "Status"
        }
      },
      "x-go-package": "github.com/asciiu/gomo/api/controllers"
    },
    "ResponseDevicesSuccess": {
      "type": "object",
      "title": "A ResponseDevicesSuccess will always contain a status of \"successful\".",
      "properties": {
        "data": {
          "$ref": "#/definitions/DeviceList"
        },
        "status": {
          "type": "string",
          "x-go-name": "Status"
        }
      },
      "x-go-package": "github.com/asciiu/gomo/api/controllers"
    },
    "ResponseMarkets": {
      "type": "object",
      "properties": {
        "markets": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Market"
          },
          "x-go-name": "Markets"
        }
      },
      "x-go-package": "github.com/asciiu/gomo/api/controllers"
    },
    "ResponsePlanSuccess": {
      "type": "object",
      "title": "A ResponsePlanSuccess will always contain a status of \"successful\".",
      "properties": {
        "data": {
          "$ref": "#/definitions/Plan"
        },
        "status": {
          "type": "string",
          "x-go-name": "Status"
        }
      },
      "x-go-package": "github.com/asciiu/gomo/api/controllers"
    },
    "ResponsePlansSuccess": {
      "type": "object",
      "title": "A ResponsePlansSuccess will always contain a status of \"successful\".",
      "properties": {
        "data": {
          "$ref": "#/definitions/PlansPage"
        },
        "status": {
          "type": "string",
          "x-go-name": "Status"
        }
      },
      "x-go-package": "github.com/asciiu/gomo/api/controllers"
    },
    "ResponseSessionSuccess": {
      "type": "object",
      "title": "A ResponseSessionSuccess will always contain a status of \"successful\".",
      "properties": {
        "data": {
          "$ref": "#/definitions/UserMetaData"
        },
        "status": {
          "type": "string",
          "x-go-name": "Status"
        }
      },
      "x-go-package": "github.com/asciiu/gomo/api/controllers"
    },
    "SearchActivity": {
      "description": "and it is not used anywhere.",
      "type": "object",
      "title": "This struct is used in the generated swagger docs,",
      "properties": {
        "objectID": {
          "description": "Optional activity in relation to objectID\nIn: query",
          "type": "string",
          "x-go-name": "ObjectID"
        },
        "page": {
          "description": "Optional page that starts from 0\nIn: query",
          "type": "string",
          "x-go-name": "Page"
        },
        "pageSize": {
          "description": "Optional page size that defaults to 20\nIn: query",
          "type": "string",
          "x-go-name": "PageSize"
        }
      },
      "x-go-package": "github.com/asciiu/gomo/api/controllers"
    },
    "SearchController": {
      "type": "object",
      "properties": {
        "AnalyticsClient": {
          "$ref": "#/definitions/AnalyticsServiceClient"
        }
      },
      "x-go-package": "github.com/asciiu/gomo/api/controllers"
    },
    "SearchTerm": {
      "description": "and it is not used anywhere.",
      "type": "object",
      "title": "This struct is used in the generated swagger docs,",
      "properties": {
        "term": {
          "type": "string",
          "x-go-name": "Term"
        }
      },
      "x-go-package": "github.com/asciiu/gomo/api/controllers"
    },
    "SessionController": {
      "type": "object",
      "properties": {
        "AccountClient": {
          "$ref": "#/definitions/AccountServiceClient"
        },
        "DB": {
          "$ref": "#/definitions/DB"
        },
        "UserClient": {
          "$ref": "#/definitions/UserServiceClient"
        }
      },
      "x-go-package": "github.com/asciiu/gomo/api/controllers"
    },
    "SignupRequest": {
      "type": "object",
      "properties": {
        "email": {
          "description": "Required. Must be unique! We need to validate these coming in.\nin: body",
          "type": "string",
          "x-go-name": "Email"
        },
        "first": {
          "description": "Optional.\nin: body",
          "type": "string",
          "x-go-name": "First"
        },
        "last": {
          "description": "Optional.\nin: body",
          "type": "string",
          "x-go-name": "Last"
        },
        "password": {
          "description": "Required. We need password requirements.\nin: body",
          "type": "string",
          "x-go-name": "Password"
        }
      },
      "x-go-package": "github.com/asciiu/gomo/api/controllers"
    },
    "Trigger": {
      "type": "object",
      "properties": {
        "actions": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Actions"
        },
        "code": {
          "type": "string",
          "x-go-name": "Code"
        },
        "createdOn": {
          "type": "string",
          "x-go-name": "CreatedOn"
        },
        "index": {
          "type": "integer",
          "format": "uint32",
          "x-go-name": "Index"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "orderID": {
          "type": "string",
          "x-go-name": "OrderID"
        },
        "title": {
          "type": "string",
          "x-go-name": "Title"
        },
        "triggerID": {
          "type": "string",
          "x-go-name": "TriggerID"
        },
        "triggerTemplateID": {
          "type": "string",
          "x-go-name": "TriggerTemplateID"
        },
        "triggered": {
          "type": "boolean",
          "x-go-name": "Triggered"
        },
        "triggeredCondition": {
          "type": "string",
          "x-go-name": "TriggeredCondition"
        },
        "triggeredPrice": {
          "type": "number",
          "format": "double",
          "x-go-name": "TriggeredPrice"
        },
        "triggeredTimestamp": {
          "type": "string",
          "x-go-name": "TriggeredTimestamp"
        },
        "updatedOn": {
          "type": "string",
          "x-go-name": "UpdatedOn"
        }
      },
      "x-go-package": "github.com/asciiu/gomo/api/vendor/github.com/asciiu/gomo/plan-service/proto/order"
    },
    "TriggerReq": {
      "type": "object",
      "properties": {
        "actions": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Actions"
        },
        "code": {
          "type": "string",
          "x-go-name": "Code"
        },
        "index": {
          "type": "integer",
          "format": "uint32",
          "x-go-name": "Index"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "title": {
          "type": "string",
          "x-go-name": "Title"
        },
        "triggerTemplateID": {
          "description": "Optional trigger template ID.\nin: body",
          "type": "string",
          "x-go-name": "TriggerTemplateID"
        }
      },
      "x-go-package": "github.com/asciiu/gomo/api/controllers"
    },
    "UpdateAccountRequest": {
      "type": "object",
      "properties": {
        "color": {
          "description": "Optional color\nin: body",
          "type": "string",
          "x-go-name": "Color"
        },
        "description": {
          "description": "Optional defaults to 'active' status. Valid input status is 'active', 'inactive', or 'historic'\nin: body",
          "type": "string",
          "x-go-name": "Description"
        },
        "keyPublic": {
          "description": "Optional public viewable key-secret pair. This value is required for non paper accounts.\nin: body",
          "type": "string",
          "x-go-name": "KeyPublic"
        },
        "keySecret": {
          "description": "Optional init timestamp for plan RFC3339 formatted (e.g. 2018-08-26T22:49:10.168652Z). This timestamp will be used to measure initial user currency balance (valuation in user preferred currency)\nin: body",
          "type": "string",
          "x-go-name": "KeySecret"
        },
        "title": {
          "description": "Optional title\nin: body",
          "type": "string",
          "x-go-name": "Title"
        }
      },
      "x-go-package": "github.com/asciiu/gomo/api/controllers"
    },
    "UpdateActivity": {
      "type": "object",
      "properties": {
        "clickedAt": {
          "description": "Optional e.g. 2006-01-02T15:04:05Z\nIn: query",
          "type": "string",
          "x-go-name": "ClickedAt"
        },
        "seenAt": {
          "description": "Optional e.g. 2006-01-02T15:04:05Z\nIn: query",
          "type": "string",
          "x-go-name": "SeenAt"
        }
      },
      "x-go-package": "github.com/asciiu/gomo/api/controllers"
    },
    "UpdatePlanRequest": {
      "type": "object",
      "properties": {
        "closeOnComplete": {
          "description": "Optional bool to indicate that you want the plan to be 'closed' when the last order for the plan finishes (note: order status fail will also close the plan)\nin: body",
          "type": "boolean",
          "x-go-name": "CloseOnComplete"
        },
        "initialTimestamp": {
          "description": "Optional init timestamp for plan RFC3339 formatted (e.g. 2018-08-26T22:49:10.168652Z). This timestamp will be used to measure initial user currency balance (valuation in user preferred currency)\nin: body",
          "type": "string",
          "x-go-name": "InitialTimestamp"
        },
        "orders": {
          "description": "Required array of orders. You cannot update executed orders. The entire inactive chain is assumed to be in this array.\nin: body",
          "type": "array",
          "items": {
            "$ref": "#/definitions/NewOrderReq"
          },
          "x-go-name": "Orders"
        },
        "planTemplateID": {
          "description": "Optional plan template ID.\nin: body",
          "type": "string",
          "x-go-name": "PlanTemplateID"
        },
        "status": {
          "description": "Optional only needed to update the status of the plan to 'inactive', 'active'\nin: body",
          "type": "string",
          "x-go-name": "Status"
        },
        "title": {
          "description": "Optional plan title\nin: body",
          "type": "string",
          "x-go-name": "Title"
        },
        "userCurrencySymbol": {
          "description": "Optional base currency from which plan currency will be measured with.\nin: body",
          "type": "string",
          "x-go-name": "UserCurrencySymbol"
        }
      },
      "x-go-package": "github.com/asciiu/gomo/api/controllers"
    },
    "UserActivityPage": {
      "type": "object",
      "properties": {
        "activity": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Activity"
          },
          "x-go-name": "Activity"
        },
        "page": {
          "type": "integer",
          "format": "uint32",
          "x-go-name": "Page"
        },
        "pageSize": {
          "type": "integer",
          "format": "uint32",
          "x-go-name": "PageSize"
        },
        "total": {
          "type": "integer",
          "format": "uint32",
          "x-go-name": "Total"
        }
      },
      "x-go-package": "github.com/asciiu/gomo/api/vendor/github.com/asciiu/gomo/activity-bulletin/proto"
    },
    "UserData": {
      "type": "object",
      "properties": {
        "devices": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Device"
          },
          "x-go-name": "Devices"
        },
        "user": {
          "$ref": "#/definitions/UserInfo"
        }
      },
      "x-go-package": "github.com/asciiu/gomo/api/controllers"
    },
    "UserDeviceData": {
      "type": "object",
      "properties": {
        "device": {
          "$ref": "#/definitions/ApiDevice"
        }
      },
      "x-go-package": "github.com/asciiu/gomo/api/controllers"
    },
    "UserInfo": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string",
          "x-go-name": "Email"
        },
        "first": {
          "type": "string",
          "x-go-name": "First"
        },
        "last": {
          "type": "string",
          "x-go-name": "Last"
        },
        "userID": {
          "type": "string",
          "x-go-name": "UserID"
        }
      },
      "x-go-package": "github.com/asciiu/gomo/api/vendor/github.com/asciiu/gomo/user-service/models"
    },
    "UserMeta": {
      "type": "object",
      "properties": {
        "accounts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Account"
          },
          "x-go-name": "Accounts"
        },
        "email": {
          "type": "string",
          "x-go-name": "Email"
        },
        "first": {
          "type": "string",
          "x-go-name": "First"
        },
        "last": {
          "type": "string",
          "x-go-name": "Last"
        },
        "userID": {
          "type": "string",
          "x-go-name": "UserID"
        }
      },
      "x-go-package": "github.com/asciiu/gomo/api/controllers"
    },
    "UserMetaData": {
      "type": "object",
      "properties": {
        "user": {
          "$ref": "#/definitions/UserMeta"
        }
      },
      "x-go-package": "github.com/asciiu/gomo/api/controllers"
    },
    "UserServiceClient": {
      "type": "object",
      "x-go-package": "github.com/asciiu/gomo/api/vendor/github.com/asciiu/gomo/user-service/proto/user"
    },
    "responseError": {
      "description": "This response may or may not include data encapsulating the user information.",
      "type": "object",
      "title": "A ResponseSuccess will always contain a status of \"successful\".",
      "properties": {
        "message": {
          "type": "string",
          "x-go-name": "Message"
        },
        "status": {
          "type": "string",
          "x-go-name": "Status"
        }
      },
      "x-go-name": "ResponseError",
      "x-go-package": "github.com/asciiu/gomo/api/controllers"
    },
    "responseSearchSuccess": {
      "type": "object",
      "title": "A ResponseSearchSuccess will always contain a status of \"successful\".",
      "properties": {
        "data": {
          "$ref": "#/definitions/ResponseMarkets"
        },
        "status": {
          "type": "string",
          "x-go-name": "Status"
        }
      },
      "x-go-name": "ResponseSearchSuccess",
      "x-go-package": "github.com/asciiu/gomo/api/controllers"
    },
    "responseSuccess": {
      "type": "object",
      "title": "A ResponseSuccess will always contain a status of \"successful\".",
      "properties": {
        "data": {
          "$ref": "#/definitions/UserData"
        },
        "status": {
          "type": "string",
          "x-go-name": "Status"
        }
      },
      "x-go-name": "ResponseSuccess",
      "x-go-package": "github.com/asciiu/gomo/api/controllers"
    }
  },
  "securityDefinitions": {
    "Bearer": {
      "type": "apiKey",
      "name": "Authorization",
      "in": "header"
    }
  }
}