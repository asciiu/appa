// Code generated by protoc-gen-go. DO NOT EDIT.
// source: github.com/asciiu/gomo/binance-service/proto/binance/binance.proto

/*
Package binance is a generated protocol buffer package.

It is generated from these files:
	github.com/asciiu/gomo/binance-service/proto/binance/binance.proto

It has these top-level messages:
	MarketRestrictionRequest
	MarketRestriction
	RestrictionData
	MarketRestrictionResponse
*/
package binance

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import balance "github.com/asciiu/gomo/binance-service/proto/balance"

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "golang.org/x/net/context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type MarketRestrictionRequest struct {
	MarketName string `protobuf:"bytes,1,opt,name=marketName" json:"marketName"`
}

func (m *MarketRestrictionRequest) Reset()                    { *m = MarketRestrictionRequest{} }
func (m *MarketRestrictionRequest) String() string            { return proto.CompactTextString(m) }
func (*MarketRestrictionRequest) ProtoMessage()               {}
func (*MarketRestrictionRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *MarketRestrictionRequest) GetMarketName() string {
	if m != nil {
		return m.MarketName
	}
	return ""
}

type MarketRestriction struct {
	MinTradeSize    float64 `protobuf:"fixed64,1,opt,name=minTradeSize" json:"minTradeSize"`
	MaxTradeSize    float64 `protobuf:"fixed64,2,opt,name=maxTradeSize" json:"maxTradeSize"`
	TradeSizeStep   float64 `protobuf:"fixed64,3,opt,name=tradeSizeStep" json:"tradeSizeStep"`
	MinMarketPrice  float64 `protobuf:"fixed64,4,opt,name=minMarketPrice" json:"minMarketPrice"`
	MaxMarketPrice  float64 `protobuf:"fixed64,5,opt,name=maxMarketPrice" json:"maxMarketPrice"`
	MarketPriceStep float64 `protobuf:"fixed64,6,opt,name=marketPriceStep" json:"marketPriceStep"`
}

func (m *MarketRestriction) Reset()                    { *m = MarketRestriction{} }
func (m *MarketRestriction) String() string            { return proto.CompactTextString(m) }
func (*MarketRestriction) ProtoMessage()               {}
func (*MarketRestriction) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *MarketRestriction) GetMinTradeSize() float64 {
	if m != nil {
		return m.MinTradeSize
	}
	return 0
}

func (m *MarketRestriction) GetMaxTradeSize() float64 {
	if m != nil {
		return m.MaxTradeSize
	}
	return 0
}

func (m *MarketRestriction) GetTradeSizeStep() float64 {
	if m != nil {
		return m.TradeSizeStep
	}
	return 0
}

func (m *MarketRestriction) GetMinMarketPrice() float64 {
	if m != nil {
		return m.MinMarketPrice
	}
	return 0
}

func (m *MarketRestriction) GetMaxMarketPrice() float64 {
	if m != nil {
		return m.MaxMarketPrice
	}
	return 0
}

func (m *MarketRestriction) GetMarketPriceStep() float64 {
	if m != nil {
		return m.MarketPriceStep
	}
	return 0
}

type RestrictionData struct {
	Restrictions *MarketRestriction `protobuf:"bytes,1,opt,name=restrictions" json:"restrictions"`
}

func (m *RestrictionData) Reset()                    { *m = RestrictionData{} }
func (m *RestrictionData) String() string            { return proto.CompactTextString(m) }
func (*RestrictionData) ProtoMessage()               {}
func (*RestrictionData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *RestrictionData) GetRestrictions() *MarketRestriction {
	if m != nil {
		return m.Restrictions
	}
	return nil
}

type MarketRestrictionResponse struct {
	Status  string           `protobuf:"bytes,1,opt,name=status" json:"status"`
	Message string           `protobuf:"bytes,2,opt,name=message" json:"message"`
	Data    *RestrictionData `protobuf:"bytes,3,opt,name=data" json:"data"`
}

func (m *MarketRestrictionResponse) Reset()                    { *m = MarketRestrictionResponse{} }
func (m *MarketRestrictionResponse) String() string            { return proto.CompactTextString(m) }
func (*MarketRestrictionResponse) ProtoMessage()               {}
func (*MarketRestrictionResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *MarketRestrictionResponse) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *MarketRestrictionResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *MarketRestrictionResponse) GetData() *RestrictionData {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterType((*MarketRestrictionRequest)(nil), "binance.MarketRestrictionRequest")
	proto.RegisterType((*MarketRestriction)(nil), "binance.MarketRestriction")
	proto.RegisterType((*RestrictionData)(nil), "binance.RestrictionData")
	proto.RegisterType((*MarketRestrictionResponse)(nil), "binance.MarketRestrictionResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for BinanceService service

type BinanceServiceClient interface {
	GetBalances(ctx context.Context, in *balance.BalanceRequest, opts ...client.CallOption) (*balance.BalancesResponse, error)
	GetMarketRestrictions(ctx context.Context, in *MarketRestrictionRequest, opts ...client.CallOption) (*MarketRestrictionResponse, error)
}

type binanceServiceClient struct {
	c           client.Client
	serviceName string
}

func NewBinanceServiceClient(serviceName string, c client.Client) BinanceServiceClient {
	if c == nil {
		c = client.NewClient()
	}
	if len(serviceName) == 0 {
		serviceName = "binance"
	}
	return &binanceServiceClient{
		c:           c,
		serviceName: serviceName,
	}
}

func (c *binanceServiceClient) GetBalances(ctx context.Context, in *balance.BalanceRequest, opts ...client.CallOption) (*balance.BalancesResponse, error) {
	req := c.c.NewRequest(c.serviceName, "BinanceService.GetBalances", in)
	out := new(balance.BalancesResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *binanceServiceClient) GetMarketRestrictions(ctx context.Context, in *MarketRestrictionRequest, opts ...client.CallOption) (*MarketRestrictionResponse, error) {
	req := c.c.NewRequest(c.serviceName, "BinanceService.GetMarketRestrictions", in)
	out := new(MarketRestrictionResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for BinanceService service

type BinanceServiceHandler interface {
	GetBalances(context.Context, *balance.BalanceRequest, *balance.BalancesResponse) error
	GetMarketRestrictions(context.Context, *MarketRestrictionRequest, *MarketRestrictionResponse) error
}

func RegisterBinanceServiceHandler(s server.Server, hdlr BinanceServiceHandler, opts ...server.HandlerOption) {
	s.Handle(s.NewHandler(&BinanceService{hdlr}, opts...))
}

type BinanceService struct {
	BinanceServiceHandler
}

func (h *BinanceService) GetBalances(ctx context.Context, in *balance.BalanceRequest, out *balance.BalancesResponse) error {
	return h.BinanceServiceHandler.GetBalances(ctx, in, out)
}

func (h *BinanceService) GetMarketRestrictions(ctx context.Context, in *MarketRestrictionRequest, out *MarketRestrictionResponse) error {
	return h.BinanceServiceHandler.GetMarketRestrictions(ctx, in, out)
}

func init() {
	proto.RegisterFile("github.com/asciiu/gomo/binance-service/proto/binance/binance.proto", fileDescriptor0)
}

var fileDescriptor0 = []byte{
	// 381 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x92, 0xc1, 0x4e, 0xe3, 0x30,
	0x10, 0x40, 0x37, 0xbb, 0xdd, 0x56, 0x9d, 0x76, 0x5b, 0xad, 0x25, 0x20, 0xed, 0x01, 0x41, 0x84,
	0x50, 0x0f, 0x90, 0x48, 0xe5, 0xc6, 0x81, 0x43, 0x41, 0xea, 0x09, 0x04, 0x29, 0x1f, 0x80, 0x9b,
	0x8e, 0x8a, 0x05, 0x4e, 0x4a, 0x3c, 0x41, 0x15, 0x7c, 0x18, 0x1f, 0xc7, 0x05, 0xc9, 0x76, 0xda,
	0x24, 0x45, 0x95, 0x38, 0x59, 0xf3, 0xfc, 0x3c, 0x1e, 0x8f, 0x07, 0x46, 0x73, 0x41, 0x8f, 0xd9,
	0xd4, 0x8f, 0x12, 0x19, 0x70, 0x15, 0x09, 0x91, 0x05, 0xf3, 0x44, 0x26, 0xc1, 0x54, 0xc4, 0x3c,
	0x8e, 0xf0, 0x54, 0x61, 0xfa, 0x2a, 0x22, 0x0c, 0x16, 0x69, 0x42, 0x2b, 0x9a, 0xaf, 0xbe, 0xa6,
	0xac, 0x61, 0xc3, 0xfe, 0x0f, 0x93, 0xf1, 0x67, 0x93, 0xcc, 0xac, 0x26, 0x99, 0x77, 0x0e, 0xee,
	0x35, 0x4f, 0x9f, 0x90, 0x42, 0x54, 0x94, 0x8a, 0x88, 0x44, 0x12, 0x87, 0xf8, 0x92, 0xa1, 0x22,
	0xb6, 0x0f, 0x20, 0xf5, 0xde, 0x0d, 0x97, 0xe8, 0x3a, 0x07, 0xce, 0xa0, 0x19, 0x16, 0x88, 0xf7,
	0xe9, 0xc0, 0xff, 0x8d, 0xc3, 0xcc, 0x83, 0xb6, 0x14, 0xf1, 0x7d, 0xca, 0x67, 0x38, 0x11, 0x6f,
	0xe6, 0x9c, 0x13, 0x96, 0x98, 0x76, 0xf8, 0x72, 0xed, 0xfc, 0xb6, 0x4e, 0x81, 0xb1, 0x23, 0xf8,
	0x47, 0x79, 0x30, 0x21, 0x5c, 0xb8, 0x7f, 0xb4, 0x54, 0x86, 0xec, 0x18, 0x3a, 0x52, 0xc4, 0xa6,
	0x8a, 0xdb, 0x54, 0x44, 0xe8, 0xd6, 0xb4, 0x56, 0xa1, 0xda, 0xe3, 0xcb, 0xa2, 0xf7, 0xd7, 0x7a,
	0x25, 0xca, 0x06, 0xd0, 0x95, 0xeb, 0x50, 0xdf, 0x5b, 0xd7, 0x62, 0x15, 0x7b, 0x77, 0xd0, 0x2d,
	0x3c, 0xfb, 0x8a, 0x13, 0x67, 0x17, 0xd0, 0x4e, 0xd7, 0x48, 0xe9, 0xa7, 0xb7, 0x86, 0x7d, 0x3f,
	0xff, 0xbf, 0xcd, 0x4e, 0x97, 0x7c, 0xef, 0x1d, 0x7a, 0xdf, 0x7c, 0x86, 0x5a, 0x24, 0xb1, 0x42,
	0xb6, 0x0b, 0x75, 0x45, 0x9c, 0x32, 0x65, 0x7f, 0xc2, 0x46, 0xcc, 0x85, 0x86, 0x44, 0xa5, 0xf8,
	0xdc, 0xb4, 0xb1, 0x19, 0xe6, 0x21, 0x3b, 0x81, 0xda, 0x8c, 0x13, 0xd7, 0x8d, 0x6b, 0x0d, 0xdd,
	0x55, 0x19, 0x95, 0xb2, 0x43, 0x6d, 0x0d, 0x3f, 0x1c, 0xe8, 0x8c, 0x8c, 0x31, 0x31, 0x83, 0xc3,
	0x2e, 0xa1, 0x35, 0x46, 0x1a, 0x99, 0x81, 0x51, 0x6c, 0xcf, 0xcf, 0x67, 0xc7, 0x22, 0x3b, 0x28,
	0xfd, 0x5e, 0x75, 0x43, 0xe5, 0x55, 0x7b, 0xbf, 0xd8, 0x03, 0xec, 0x8c, 0x91, 0x36, 0xde, 0xa5,
	0xd8, 0xe1, 0x96, 0xbe, 0xd8, 0xc4, 0xde, 0x36, 0x25, 0xbf, 0x61, 0x5a, 0xd7, 0xa3, 0x7c, 0xf6,
	0x15, 0x00, 0x00, 0xff, 0xff, 0x1c, 0x4a, 0xfa, 0x09, 0x5d, 0x03, 0x00, 0x00,
}
