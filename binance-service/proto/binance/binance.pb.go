// Code generated by protoc-gen-go. DO NOT EDIT.
// source: github.com/asciiu/gomo/binance-service/proto/binance/binance.proto

/*
Package binance is a generated protocol buffer package.

It is generated from these files:
	github.com/asciiu/gomo/binance-service/proto/binance/binance.proto

It has these top-level messages:
*/
package binance

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import balance "github.com/asciiu/gomo/binance-service/proto/balance"

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "golang.org/x/net/context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for BinanceService service

type BinanceServiceClient interface {
	GetBalances(ctx context.Context, in *balance.BalanceRequest, opts ...client.CallOption) (*balance.BalancesResponse, error)
}

type binanceServiceClient struct {
	c           client.Client
	serviceName string
}

func NewBinanceServiceClient(serviceName string, c client.Client) BinanceServiceClient {
	if c == nil {
		c = client.NewClient()
	}
	if len(serviceName) == 0 {
		serviceName = "binance"
	}
	return &binanceServiceClient{
		c:           c,
		serviceName: serviceName,
	}
}

func (c *binanceServiceClient) GetBalances(ctx context.Context, in *balance.BalanceRequest, opts ...client.CallOption) (*balance.BalancesResponse, error) {
	req := c.c.NewRequest(c.serviceName, "BinanceService.GetBalances", in)
	out := new(balance.BalancesResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for BinanceService service

type BinanceServiceHandler interface {
	GetBalances(context.Context, *balance.BalanceRequest, *balance.BalancesResponse) error
}

func RegisterBinanceServiceHandler(s server.Server, hdlr BinanceServiceHandler, opts ...server.HandlerOption) {
	s.Handle(s.NewHandler(&BinanceService{hdlr}, opts...))
}

type BinanceService struct {
	BinanceServiceHandler
}

func (h *BinanceService) GetBalances(ctx context.Context, in *balance.BalanceRequest, out *balance.BalancesResponse) error {
	return h.BinanceServiceHandler.GetBalances(ctx, in, out)
}

func init() {
	proto.RegisterFile("github.com/asciiu/gomo/binance-service/proto/binance/binance.proto", fileDescriptor0)
}

var fileDescriptor0 = []byte{
	// 146 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x72, 0x4a, 0xcf, 0x2c, 0xc9,
	0x28, 0x4d, 0xd2, 0x4b, 0xce, 0xcf, 0xd5, 0x4f, 0x2c, 0x4e, 0xce, 0xcc, 0x2c, 0xd5, 0x4f, 0xcf,
	0xcf, 0xcd, 0xd7, 0x4f, 0xca, 0xcc, 0x4b, 0xcc, 0x4b, 0x4e, 0xd5, 0x2d, 0x4e, 0x2d, 0x2a, 0xcb,
	0x4c, 0x4e, 0xd5, 0x2f, 0x28, 0xca, 0x2f, 0x81, 0x8b, 0xc2, 0x68, 0x3d, 0xb0, 0xa8, 0x10, 0x3b,
	0x94, 0x2b, 0x45, 0xa2, 0x61, 0x89, 0x39, 0x10, 0xc3, 0x20, 0x34, 0xc4, 0x30, 0xa3, 0x50, 0x2e,
	0x3e, 0x27, 0x88, 0xf2, 0x60, 0x88, 0x6a, 0x21, 0x67, 0x2e, 0x6e, 0xf7, 0xd4, 0x12, 0x27, 0x88,
	0xaa, 0x62, 0x21, 0x71, 0x3d, 0x98, 0x06, 0xa8, 0x50, 0x50, 0x6a, 0x61, 0x69, 0x6a, 0x71, 0x89,
	0x94, 0x24, 0xba, 0x44, 0x71, 0x50, 0x6a, 0x71, 0x41, 0x7e, 0x5e, 0x71, 0xaa, 0x12, 0x43, 0x12,
	0x1b, 0xd8, 0x74, 0x63, 0x40, 0x00, 0x00, 0x00, 0xff, 0xff, 0xc1, 0x22, 0xe4, 0xe7, 0xf0, 0x00,
	0x00, 0x00,
}
